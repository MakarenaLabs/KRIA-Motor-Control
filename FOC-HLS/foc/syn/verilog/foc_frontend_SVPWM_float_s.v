// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_SVPWM_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Va,
        Vb,
        Vc,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Va;
input  [31:0] Vb;
input  [31:0] Vc;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] min_fu_174_p3;
reg   [31:0] min_reg_728;
wire   [31:0] min_1_fu_263_p3;
reg   [31:0] min_1_reg_735;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_80_p2;
reg   [31:0] offset_reg_740;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_68_p2;
reg   [31:0] dc_reg_747;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_72_p2;
reg   [31:0] dc_11_reg_752;
wire   [31:0] grp_fu_76_p2;
reg   [31:0] dc_12_reg_757;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state4;
reg   [31:0] grp_fu_85_p0;
reg   [31:0] grp_fu_85_p1;
wire   [31:0] bitcast_ln14_fu_92_p1;
wire   [31:0] bitcast_ln14_1_fu_109_p1;
wire   [7:0] tmp_s_fu_95_p4;
wire   [22:0] trunc_ln14_fu_105_p1;
wire   [0:0] icmp_ln14_1_fu_132_p2;
wire   [0:0] icmp_ln14_fu_126_p2;
wire   [7:0] tmp_40_fu_112_p4;
wire   [22:0] trunc_ln14_1_fu_122_p1;
wire   [0:0] icmp_ln14_3_fu_150_p2;
wire   [0:0] icmp_ln14_2_fu_144_p2;
wire   [0:0] or_ln14_fu_138_p2;
wire   [0:0] or_ln14_1_fu_156_p2;
wire   [0:0] and_ln14_fu_162_p2;
wire   [0:0] grp_fu_85_p2;
wire   [0:0] and_ln14_1_fu_168_p2;
wire   [31:0] bitcast_ln15_fu_181_p1;
wire   [31:0] bitcast_ln15_1_fu_198_p1;
wire   [7:0] tmp_42_fu_184_p4;
wire   [22:0] trunc_ln15_fu_194_p1;
wire   [0:0] icmp_ln15_1_fu_221_p2;
wire   [0:0] icmp_ln15_fu_215_p2;
wire   [7:0] tmp_43_fu_201_p4;
wire   [22:0] trunc_ln15_1_fu_211_p1;
wire   [0:0] icmp_ln15_3_fu_239_p2;
wire   [0:0] icmp_ln15_2_fu_233_p2;
wire   [0:0] or_ln15_fu_227_p2;
wire   [0:0] or_ln15_1_fu_245_p2;
wire   [0:0] and_ln15_fu_251_p2;
wire   [0:0] and_ln15_1_fu_257_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] data_V_fu_269_p1;
wire   [22:0] tmp_83_fu_290_p1;
wire   [24:0] mantissa_fu_294_p4;
wire   [7:0] tmp_82_fu_280_p4;
wire   [8:0] zext_ln344_fu_308_p1;
wire   [8:0] add_ln344_fu_312_p2;
wire   [7:0] sub_ln1364_fu_326_p2;
wire   [0:0] isNeg_fu_318_p3;
wire  signed [8:0] sext_ln1364_fu_332_p1;
wire   [8:0] ush_fu_336_p3;
wire  signed [31:0] sext_ln1340_fu_344_p1;
wire   [62:0] zext_ln15_fu_304_p1;
wire   [62:0] zext_ln1340_fu_348_p1;
wire   [62:0] r_V_fu_352_p2;
wire   [0:0] tmp_fu_364_p3;
wire   [62:0] r_V_19_fu_358_p2;
wire   [15:0] zext_ln671_fu_372_p1;
wire   [15:0] tmp_46_fu_376_p4;
wire   [15:0] val_fu_386_p3;
wire   [0:0] p_Result_s_fu_272_p3;
wire   [15:0] result_V_41_fu_394_p2;
wire   [31:0] data_V_12_fu_408_p1;
wire   [22:0] tmp_85_fu_429_p1;
wire   [24:0] mantissa_8_fu_433_p4;
wire   [7:0] tmp_84_fu_419_p4;
wire   [8:0] zext_ln344_8_fu_447_p1;
wire   [8:0] add_ln344_8_fu_451_p2;
wire   [7:0] sub_ln1364_7_fu_465_p2;
wire   [0:0] isNeg_8_fu_457_p3;
wire  signed [8:0] sext_ln1364_8_fu_471_p1;
wire   [8:0] ush_8_fu_475_p3;
wire  signed [31:0] sext_ln1340_8_fu_483_p1;
wire   [62:0] zext_ln15_8_fu_443_p1;
wire   [62:0] zext_ln1340_8_fu_487_p1;
wire   [62:0] r_V_20_fu_491_p2;
wire   [0:0] tmp_76_fu_503_p3;
wire   [62:0] r_V_21_fu_497_p2;
wire   [15:0] zext_ln671_8_fu_511_p1;
wire   [15:0] tmp_48_fu_515_p4;
wire   [15:0] val_8_fu_525_p3;
wire   [0:0] p_Result_13_fu_411_p3;
wire   [15:0] result_V_44_fu_533_p2;
wire   [31:0] data_V_13_fu_547_p1;
wire   [22:0] tmp_87_fu_568_p1;
wire   [24:0] mantissa_9_fu_572_p4;
wire   [7:0] tmp_86_fu_558_p4;
wire   [8:0] zext_ln344_9_fu_586_p1;
wire   [8:0] add_ln344_9_fu_590_p2;
wire   [7:0] sub_ln1364_8_fu_604_p2;
wire   [0:0] isNeg_9_fu_596_p3;
wire  signed [8:0] sext_ln1364_9_fu_610_p1;
wire   [8:0] ush_9_fu_614_p3;
wire  signed [31:0] sext_ln1340_9_fu_622_p1;
wire   [62:0] zext_ln15_9_fu_582_p1;
wire   [62:0] zext_ln1340_9_fu_626_p1;
wire   [62:0] r_V_22_fu_630_p2;
wire   [0:0] tmp_81_fu_642_p3;
wire   [62:0] r_V_23_fu_636_p2;
wire   [15:0] zext_ln671_9_fu_650_p1;
wire   [15:0] tmp_50_fu_654_p4;
wire   [15:0] val_9_fu_664_p3;
wire   [0:0] p_Result_14_fu_550_p3;
wire   [15:0] result_V_47_fu_672_p2;
wire   [15:0] result_V_fu_400_p3;
wire   [15:0] result_V_48_fu_539_p3;
wire   [15:0] result_V_49_fu_678_p3;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(offset_reg_740),
    .din1(Va),
    .ce(1'b1),
    .dout(grp_fu_68_p2)
);

foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(offset_reg_740),
    .din1(Vb),
    .ce(1'b1),
    .dout(grp_fu_72_p2)
);

foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(offset_reg_740),
    .din1(Vc),
    .ce(1'b1),
    .dout(grp_fu_76_p2)
);

foc_frontend_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(min_1_reg_735),
    .din1(32'd1056964608),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_85_p0),
    .din1(grp_fu_85_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_85_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dc_11_reg_752 <= grp_fu_72_p2;
        dc_12_reg_757 <= grp_fu_76_p2;
        dc_reg_747 <= grp_fu_68_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        min_1_reg_735 <= min_1_fu_263_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        min_reg_728 <= min_fu_174_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        offset_reg_740 <= grp_fu_80_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_85_p0 = min_fu_174_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_85_p0 = Va;
    end else begin
        grp_fu_85_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_85_p1 = Vc;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_85_p1 = Vb;
    end else begin
        grp_fu_85_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln344_8_fu_451_p2 = ($signed(zext_ln344_8_fu_447_p1) + $signed(9'd385));

assign add_ln344_9_fu_590_p2 = ($signed(zext_ln344_9_fu_586_p1) + $signed(9'd385));

assign add_ln344_fu_312_p2 = ($signed(zext_ln344_fu_308_p1) + $signed(9'd385));

assign and_ln14_1_fu_168_p2 = (grp_fu_85_p2 & and_ln14_fu_162_p2);

assign and_ln14_fu_162_p2 = (or_ln14_fu_138_p2 & or_ln14_1_fu_156_p2);

assign and_ln15_1_fu_257_p2 = (grp_fu_85_p2 & and_ln15_fu_251_p2);

assign and_ln15_fu_251_p2 = (or_ln15_fu_227_p2 & or_ln15_1_fu_245_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return_0 = result_V_fu_400_p3;

assign ap_return_1 = result_V_48_fu_539_p3;

assign ap_return_2 = result_V_49_fu_678_p3;

assign bitcast_ln14_1_fu_109_p1 = Vb;

assign bitcast_ln14_fu_92_p1 = Va;

assign bitcast_ln15_1_fu_198_p1 = Vc;

assign bitcast_ln15_fu_181_p1 = min_reg_728;

assign data_V_12_fu_408_p1 = dc_11_reg_752;

assign data_V_13_fu_547_p1 = dc_12_reg_757;

assign data_V_fu_269_p1 = dc_reg_747;

assign icmp_ln14_1_fu_132_p2 = ((trunc_ln14_fu_105_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_144_p2 = ((tmp_40_fu_112_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_150_p2 = ((trunc_ln14_1_fu_122_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_126_p2 = ((tmp_s_fu_95_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_221_p2 = ((trunc_ln15_fu_194_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_2_fu_233_p2 = ((tmp_43_fu_201_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln15_3_fu_239_p2 = ((trunc_ln15_1_fu_211_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_215_p2 = ((tmp_42_fu_184_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_8_fu_457_p3 = add_ln344_8_fu_451_p2[32'd8];

assign isNeg_9_fu_596_p3 = add_ln344_9_fu_590_p2[32'd8];

assign isNeg_fu_318_p3 = add_ln344_fu_312_p2[32'd8];

assign mantissa_8_fu_433_p4 = {{{{1'd1}, {tmp_85_fu_429_p1}}}, {1'd0}};

assign mantissa_9_fu_572_p4 = {{{{1'd1}, {tmp_87_fu_568_p1}}}, {1'd0}};

assign mantissa_fu_294_p4 = {{{{1'd1}, {tmp_83_fu_290_p1}}}, {1'd0}};

assign min_1_fu_263_p3 = ((and_ln15_1_fu_257_p2[0:0] == 1'b1) ? min_reg_728 : Vc);

assign min_fu_174_p3 = ((and_ln14_1_fu_168_p2[0:0] == 1'b1) ? Va : Vb);

assign or_ln14_1_fu_156_p2 = (icmp_ln14_3_fu_150_p2 | icmp_ln14_2_fu_144_p2);

assign or_ln14_fu_138_p2 = (icmp_ln14_fu_126_p2 | icmp_ln14_1_fu_132_p2);

assign or_ln15_1_fu_245_p2 = (icmp_ln15_3_fu_239_p2 | icmp_ln15_2_fu_233_p2);

assign or_ln15_fu_227_p2 = (icmp_ln15_fu_215_p2 | icmp_ln15_1_fu_221_p2);

assign p_Result_13_fu_411_p3 = data_V_12_fu_408_p1[32'd31];

assign p_Result_14_fu_550_p3 = data_V_13_fu_547_p1[32'd31];

assign p_Result_s_fu_272_p3 = data_V_fu_269_p1[32'd31];

assign r_V_19_fu_358_p2 = zext_ln15_fu_304_p1 << zext_ln1340_fu_348_p1;

assign r_V_20_fu_491_p2 = zext_ln15_8_fu_443_p1 >> zext_ln1340_8_fu_487_p1;

assign r_V_21_fu_497_p2 = zext_ln15_8_fu_443_p1 << zext_ln1340_8_fu_487_p1;

assign r_V_22_fu_630_p2 = zext_ln15_9_fu_582_p1 >> zext_ln1340_9_fu_626_p1;

assign r_V_23_fu_636_p2 = zext_ln15_9_fu_582_p1 << zext_ln1340_9_fu_626_p1;

assign r_V_fu_352_p2 = zext_ln15_fu_304_p1 >> zext_ln1340_fu_348_p1;

assign result_V_41_fu_394_p2 = (16'd0 - val_fu_386_p3);

assign result_V_44_fu_533_p2 = (16'd0 - val_8_fu_525_p3);

assign result_V_47_fu_672_p2 = (16'd0 - val_9_fu_664_p3);

assign result_V_48_fu_539_p3 = ((p_Result_13_fu_411_p3[0:0] == 1'b1) ? result_V_44_fu_533_p2 : val_8_fu_525_p3);

assign result_V_49_fu_678_p3 = ((p_Result_14_fu_550_p3[0:0] == 1'b1) ? result_V_47_fu_672_p2 : val_9_fu_664_p3);

assign result_V_fu_400_p3 = ((p_Result_s_fu_272_p3[0:0] == 1'b1) ? result_V_41_fu_394_p2 : val_fu_386_p3);

assign sext_ln1340_8_fu_483_p1 = $signed(ush_8_fu_475_p3);

assign sext_ln1340_9_fu_622_p1 = $signed(ush_9_fu_614_p3);

assign sext_ln1340_fu_344_p1 = $signed(ush_fu_336_p3);

assign sext_ln1364_8_fu_471_p1 = $signed(sub_ln1364_7_fu_465_p2);

assign sext_ln1364_9_fu_610_p1 = $signed(sub_ln1364_8_fu_604_p2);

assign sext_ln1364_fu_332_p1 = $signed(sub_ln1364_fu_326_p2);

assign sub_ln1364_7_fu_465_p2 = (8'd127 - tmp_84_fu_419_p4);

assign sub_ln1364_8_fu_604_p2 = (8'd127 - tmp_86_fu_558_p4);

assign sub_ln1364_fu_326_p2 = (8'd127 - tmp_82_fu_280_p4);

assign tmp_40_fu_112_p4 = {{bitcast_ln14_1_fu_109_p1[30:23]}};

assign tmp_42_fu_184_p4 = {{bitcast_ln15_fu_181_p1[30:23]}};

assign tmp_43_fu_201_p4 = {{bitcast_ln15_1_fu_198_p1[30:23]}};

assign tmp_46_fu_376_p4 = {{r_V_19_fu_358_p2[39:24]}};

assign tmp_48_fu_515_p4 = {{r_V_21_fu_497_p2[39:24]}};

assign tmp_50_fu_654_p4 = {{r_V_23_fu_636_p2[39:24]}};

assign tmp_76_fu_503_p3 = r_V_20_fu_491_p2[32'd24];

assign tmp_81_fu_642_p3 = r_V_22_fu_630_p2[32'd24];

assign tmp_82_fu_280_p4 = {{data_V_fu_269_p1[30:23]}};

assign tmp_83_fu_290_p1 = data_V_fu_269_p1[22:0];

assign tmp_84_fu_419_p4 = {{data_V_12_fu_408_p1[30:23]}};

assign tmp_85_fu_429_p1 = data_V_12_fu_408_p1[22:0];

assign tmp_86_fu_558_p4 = {{data_V_13_fu_547_p1[30:23]}};

assign tmp_87_fu_568_p1 = data_V_13_fu_547_p1[22:0];

assign tmp_fu_364_p3 = r_V_fu_352_p2[32'd24];

assign tmp_s_fu_95_p4 = {{bitcast_ln14_fu_92_p1[30:23]}};

assign trunc_ln14_1_fu_122_p1 = bitcast_ln14_1_fu_109_p1[22:0];

assign trunc_ln14_fu_105_p1 = bitcast_ln14_fu_92_p1[22:0];

assign trunc_ln15_1_fu_211_p1 = bitcast_ln15_1_fu_198_p1[22:0];

assign trunc_ln15_fu_194_p1 = bitcast_ln15_fu_181_p1[22:0];

assign ush_8_fu_475_p3 = ((isNeg_8_fu_457_p3[0:0] == 1'b1) ? sext_ln1364_8_fu_471_p1 : add_ln344_8_fu_451_p2);

assign ush_9_fu_614_p3 = ((isNeg_9_fu_596_p3[0:0] == 1'b1) ? sext_ln1364_9_fu_610_p1 : add_ln344_9_fu_590_p2);

assign ush_fu_336_p3 = ((isNeg_fu_318_p3[0:0] == 1'b1) ? sext_ln1364_fu_332_p1 : add_ln344_fu_312_p2);

assign val_8_fu_525_p3 = ((isNeg_8_fu_457_p3[0:0] == 1'b1) ? zext_ln671_8_fu_511_p1 : tmp_48_fu_515_p4);

assign val_9_fu_664_p3 = ((isNeg_9_fu_596_p3[0:0] == 1'b1) ? zext_ln671_9_fu_650_p1 : tmp_50_fu_654_p4);

assign val_fu_386_p3 = ((isNeg_fu_318_p3[0:0] == 1'b1) ? zext_ln671_fu_372_p1 : tmp_46_fu_376_p4);

assign zext_ln1340_8_fu_487_p1 = $unsigned(sext_ln1340_8_fu_483_p1);

assign zext_ln1340_9_fu_626_p1 = $unsigned(sext_ln1340_9_fu_622_p1);

assign zext_ln1340_fu_348_p1 = $unsigned(sext_ln1340_fu_344_p1);

assign zext_ln15_8_fu_443_p1 = mantissa_8_fu_433_p4;

assign zext_ln15_9_fu_582_p1 = mantissa_9_fu_572_p4;

assign zext_ln15_fu_304_p1 = mantissa_fu_294_p4;

assign zext_ln344_8_fu_447_p1 = tmp_84_fu_419_p4;

assign zext_ln344_9_fu_586_p1 = tmp_86_fu_558_p4;

assign zext_ln344_fu_308_p1 = tmp_82_fu_280_p4;

assign zext_ln671_8_fu_511_p1 = tmp_76_fu_503_p3;

assign zext_ln671_9_fu_650_p1 = tmp_81_fu_642_p3;

assign zext_ln671_fu_372_p1 = tmp_fu_364_p3;

endmodule //foc_frontend_SVPWM_float_s
