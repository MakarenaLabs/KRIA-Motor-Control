// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_PI_control_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ref,
        val_r,
        KP,
        KI,
        ierr,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ref;
input  [31:0] val_r;
input  [31:0] KP;
input  [31:0] KI;
input  [31:0] ierr;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_60_p2;
reg   [31:0] reg_91;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state5;
reg   [31:0] ierr_assign_reg_220;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_67_p2;
reg   [31:0] mul_reg_235;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_72_p2;
reg   [31:0] mul1_reg_240;
wire   [31:0] bitcast_ln354_fu_111_p1;
wire    ap_CS_fsm_state17;
wire   [0:0] or_ln36_fu_142_p2;
reg   [0:0] or_ln36_reg_250;
wire   [0:0] grp_fu_80_p2;
reg   [0:0] tmp_51_reg_257;
wire   [0:0] grp_fu_85_p2;
reg   [0:0] tmp_52_reg_262;
reg   [0:0] tmp_s_reg_267;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_60_p0;
reg   [31:0] grp_fu_60_p1;
wire    ap_CS_fsm_state12;
wire  signed [31:0] grp_fu_77_p0;
reg   [31:0] grp_fu_80_p0;
reg   [31:0] grp_fu_80_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] data_V_fu_99_p1;
wire   [30:0] p_Result_s_fu_103_p1;
wire   [31:0] zext_ln368_fu_107_p1;
wire   [7:0] tmp_fu_116_p4;
wire   [22:0] trunc_ln36_fu_126_p1;
wire   [0:0] icmp_ln36_1_fu_136_p2;
wire   [0:0] icmp_ln36_fu_130_p2;
wire   [0:0] and_ln12_fu_148_p2;
wire   [0:0] and_ln12_15_fu_156_p2;
wire   [1:0] zext_ln12_fu_152_p1;
wire   [1:0] zext_ln12_15_fu_160_p1;
wire  signed [1:0] sub_ln12_fu_164_p2;
wire   [16:0] shl_ln_fu_174_p3;
wire  signed [16:0] sext_ln37_fu_170_p1;
wire   [16:0] sub_ln37_fu_182_p2;
wire    ap_CS_fsm_state21;
wire   [0:0] and_ln36_fu_193_p2;
wire   [31:0] grp_fu_77_p1;
reg   [1:0] grp_fu_60_opcode;
wire   [31:0] select_ln36_fu_197_p3;
reg   [31:0] ap_return_preg;
reg   [20:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_return_preg = 32'd0;
end

foc_frontend_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_60_p0),
    .din1(grp_fu_60_p1),
    .opcode(grp_fu_60_opcode),
    .ce(1'b1),
    .dout(grp_fu_60_p2)
);

foc_frontend_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_91),
    .din1(KP),
    .ce(1'b1),
    .dout(grp_fu_67_p2)
);

foc_frontend_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ierr_assign_reg_220),
    .din1(KI),
    .ce(1'b1),
    .dout(grp_fu_72_p2)
);

foc_frontend_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_77_p0),
    .ce(1'b1),
    .dout(grp_fu_77_p1)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_80_p0),
    .din1(grp_fu_80_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_80_p2)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_91),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_85_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_return_preg <= select_ln36_fu_197_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ierr_assign_reg_220 <= grp_fu_60_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul1_reg_240 <= grp_fu_72_p2;
        mul_reg_235 <= grp_fu_67_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        or_ln36_reg_250 <= or_ln36_fu_142_p2;
        tmp_51_reg_257 <= grp_fu_80_p2;
        tmp_52_reg_262 <= grp_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_91 <= grp_fu_60_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_s_reg_267 <= grp_fu_80_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_return = select_ln36_fu_197_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_60_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_60_opcode = 2'd0;
    end else begin
        grp_fu_60_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_60_p0 = mul_reg_235;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_60_p0 = reg_91;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_60_p0 = ref;
    end else begin
        grp_fu_60_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_60_p1 = mul1_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_60_p1 = ierr;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_60_p1 = val_r;
    end else begin
        grp_fu_60_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_80_p0 = bitcast_ln354_fu_111_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_80_p0 = reg_91;
    end else begin
        grp_fu_80_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_80_p1 = 32'd1191181824;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_80_p1 = 32'd0;
    end else begin
        grp_fu_80_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln12_15_fu_156_p2 = (tmp_52_reg_262 & or_ln36_reg_250);

assign and_ln12_fu_148_p2 = (tmp_51_reg_257 & or_ln36_reg_250);

assign and_ln36_fu_193_p2 = (tmp_s_reg_267 & or_ln36_reg_250);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln354_fu_111_p1 = zext_ln368_fu_107_p1;

assign data_V_fu_99_p1 = reg_91;

assign grp_fu_77_p0 = $signed(sub_ln37_fu_182_p2);

assign icmp_ln36_1_fu_136_p2 = ((trunc_ln36_fu_126_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_130_p2 = ((tmp_fu_116_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln36_fu_142_p2 = (icmp_ln36_fu_130_p2 | icmp_ln36_1_fu_136_p2);

assign p_Result_s_fu_103_p1 = data_V_fu_99_p1[30:0];

assign select_ln36_fu_197_p3 = ((and_ln36_fu_193_p2[0:0] == 1'b1) ? grp_fu_77_p1 : reg_91);

assign sext_ln37_fu_170_p1 = sub_ln12_fu_164_p2;

assign shl_ln_fu_174_p3 = {{sub_ln12_fu_164_p2}, {15'd0}};

assign sub_ln12_fu_164_p2 = (zext_ln12_fu_152_p1 - zext_ln12_15_fu_160_p1);

assign sub_ln37_fu_182_p2 = ($signed(shl_ln_fu_174_p3) - $signed(sext_ln37_fu_170_p1));

assign tmp_fu_116_p4 = {{data_V_fu_99_p1[30:23]}};

assign trunc_ln36_fu_126_p1 = data_V_fu_99_p1[22:0];

assign zext_ln12_15_fu_160_p1 = and_ln12_15_fu_156_p2;

assign zext_ln12_fu_152_p1 = and_ln12_fu_148_p2;

assign zext_ln368_fu_107_p1 = p_Result_s_fu_103_p1;

endmodule //foc_frontend_PI_control_float_s
