-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_torque_foc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (79 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (9 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (9 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_TVALID : OUT STD_LOGIC;
    C_TREADY : IN STD_LOGIC;
    C_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    control_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    control_ce0 : OUT STD_LOGIC;
    control_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    logger_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    logger_ce0 : OUT STD_LOGIC;
    logger_we0 : OUT STD_LOGIC;
    logger_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_i : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_o_ap_vld : OUT STD_LOGIC;
    buffer_velocity_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_velocity_ce0 : OUT STD_LOGIC;
    buffer_velocity_we0 : OUT STD_LOGIC;
    buffer_velocity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_velocity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_o_ap_vld : OUT STD_LOGIC;
    Y1b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y1b_prev_o_ap_vld : OUT STD_LOGIC;
    Y2a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y2a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y2a_prev_o_ap_vld : OUT STD_LOGIC;
    Y2b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y2b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y2b_prev_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of foc_frontend_torque_foc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C1A00000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001101000000000000000000000";
    constant ap_const_lv32_C0A00000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000101000000000000000000000";
    constant ap_const_lv32_C1200000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001001000000000000000000000";
    constant ap_const_lv32_BE19999A : STD_LOGIC_VECTOR (31 downto 0) := "10111110000110011001100110011010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_3E8 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111101000";
    constant ap_const_lv16_3E7 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111100111";
    constant ap_const_lv16_FC18 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000011000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ierr_torque_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ierr_flux_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_TDATA_blk_n : STD_LOGIC;
    signal B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal C_TDATA_blk_n : STD_LOGIC;
    signal Angle_reg_1378 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln290_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln281_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vel_corr_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ia_corr_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib_corr_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal vel_corr_2_reg_1434 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ia_corr_1_reg_1439 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib_corr_1_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_14_fu_742_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_14_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Theta_fu_931_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_reg_1461 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln255_fu_939_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln255_reg_1466 : STD_LOGIC_VECTOR (9 downto 0);
    signal Ialpha_reg_1472 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ibeta_reg_1477 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1488 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_974_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_27_reg_1494 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal result_V_13_fu_1110_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_13_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln59_fu_1221_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln59_reg_1509 : STD_LOGIC_VECTOR (15 downto 0);
    signal Id_reg_1514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal Iq_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln329_fu_1241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln329_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln287_fu_1247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal bitcast_ln329_fu_1255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln329_reg_1537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PI_control_float_s_fu_467_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal Vq_reg_1548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_PI_control_float_s_fu_478_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal Vd_reg_1554 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vd_decoupled_reg_1559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal Vq_decoupled_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal Valpha_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal Vbeta_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal Va_reg_1583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal Vb_reg_1589 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vc_reg_1595 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_ap_start : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_ap_done : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_ap_idle : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_ap_ready : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_velocity_accum_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_velocity_accum_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_buffer_velocity_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_buffer_velocity_ce0 : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_buffer_velocity_we0 : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_buffer_velocity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_Y1a_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_Y1a_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_Y1b_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_Y1b_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_Y2a_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_Y2a_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_Y2b_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_Y2b_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_431_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_direct_float_s_fu_450_ap_start : STD_LOGIC;
    signal grp_clarke_direct_float_s_fu_450_ap_done : STD_LOGIC;
    signal grp_clarke_direct_float_s_fu_450_ap_idle : STD_LOGIC;
    signal grp_clarke_direct_float_s_fu_450_ap_ready : STD_LOGIC;
    signal grp_clarke_direct_float_s_fu_450_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_direct_float_s_fu_450_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_park_direct_float_s_fu_456_ap_start : STD_LOGIC;
    signal grp_park_direct_float_s_fu_456_ap_done : STD_LOGIC;
    signal grp_park_direct_float_s_fu_456_ap_idle : STD_LOGIC;
    signal grp_park_direct_float_s_fu_456_ap_ready : STD_LOGIC;
    signal grp_park_direct_float_s_fu_456_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_park_direct_float_s_fu_456_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PI_control_float_s_fu_467_ap_start : STD_LOGIC;
    signal grp_PI_control_float_s_fu_467_ap_done : STD_LOGIC;
    signal grp_PI_control_float_s_fu_467_ap_idle : STD_LOGIC;
    signal grp_PI_control_float_s_fu_467_ap_ready : STD_LOGIC;
    signal grp_PI_control_float_s_fu_478_ap_start : STD_LOGIC;
    signal grp_PI_control_float_s_fu_478_ap_done : STD_LOGIC;
    signal grp_PI_control_float_s_fu_478_ap_idle : STD_LOGIC;
    signal grp_PI_control_float_s_fu_478_ap_ready : STD_LOGIC;
    signal grp_decoupling_float_s_fu_490_ap_start : STD_LOGIC;
    signal grp_decoupling_float_s_fu_490_ap_done : STD_LOGIC;
    signal grp_decoupling_float_s_fu_490_ap_idle : STD_LOGIC;
    signal grp_decoupling_float_s_fu_490_ap_ready : STD_LOGIC;
    signal grp_decoupling_float_s_fu_490_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decoupling_float_s_fu_490_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_park_inverse_float_s_fu_499_ap_start : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_499_ap_done : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_499_ap_idle : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_499_ap_ready : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_499_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_park_inverse_float_s_fu_499_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_inverse_float_s_fu_510_ap_start : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_510_ap_done : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_510_ap_idle : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_510_ap_ready : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_510_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_inverse_float_s_fu_510_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_inverse_float_s_fu_510_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SVPWM_float_s_fu_516_ap_start : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_516_ap_done : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_516_ap_idle : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_516_ap_ready : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_516_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SVPWM_float_s_fu_516_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SVPWM_float_s_fu_516_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_low_pass_filter_float_s_fu_431_ap_start_reg : STD_LOGIC := '0';
    signal grp_clarke_direct_float_s_fu_450_ap_start_reg : STD_LOGIC := '0';
    signal grp_park_direct_float_s_fu_456_ap_start_reg : STD_LOGIC := '0';
    signal grp_PI_control_float_s_fu_467_ap_start_reg : STD_LOGIC := '0';
    signal grp_PI_control_float_s_fu_478_ap_start_reg : STD_LOGIC := '0';
    signal grp_decoupling_float_s_fu_490_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_park_inverse_float_s_fu_499_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_clarke_inverse_float_s_fu_510_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_SVPWM_float_s_fu_516_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state22 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal data_V_3_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln293_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln294_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_2_fu_951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_978_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln307_fu_1236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln308_fu_1251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal bitcast_ln335_fu_1269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln336_fu_1274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln287_fu_1278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln342_fu_1291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln343_fu_1295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln349_fu_1307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln350_fu_1311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln356_fu_1327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln357_fu_1331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln358_fu_1374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_527_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_530_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal RPM_fu_554_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ia_fu_540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ib_fu_544_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_632_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_3_fu_636_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_28_fu_622_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_3_fu_650_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_3_fu_654_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_3_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_3_fu_674_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_678_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_3_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_646_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_3_fu_690_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_6_fu_694_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_21_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_7_fu_700_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_3_fu_714_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_718_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_3_fu_728_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_12_fu_736_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_fu_758_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_779_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_783_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_22_fu_769_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_fu_797_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_fu_801_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_fu_815_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_fu_821_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_825_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_fu_833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_793_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_fu_837_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_841_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_847_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_fu_861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_865_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_fu_875_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_883_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_889_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_897_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln283_fu_905_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_2_fu_911_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln284_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln284_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_1000_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_1004_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_24_fu_990_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_1_fu_1018_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_1_fu_1022_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_1_fu_1036_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_1028_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_1_fu_1042_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_1046_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_1_fu_1054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1014_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_1_fu_1058_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_2_fu_1062_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_9_fu_1074_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1068_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_1_fu_1082_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_1086_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_1_fu_1096_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_982_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_5_fu_1104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mantissa_2_fu_1118_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln344_2_fu_1131_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_2_fu_1134_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_2_fu_1148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_2_fu_1153_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_1157_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_2_fu_1165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_1127_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_2_fu_1169_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_4_fu_1173_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_15_fu_1185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1179_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_2_fu_1193_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_1197_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_2_fu_1207_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_10_fu_1215_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal pwmStreamObj_data_V_fu_1347_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal logger_data_data_V_fu_1362_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_523_ce : STD_LOGIC;
    signal grp_fu_527_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_530_ce : STD_LOGIC;
    signal grp_fu_533_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_low_pass_filter_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        velocity : IN STD_LOGIC_VECTOR (31 downto 0);
        Ia : IN STD_LOGIC_VECTOR (31 downto 0);
        Ib : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_accum_i : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_accum_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        velocity_accum_o_ap_vld : OUT STD_LOGIC;
        buffer_velocity_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_velocity_ce0 : OUT STD_LOGIC;
        buffer_velocity_we0 : OUT STD_LOGIC;
        buffer_velocity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_velocity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y1a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y1a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y1a_prev_o_ap_vld : OUT STD_LOGIC;
        Y1b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y1b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y1b_prev_o_ap_vld : OUT STD_LOGIC;
        Y2a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y2a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y2a_prev_o_ap_vld : OUT STD_LOGIC;
        Y2b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y2b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y2b_prev_o_ap_vld : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_clarke_direct_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Ia : IN STD_LOGIC_VECTOR (31 downto 0);
        Ib : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_park_direct_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Ialpha : IN STD_LOGIC_VECTOR (31 downto 0);
        Ibeta : IN STD_LOGIC_VECTOR (31 downto 0);
        angle : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_PI_control_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ref : IN STD_LOGIC_VECTOR (31 downto 0);
        val_r : IN STD_LOGIC_VECTOR (31 downto 0);
        KP : IN STD_LOGIC_VECTOR (31 downto 0);
        KI : IN STD_LOGIC_VECTOR (31 downto 0);
        ierr : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_decoupling_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Id : IN STD_LOGIC_VECTOR (31 downto 0);
        Iq : IN STD_LOGIC_VECTOR (31 downto 0);
        Vd : IN STD_LOGIC_VECTOR (31 downto 0);
        Vq : IN STD_LOGIC_VECTOR (31 downto 0);
        RPM : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_park_inverse_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Vd : IN STD_LOGIC_VECTOR (31 downto 0);
        Vq : IN STD_LOGIC_VECTOR (31 downto 0);
        angle : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_clarke_inverse_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Valpha : IN STD_LOGIC_VECTOR (31 downto 0);
        Vbeta : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_SVPWM_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Va : IN STD_LOGIC_VECTOR (31 downto 0);
        Vb : IN STD_LOGIC_VECTOR (31 downto 0);
        Vc : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component foc_frontend_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_low_pass_filter_float_s_fu_431 : component foc_frontend_low_pass_filter_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_low_pass_filter_float_s_fu_431_ap_start,
        ap_done => grp_low_pass_filter_float_s_fu_431_ap_done,
        ap_idle => grp_low_pass_filter_float_s_fu_431_ap_idle,
        ap_ready => grp_low_pass_filter_float_s_fu_431_ap_ready,
        velocity => vel_corr_reg_1403,
        Ia => Ia_corr_reg_1409,
        Ib => Ib_corr_reg_1414,
        velocity_accum_i => velocity_accum_i,
        velocity_accum_o => grp_low_pass_filter_float_s_fu_431_velocity_accum_o,
        velocity_accum_o_ap_vld => grp_low_pass_filter_float_s_fu_431_velocity_accum_o_ap_vld,
        buffer_velocity_address0 => grp_low_pass_filter_float_s_fu_431_buffer_velocity_address0,
        buffer_velocity_ce0 => grp_low_pass_filter_float_s_fu_431_buffer_velocity_ce0,
        buffer_velocity_we0 => grp_low_pass_filter_float_s_fu_431_buffer_velocity_we0,
        buffer_velocity_d0 => grp_low_pass_filter_float_s_fu_431_buffer_velocity_d0,
        buffer_velocity_q0 => buffer_velocity_q0,
        Y1a_prev_i => Y1a_prev_i,
        Y1a_prev_o => grp_low_pass_filter_float_s_fu_431_Y1a_prev_o,
        Y1a_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_431_Y1a_prev_o_ap_vld,
        Y1b_prev_i => Y1b_prev_i,
        Y1b_prev_o => grp_low_pass_filter_float_s_fu_431_Y1b_prev_o,
        Y1b_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_431_Y1b_prev_o_ap_vld,
        Y2a_prev_i => Y2a_prev_i,
        Y2a_prev_o => grp_low_pass_filter_float_s_fu_431_Y2a_prev_o,
        Y2a_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_431_Y2a_prev_o_ap_vld,
        Y2b_prev_i => Y2b_prev_i,
        Y2b_prev_o => grp_low_pass_filter_float_s_fu_431_Y2b_prev_o,
        Y2b_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_431_Y2b_prev_o_ap_vld,
        ap_return_0 => grp_low_pass_filter_float_s_fu_431_ap_return_0,
        ap_return_1 => grp_low_pass_filter_float_s_fu_431_ap_return_1,
        ap_return_2 => grp_low_pass_filter_float_s_fu_431_ap_return_2);

    grp_clarke_direct_float_s_fu_450 : component foc_frontend_clarke_direct_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_clarke_direct_float_s_fu_450_ap_start,
        ap_done => grp_clarke_direct_float_s_fu_450_ap_done,
        ap_idle => grp_clarke_direct_float_s_fu_450_ap_idle,
        ap_ready => grp_clarke_direct_float_s_fu_450_ap_ready,
        Ia => Ia_corr_1_reg_1439,
        Ib => Ib_corr_1_reg_1445,
        ap_return_0 => grp_clarke_direct_float_s_fu_450_ap_return_0,
        ap_return_1 => grp_clarke_direct_float_s_fu_450_ap_return_1);

    grp_park_direct_float_s_fu_456 : component foc_frontend_park_direct_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_park_direct_float_s_fu_456_ap_start,
        ap_done => grp_park_direct_float_s_fu_456_ap_done,
        ap_idle => grp_park_direct_float_s_fu_456_ap_idle,
        ap_ready => grp_park_direct_float_s_fu_456_ap_ready,
        Ialpha => Ialpha_reg_1472,
        Ibeta => Ibeta_reg_1477,
        angle => trunc_ln255_reg_1466,
        ap_return_0 => grp_park_direct_float_s_fu_456_ap_return_0,
        ap_return_1 => grp_park_direct_float_s_fu_456_ap_return_1);

    grp_PI_control_float_s_fu_467 : component foc_frontend_PI_control_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PI_control_float_s_fu_467_ap_start,
        ap_done => grp_PI_control_float_s_fu_467_ap_done,
        ap_idle => grp_PI_control_float_s_fu_467_ap_idle,
        ap_ready => grp_PI_control_float_s_fu_467_ap_ready,
        ref => bitcast_ln329_reg_1537,
        val_r => Iq_reg_1520,
        KP => ap_const_lv32_C1A00000,
        KI => ap_const_lv32_C0A00000,
        ierr => ierr_torque_s,
        ap_return => grp_PI_control_float_s_fu_467_ap_return);

    grp_PI_control_float_s_fu_478 : component foc_frontend_PI_control_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PI_control_float_s_fu_478_ap_start,
        ap_done => grp_PI_control_float_s_fu_478_ap_done,
        ap_idle => grp_PI_control_float_s_fu_478_ap_idle,
        ap_ready => grp_PI_control_float_s_fu_478_ap_ready,
        ref => ap_const_lv32_0,
        val_r => Id_reg_1514,
        KP => ap_const_lv32_C1200000,
        KI => ap_const_lv32_BE19999A,
        ierr => ierr_flux_s,
        ap_return => grp_PI_control_float_s_fu_478_ap_return);

    grp_decoupling_float_s_fu_490 : component foc_frontend_decoupling_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decoupling_float_s_fu_490_ap_start,
        ap_done => grp_decoupling_float_s_fu_490_ap_done,
        ap_idle => grp_decoupling_float_s_fu_490_ap_idle,
        ap_ready => grp_decoupling_float_s_fu_490_ap_ready,
        Id => Id_reg_1514,
        Iq => Iq_reg_1520,
        Vd => Vd_reg_1554,
        Vq => Vq_reg_1548,
        RPM => vel_corr_reg_1403,
        ap_return_0 => grp_decoupling_float_s_fu_490_ap_return_0,
        ap_return_1 => grp_decoupling_float_s_fu_490_ap_return_1);

    grp_park_inverse_float_s_fu_499 : component foc_frontend_park_inverse_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_park_inverse_float_s_fu_499_ap_start,
        ap_done => grp_park_inverse_float_s_fu_499_ap_done,
        ap_idle => grp_park_inverse_float_s_fu_499_ap_idle,
        ap_ready => grp_park_inverse_float_s_fu_499_ap_ready,
        Vd => Vd_decoupled_reg_1559,
        Vq => Vq_decoupled_reg_1565,
        angle => trunc_ln255_reg_1466,
        ap_return_0 => grp_park_inverse_float_s_fu_499_ap_return_0,
        ap_return_1 => grp_park_inverse_float_s_fu_499_ap_return_1);

    grp_clarke_inverse_float_s_fu_510 : component foc_frontend_clarke_inverse_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_clarke_inverse_float_s_fu_510_ap_start,
        ap_done => grp_clarke_inverse_float_s_fu_510_ap_done,
        ap_idle => grp_clarke_inverse_float_s_fu_510_ap_idle,
        ap_ready => grp_clarke_inverse_float_s_fu_510_ap_ready,
        Valpha => Valpha_reg_1571,
        Vbeta => Vbeta_reg_1577,
        ap_return_0 => grp_clarke_inverse_float_s_fu_510_ap_return_0,
        ap_return_1 => grp_clarke_inverse_float_s_fu_510_ap_return_1,
        ap_return_2 => grp_clarke_inverse_float_s_fu_510_ap_return_2);

    grp_SVPWM_float_s_fu_516 : component foc_frontend_SVPWM_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SVPWM_float_s_fu_516_ap_start,
        ap_done => grp_SVPWM_float_s_fu_516_ap_done,
        ap_idle => grp_SVPWM_float_s_fu_516_ap_idle,
        ap_ready => grp_SVPWM_float_s_fu_516_ap_ready,
        Va => Va_reg_1583,
        Vb => Vb_reg_1589,
        Vc => Vc_reg_1595,
        ap_return_0 => grp_SVPWM_float_s_fu_516_ap_return_0,
        ap_return_1 => grp_SVPWM_float_s_fu_516_ap_return_1,
        ap_return_2 => grp_SVPWM_float_s_fu_516_ap_return_2);

    fsub_32ns_32ns_32_4_full_dsp_1_U106 : component foc_frontend_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_1419,
        din1 => grp_fu_523_p1,
        ce => grp_fu_523_ce,
        dout => grp_fu_523_p2);

    sitofp_32s_32_4_no_dsp_1_U107 : component foc_frontend_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_527_p0,
        ce => grp_fu_527_ce,
        dout => grp_fu_527_p1);

    sitofp_32s_32_4_no_dsp_1_U108 : component foc_frontend_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_530_p0,
        ce => grp_fu_530_ce,
        dout => grp_fu_530_p1);

    sitofp_32s_32_4_no_dsp_1_U109 : component foc_frontend_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_533_p0,
        ce => grp_fu_533_ce,
        dout => grp_fu_533_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_PI_control_float_s_fu_467_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PI_control_float_s_fu_467_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_PI_control_float_s_fu_467_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PI_control_float_s_fu_467_ap_ready = ap_const_logic_1)) then 
                    grp_PI_control_float_s_fu_467_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_PI_control_float_s_fu_478_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PI_control_float_s_fu_478_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_PI_control_float_s_fu_478_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PI_control_float_s_fu_478_ap_ready = ap_const_logic_1)) then 
                    grp_PI_control_float_s_fu_478_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SVPWM_float_s_fu_516_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SVPWM_float_s_fu_516_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_SVPWM_float_s_fu_516_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SVPWM_float_s_fu_516_ap_ready = ap_const_logic_1)) then 
                    grp_SVPWM_float_s_fu_516_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_clarke_direct_float_s_fu_450_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_clarke_direct_float_s_fu_450_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_clarke_direct_float_s_fu_450_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_clarke_direct_float_s_fu_450_ap_ready = ap_const_logic_1)) then 
                    grp_clarke_direct_float_s_fu_450_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_clarke_inverse_float_s_fu_510_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_clarke_inverse_float_s_fu_510_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_clarke_inverse_float_s_fu_510_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_clarke_inverse_float_s_fu_510_ap_ready = ap_const_logic_1)) then 
                    grp_clarke_inverse_float_s_fu_510_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_decoupling_float_s_fu_490_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decoupling_float_s_fu_490_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_decoupling_float_s_fu_490_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoupling_float_s_fu_490_ap_ready = ap_const_logic_1)) then 
                    grp_decoupling_float_s_fu_490_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_low_pass_filter_float_s_fu_431_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_low_pass_filter_float_s_fu_431_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_low_pass_filter_float_s_fu_431_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_low_pass_filter_float_s_fu_431_ap_ready = ap_const_logic_1)) then 
                    grp_low_pass_filter_float_s_fu_431_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_park_direct_float_s_fu_456_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_park_direct_float_s_fu_456_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_park_direct_float_s_fu_456_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_park_direct_float_s_fu_456_ap_ready = ap_const_logic_1)) then 
                    grp_park_direct_float_s_fu_456_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_park_inverse_float_s_fu_499_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_park_inverse_float_s_fu_499_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_park_inverse_float_s_fu_499_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_park_inverse_float_s_fu_499_ap_ready = ap_const_logic_1)) then 
                    grp_park_inverse_float_s_fu_499_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ierr_flux_s_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ierr_torque_s_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Angle_reg_1378 <= A_TDATA(79 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Ia_corr_1_reg_1439 <= grp_low_pass_filter_float_s_fu_431_ap_return_1;
                Ib_corr_1_reg_1445 <= grp_low_pass_filter_float_s_fu_431_ap_return_2;
                vel_corr_2_reg_1434 <= grp_low_pass_filter_float_s_fu_431_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Ia_corr_reg_1409 <= grp_fu_530_p1;
                Ib_corr_reg_1414 <= grp_fu_533_p1;
                vel_corr_reg_1403 <= grp_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Ialpha_reg_1472 <= grp_clarke_direct_float_s_fu_450_ap_return_0;
                Ibeta_reg_1477 <= grp_clarke_direct_float_s_fu_450_ap_return_1;
                Theta_reg_1461 <= Theta_fu_931_p3;
                p_Result_2_reg_1483 <= data_V_2_fu_951_p1(31 downto 31);
                tmp_26_reg_1488 <= data_V_2_fu_951_p1(30 downto 23);
                tmp_27_reg_1494 <= tmp_27_fu_974_p1;
                trunc_ln255_reg_1466 <= trunc_ln255_fu_939_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Id_reg_1514 <= grp_park_direct_float_s_fu_456_ap_return_0;
                Iq_reg_1520 <= grp_park_direct_float_s_fu_456_ap_return_1;
                xor_ln329_reg_1527 <= xor_ln329_fu_1241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                Va_reg_1583 <= grp_clarke_inverse_float_s_fu_510_ap_return_0;
                Vb_reg_1589 <= grp_clarke_inverse_float_s_fu_510_ap_return_1;
                Vc_reg_1595 <= grp_clarke_inverse_float_s_fu_510_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                Valpha_reg_1571 <= grp_park_inverse_float_s_fu_499_ap_return_0;
                Vbeta_reg_1577 <= grp_park_inverse_float_s_fu_499_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                Vd_decoupled_reg_1559 <= grp_decoupling_float_s_fu_490_ap_return_0;
                Vq_decoupled_reg_1565 <= grp_decoupling_float_s_fu_490_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                Vd_reg_1554 <= grp_PI_control_float_s_fu_478_ap_return;
                Vq_reg_1548 <= grp_PI_control_float_s_fu_467_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                bitcast_ln329_reg_1537 <= bitcast_ln329_fu_1255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                conv_reg_1419 <= grp_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                dc_reg_1456 <= grp_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                result_V_13_reg_1504 <= result_V_13_fu_1110_p3;
                select_ln59_reg_1509 <= select_ln59_fu_1221_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                result_V_14_reg_1451 <= result_V_14_fu_742_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, A_TVALID, B_TREADY, C_TREADY, ap_CS_fsm_state22, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, grp_low_pass_filter_float_s_fu_431_ap_done, grp_clarke_direct_float_s_fu_450_ap_done, grp_park_direct_float_s_fu_456_ap_done, grp_decoupling_float_s_fu_490_ap_done, grp_park_inverse_float_s_fu_499_ap_done, grp_clarke_inverse_float_s_fu_510_ap_done, grp_SVPWM_float_s_fu_516_ap_done, ap_block_state22_io, ap_block_state14_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_low_pass_filter_float_s_fu_431_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_clarke_direct_float_s_fu_450_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_park_direct_float_s_fu_456_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_decoupling_float_s_fu_490_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_park_inverse_float_s_fu_499_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_clarke_inverse_float_s_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if ((not(((grp_SVPWM_float_s_fu_516_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state22_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_TDATA_blk_n <= A_TVALID;
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID)
    begin
        if ((not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    B_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pwmStreamObj_data_V_fu_1347_p4),64));

    B_TDATA_blk_n_assign_proc : process(B_TREADY, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            B_TDATA_blk_n <= B_TREADY;
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TKEEP <= ap_const_lv8_0;
    B_TLAST <= ap_const_lv1_0;
    B_TSTRB <= ap_const_lv8_0;

    B_TVALID_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state22, grp_SVPWM_float_s_fu_516_ap_done, ap_block_state22_io)
    begin
        if ((not(((grp_SVPWM_float_s_fu_516_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state22_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    C_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(logger_data_data_V_fu_1362_p4),64));

    C_TDATA_blk_n_assign_proc : process(C_TREADY, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            C_TDATA_blk_n <= C_TREADY;
        else 
            C_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_TKEEP <= ap_const_lv8_0;
    C_TLAST <= ap_const_lv1_0;
    C_TSTRB <= ap_const_lv8_0;

    C_TVALID_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state22, grp_SVPWM_float_s_fu_516_ap_done, ap_block_state22_io)
    begin
        if ((not(((grp_SVPWM_float_s_fu_516_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state22_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            C_TVALID <= ap_const_logic_1;
        else 
            C_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    Ia_fu_540_p1 <= A_TDATA(16 - 1 downto 0);
    Ib_fu_544_p4 <= A_TDATA(31 downto 16);
    RPM_fu_554_p4 <= A_TDATA(63 downto 48);
    Theta_2_fu_911_p3 <= 
        add_ln283_fu_905_p2 when (tmp_3_fu_897_p3(0) = '1') else 
        result_V_fu_889_p3;
    Theta_fu_931_p3 <= 
        add_ln284_fu_925_p2 when (icmp_ln284_fu_919_p2(0) = '1') else 
        Theta_2_fu_911_p3;

    Y1a_prev_o_assign_proc : process(Y1a_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_431_Y1a_prev_o, grp_low_pass_filter_float_s_fu_431_Y1a_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_431_Y1a_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y1a_prev_o <= grp_low_pass_filter_float_s_fu_431_Y1a_prev_o;
        else 
            Y1a_prev_o <= Y1a_prev_i;
        end if; 
    end process;

    Y1a_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_431_Y1a_prev_o_ap_vld;

    Y1b_prev_o_assign_proc : process(Y1b_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_431_Y1b_prev_o, grp_low_pass_filter_float_s_fu_431_Y1b_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_431_Y1b_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y1b_prev_o <= grp_low_pass_filter_float_s_fu_431_Y1b_prev_o;
        else 
            Y1b_prev_o <= Y1b_prev_i;
        end if; 
    end process;

    Y1b_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_431_Y1b_prev_o_ap_vld;

    Y2a_prev_o_assign_proc : process(Y2a_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_431_Y2a_prev_o, grp_low_pass_filter_float_s_fu_431_Y2a_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_431_Y2a_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y2a_prev_o <= grp_low_pass_filter_float_s_fu_431_Y2a_prev_o;
        else 
            Y2a_prev_o <= Y2a_prev_i;
        end if; 
    end process;

    Y2a_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_431_Y2a_prev_o_ap_vld;

    Y2b_prev_o_assign_proc : process(Y2b_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_431_Y2b_prev_o, grp_low_pass_filter_float_s_fu_431_Y2b_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_431_Y2b_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y2b_prev_o <= grp_low_pass_filter_float_s_fu_431_Y2b_prev_o;
        else 
            Y2b_prev_o <= Y2b_prev_i;
        end if; 
    end process;

    Y2b_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_431_Y2b_prev_o_ap_vld;
    add_ln283_fu_905_p2 <= std_logic_vector(unsigned(result_V_fu_889_p3) + unsigned(ap_const_lv16_3E8));
    add_ln284_fu_925_p2 <= std_logic_vector(unsigned(Theta_2_fu_911_p3) + unsigned(ap_const_lv16_FC18));
    add_ln344_1_fu_1022_p2 <= std_logic_vector(unsigned(zext_ln344_1_fu_1018_p1) + unsigned(ap_const_lv9_181));
    add_ln344_2_fu_1134_p2 <= std_logic_vector(unsigned(zext_ln344_2_fu_1131_p1) + unsigned(ap_const_lv9_181));
    add_ln344_3_fu_654_p2 <= std_logic_vector(unsigned(zext_ln344_3_fu_650_p1) + unsigned(ap_const_lv9_181));
    add_ln344_fu_801_p2 <= std_logic_vector(unsigned(zext_ln344_fu_797_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_clarke_direct_float_s_fu_450_ap_done)
    begin
        if ((grp_clarke_direct_float_s_fu_450_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_park_direct_float_s_fu_456_ap_done)
    begin
        if ((grp_park_direct_float_s_fu_456_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_decoupling_float_s_fu_490_ap_done)
    begin
        if ((grp_decoupling_float_s_fu_490_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_park_inverse_float_s_fu_499_ap_done)
    begin
        if ((grp_park_inverse_float_s_fu_499_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, A_TVALID)
    begin
        if (((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(grp_clarke_inverse_float_s_fu_510_ap_done)
    begin
        if ((grp_clarke_inverse_float_s_fu_510_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(B_TREADY, C_TREADY, grp_SVPWM_float_s_fu_516_ap_done, ap_block_state22_io)
    begin
        if (((grp_SVPWM_float_s_fu_516_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state22_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_low_pass_filter_float_s_fu_431_ap_done)
    begin
        if ((grp_low_pass_filter_float_s_fu_431_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, A_TVALID)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(grp_PI_control_float_s_fu_467_ap_done, grp_PI_control_float_s_fu_478_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_PI_control_float_s_fu_478_ap_done = ap_const_logic_0) or (grp_PI_control_float_s_fu_467_ap_done = ap_const_logic_0));
    end process;


    ap_block_state22_assign_proc : process(B_TREADY, C_TREADY)
    begin
                ap_block_state22 <= ((ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY));
    end process;


    ap_block_state22_io_assign_proc : process(B_TREADY, C_TREADY)
    begin
                ap_block_state22_io <= ((ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln287_fu_1278_p1 <= grp_fu_527_p1;
    bitcast_ln293_fu_750_p1 <= Ia_corr_1_reg_1439;
    bitcast_ln294_fu_754_p1 <= Ib_corr_1_reg_1445;
    bitcast_ln307_fu_1236_p1 <= grp_park_direct_float_s_fu_456_ap_return_0;
    bitcast_ln308_fu_1251_p1 <= Iq_reg_1520;
    bitcast_ln329_fu_1255_p1 <= xor_ln329_reg_1527;
    bitcast_ln335_fu_1269_p1 <= grp_PI_control_float_s_fu_478_ap_return;
    bitcast_ln336_fu_1274_p1 <= Vq_reg_1548;
    bitcast_ln342_fu_1291_p1 <= Vd_decoupled_reg_1559;
    bitcast_ln343_fu_1295_p1 <= Vq_decoupled_reg_1565;
    bitcast_ln349_fu_1307_p1 <= Valpha_reg_1571;
    bitcast_ln350_fu_1311_p1 <= Vbeta_reg_1577;
    bitcast_ln356_fu_1327_p1 <= Va_reg_1583;
    bitcast_ln357_fu_1331_p1 <= Vb_reg_1589;
    bitcast_ln358_fu_1374_p1 <= Vc_reg_1595;
    buffer_velocity_address0 <= grp_low_pass_filter_float_s_fu_431_buffer_velocity_address0;
    buffer_velocity_ce0 <= grp_low_pass_filter_float_s_fu_431_buffer_velocity_ce0;
    buffer_velocity_d0 <= grp_low_pass_filter_float_s_fu_431_buffer_velocity_d0;
    buffer_velocity_we0 <= grp_low_pass_filter_float_s_fu_431_buffer_velocity_we0;

    control_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            control_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            control_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            control_address0 <= "XXX";
        end if; 
    end process;


    control_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            control_ce0 <= ap_const_logic_1;
        else 
            control_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_978_p1 <= Ibeta_reg_1477;
    data_V_2_fu_951_p1 <= grp_clarke_direct_float_s_fu_450_ap_return_0;
    data_V_3_fu_610_p1 <= vel_corr_2_reg_1434;
    data_V_fu_758_p1 <= dc_reg_1456;
    grp_PI_control_float_s_fu_467_ap_start <= grp_PI_control_float_s_fu_467_ap_start_reg;
    grp_PI_control_float_s_fu_478_ap_start <= grp_PI_control_float_s_fu_478_ap_start_reg;
    grp_SVPWM_float_s_fu_516_ap_start <= grp_SVPWM_float_s_fu_516_ap_start_reg;
    grp_clarke_direct_float_s_fu_450_ap_start <= grp_clarke_direct_float_s_fu_450_ap_start_reg;
    grp_clarke_inverse_float_s_fu_510_ap_start <= grp_clarke_inverse_float_s_fu_510_ap_start_reg;
    grp_decoupling_float_s_fu_490_ap_start <= grp_decoupling_float_s_fu_490_ap_start_reg;

    grp_fu_523_ce_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_low_pass_filter_float_s_fu_431_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((grp_low_pass_filter_float_s_fu_431_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_fu_523_ce <= ap_const_logic_1;
        else 
            grp_fu_523_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_523_p1 <= control_q0;

    grp_fu_527_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, grp_decoupling_float_s_fu_490_ap_done, ap_CS_fsm_state15, ap_block_state14_on_subcall_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((grp_decoupling_float_s_fu_490_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_527_ce <= ap_const_logic_1;
        else 
            grp_fu_527_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_527_p0_assign_proc : process(ap_CS_fsm_state1, sext_ln290_fu_574_p1, sext_ln281_fu_589_p1, ap_CS_fsm_state2, sext_ln287_fu_1247_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_527_p0 <= sext_ln287_fu_1247_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_527_p0 <= sext_ln281_fu_589_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_527_p0 <= sext_ln290_fu_574_p1;
        else 
            grp_fu_527_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_530_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_530_ce <= ap_const_logic_1;
        else 
            grp_fu_530_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_530_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ia_fu_540_p1),32));


    grp_fu_533_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_533_ce <= ap_const_logic_1;
        else 
            grp_fu_533_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_533_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ib_fu_544_p4),32));

    grp_low_pass_filter_float_s_fu_431_ap_start <= grp_low_pass_filter_float_s_fu_431_ap_start_reg;
    grp_park_direct_float_s_fu_456_ap_start <= grp_park_direct_float_s_fu_456_ap_start_reg;
    grp_park_inverse_float_s_fu_499_ap_start <= grp_park_inverse_float_s_fu_499_ap_start_reg;
    icmp_ln284_fu_919_p2 <= "1" when (signed(Theta_2_fu_911_p3) > signed(ap_const_lv16_3E7)) else "0";
    isNeg_1_fu_1028_p3 <= add_ln344_1_fu_1022_p2(8 downto 8);
    isNeg_2_fu_1140_p3 <= add_ln344_2_fu_1134_p2(8 downto 8);
    isNeg_3_fu_660_p3 <= add_ln344_3_fu_654_p2(8 downto 8);
    isNeg_fu_807_p3 <= add_ln344_fu_801_p2(8 downto 8);

    logger_address0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state8, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            logger_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            logger_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            logger_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            logger_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            logger_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            logger_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            logger_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            logger_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            logger_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            logger_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            logger_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            logger_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            logger_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            logger_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            logger_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            logger_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            logger_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            logger_address0 <= "XXXXX";
        end if; 
    end process;


    logger_ce0_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, grp_clarke_direct_float_s_fu_450_ap_done, grp_park_direct_float_s_fu_456_ap_done, grp_decoupling_float_s_fu_490_ap_done, grp_park_inverse_float_s_fu_499_ap_done, grp_clarke_inverse_float_s_fu_510_ap_done, grp_SVPWM_float_s_fu_516_ap_done, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_block_state22_io, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((grp_clarke_inverse_float_s_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_park_inverse_float_s_fu_499_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((grp_decoupling_float_s_fu_490_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_park_direct_float_s_fu_456_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((grp_clarke_direct_float_s_fu_450_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((grp_SVPWM_float_s_fu_516_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state22_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            logger_ce0 <= ap_const_logic_1;
        else 
            logger_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    logger_d0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state8, ap_CS_fsm_state23, data_V_3_fu_610_p1, bitcast_ln293_fu_750_p1, bitcast_ln294_fu_754_p1, data_V_2_fu_951_p1, data_V_1_fu_978_p1, bitcast_ln307_fu_1236_p1, bitcast_ln308_fu_1251_p1, bitcast_ln335_fu_1269_p1, bitcast_ln336_fu_1274_p1, bitcast_ln287_fu_1278_p1, bitcast_ln342_fu_1291_p1, bitcast_ln343_fu_1295_p1, bitcast_ln349_fu_1307_p1, bitcast_ln350_fu_1311_p1, bitcast_ln356_fu_1327_p1, bitcast_ln357_fu_1331_p1, bitcast_ln358_fu_1374_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            logger_d0 <= bitcast_ln358_fu_1374_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            logger_d0 <= bitcast_ln357_fu_1331_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            logger_d0 <= bitcast_ln356_fu_1327_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            logger_d0 <= bitcast_ln350_fu_1311_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            logger_d0 <= bitcast_ln349_fu_1307_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            logger_d0 <= bitcast_ln343_fu_1295_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            logger_d0 <= bitcast_ln342_fu_1291_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            logger_d0 <= bitcast_ln287_fu_1278_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            logger_d0 <= bitcast_ln336_fu_1274_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            logger_d0 <= bitcast_ln335_fu_1269_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            logger_d0 <= bitcast_ln308_fu_1251_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            logger_d0 <= bitcast_ln307_fu_1236_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            logger_d0 <= data_V_1_fu_978_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            logger_d0 <= data_V_2_fu_951_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            logger_d0 <= bitcast_ln294_fu_754_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            logger_d0 <= bitcast_ln293_fu_750_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            logger_d0 <= data_V_3_fu_610_p1;
        else 
            logger_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    logger_data_data_V_fu_1362_p4 <= ((result_V_13_reg_1504 & select_ln59_reg_1509) & result_V_14_reg_1451);

    logger_we0_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, grp_clarke_direct_float_s_fu_450_ap_done, grp_park_direct_float_s_fu_456_ap_done, grp_decoupling_float_s_fu_490_ap_done, grp_park_inverse_float_s_fu_499_ap_done, grp_clarke_inverse_float_s_fu_510_ap_done, grp_SVPWM_float_s_fu_516_ap_done, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state8, ap_CS_fsm_state23, ap_block_state22_io, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((grp_clarke_inverse_float_s_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((grp_park_inverse_float_s_fu_499_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((grp_decoupling_float_s_fu_490_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((grp_park_direct_float_s_fu_456_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((grp_clarke_direct_float_s_fu_450_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((grp_SVPWM_float_s_fu_516_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state22_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            logger_we0 <= ap_const_logic_1;
        else 
            logger_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_1_fu_1004_p4 <= ((ap_const_lv1_1 & tmp_25_fu_1000_p1) & ap_const_lv1_0);
    mantissa_2_fu_1118_p4 <= ((ap_const_lv1_1 & tmp_27_reg_1494) & ap_const_lv1_0);
    mantissa_3_fu_636_p4 <= ((ap_const_lv1_1 & tmp_29_fu_632_p1) & ap_const_lv1_0);
    mantissa_fu_783_p4 <= ((ap_const_lv1_1 & tmp_23_fu_779_p1) & ap_const_lv1_0);
    p_Result_1_fu_982_p3 <= data_V_1_fu_978_p1(31 downto 31);
    p_Result_3_fu_614_p3 <= data_V_3_fu_610_p1(31 downto 31);
    p_Result_s_fu_761_p3 <= data_V_fu_758_p1(31 downto 31);
    pwmStreamObj_data_V_fu_1347_p4 <= ((grp_SVPWM_float_s_fu_516_ap_return_2 & grp_SVPWM_float_s_fu_516_ap_return_1) & grp_SVPWM_float_s_fu_516_ap_return_0);
    r_V_1_fu_847_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_793_p1),to_integer(unsigned('0' & zext_ln1340_fu_837_p1(31-1 downto 0)))));
    r_V_2_fu_1062_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1014_p1),to_integer(unsigned('0' & zext_ln1340_1_fu_1058_p1(31-1 downto 0)))));
    r_V_3_fu_1068_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1014_p1),to_integer(unsigned('0' & zext_ln1340_1_fu_1058_p1(31-1 downto 0)))));
    r_V_4_fu_1173_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_1127_p1),to_integer(unsigned('0' & zext_ln1340_2_fu_1169_p1(31-1 downto 0)))));
    r_V_5_fu_1179_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_1127_p1),to_integer(unsigned('0' & zext_ln1340_2_fu_1169_p1(31-1 downto 0)))));
    r_V_6_fu_694_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_646_p1),to_integer(unsigned('0' & zext_ln1340_3_fu_690_p1(31-1 downto 0)))));
    r_V_7_fu_700_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_646_p1),to_integer(unsigned('0' & zext_ln1340_3_fu_690_p1(31-1 downto 0)))));
    r_V_fu_841_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_793_p1),to_integer(unsigned('0' & zext_ln1340_fu_837_p1(31-1 downto 0)))));
    result_V_10_fu_1215_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_2_fu_1207_p3));
    result_V_12_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_3_fu_728_p3));
    result_V_13_fu_1110_p3 <= 
        result_V_5_fu_1104_p2 when (p_Result_1_fu_982_p3(0) = '1') else 
        val_1_fu_1096_p3;
    result_V_14_fu_742_p3 <= 
        result_V_12_fu_736_p2 when (p_Result_3_fu_614_p3(0) = '1') else 
        val_3_fu_728_p3;
    result_V_2_fu_883_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_875_p3));
    result_V_5_fu_1104_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_1_fu_1096_p3));
    result_V_fu_889_p3 <= 
        result_V_2_fu_883_p2 when (p_Result_s_fu_761_p3(0) = '1') else 
        val_fu_875_p3;
    select_ln59_fu_1221_p3 <= 
        result_V_10_fu_1215_p2 when (p_Result_2_reg_1483(0) = '1') else 
        val_2_fu_1207_p3;
        sext_ln1340_1_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_1046_p3),32));

        sext_ln1340_2_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_1157_p3),32));

        sext_ln1340_3_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_678_p3),32));

        sext_ln1340_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_825_p3),32));

        sext_ln1364_1_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_1_fu_1036_p2),9));

        sext_ln1364_2_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_2_fu_1148_p2),9));

        sext_ln1364_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_3_fu_668_p2),9));

        sext_ln1364_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_fu_815_p2),9));

        sext_ln281_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Angle_reg_1378),32));

        sext_ln287_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Theta_reg_1461),32));

        sext_ln290_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(RPM_fu_554_p4),32));

    sub_ln1364_1_fu_1036_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_24_fu_990_p4));
    sub_ln1364_2_fu_1148_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_26_reg_1488));
    sub_ln1364_3_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_28_fu_622_p4));
    sub_ln1364_fu_815_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_22_fu_769_p4));
    tmp_10_fu_718_p4 <= r_V_7_fu_700_p2(39 downto 24);
    tmp_15_fu_1185_p3 <= r_V_4_fu_1173_p2(24 downto 24);
    tmp_21_fu_706_p3 <= r_V_6_fu_694_p2(24 downto 24);
    tmp_22_fu_769_p4 <= data_V_fu_758_p1(30 downto 23);
    tmp_23_fu_779_p1 <= data_V_fu_758_p1(23 - 1 downto 0);
    tmp_24_fu_990_p4 <= data_V_1_fu_978_p1(30 downto 23);
    tmp_25_fu_1000_p1 <= data_V_1_fu_978_p1(23 - 1 downto 0);
    tmp_27_fu_974_p1 <= data_V_2_fu_951_p1(23 - 1 downto 0);
    tmp_28_fu_622_p4 <= data_V_3_fu_610_p1(30 downto 23);
    tmp_29_fu_632_p1 <= data_V_3_fu_610_p1(23 - 1 downto 0);
    tmp_2_fu_865_p4 <= r_V_1_fu_847_p2(39 downto 24);
    tmp_3_fu_897_p3 <= result_V_fu_889_p3(15 downto 15);
    tmp_6_fu_1197_p4 <= r_V_5_fu_1179_p2(39 downto 24);
    tmp_7_fu_1086_p4 <= r_V_3_fu_1068_p2(39 downto 24);
    tmp_9_fu_1074_p3 <= r_V_2_fu_1062_p2(24 downto 24);
    tmp_fu_853_p3 <= r_V_fu_841_p2(24 downto 24);
    trunc_ln255_fu_939_p1 <= Theta_fu_931_p3(10 - 1 downto 0);
    ush_1_fu_1046_p3 <= 
        sext_ln1364_1_fu_1042_p1 when (isNeg_1_fu_1028_p3(0) = '1') else 
        add_ln344_1_fu_1022_p2;
    ush_2_fu_1157_p3 <= 
        sext_ln1364_2_fu_1153_p1 when (isNeg_2_fu_1140_p3(0) = '1') else 
        add_ln344_2_fu_1134_p2;
    ush_3_fu_678_p3 <= 
        sext_ln1364_3_fu_674_p1 when (isNeg_3_fu_660_p3(0) = '1') else 
        add_ln344_3_fu_654_p2;
    ush_fu_825_p3 <= 
        sext_ln1364_fu_821_p1 when (isNeg_fu_807_p3(0) = '1') else 
        add_ln344_fu_801_p2;
    val_1_fu_1096_p3 <= 
        zext_ln671_1_fu_1082_p1 when (isNeg_1_fu_1028_p3(0) = '1') else 
        tmp_7_fu_1086_p4;
    val_2_fu_1207_p3 <= 
        zext_ln671_2_fu_1193_p1 when (isNeg_2_fu_1140_p3(0) = '1') else 
        tmp_6_fu_1197_p4;
    val_3_fu_728_p3 <= 
        zext_ln671_3_fu_714_p1 when (isNeg_3_fu_660_p3(0) = '1') else 
        tmp_10_fu_718_p4;
    val_fu_875_p3 <= 
        zext_ln671_fu_861_p1 when (isNeg_fu_807_p3(0) = '1') else 
        tmp_2_fu_865_p4;

    velocity_accum_o_assign_proc : process(velocity_accum_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_431_velocity_accum_o, grp_low_pass_filter_float_s_fu_431_velocity_accum_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_431_velocity_accum_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            velocity_accum_o <= grp_low_pass_filter_float_s_fu_431_velocity_accum_o;
        else 
            velocity_accum_o <= velocity_accum_i;
        end if; 
    end process;

    velocity_accum_o_ap_vld <= grp_low_pass_filter_float_s_fu_431_velocity_accum_o_ap_vld;
    xor_ln329_fu_1241_p2 <= (control_q0 xor ap_const_lv32_80000000);
    zext_ln1340_1_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_1_fu_1054_p1),63));
    zext_ln1340_2_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_2_fu_1165_p1),63));
    zext_ln1340_3_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_3_fu_686_p1),63));
    zext_ln1340_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_fu_833_p1),63));
    zext_ln15_1_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_1004_p4),63));
    zext_ln15_2_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_1118_p4),63));
    zext_ln15_3_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_636_p4),63));
    zext_ln15_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_783_p4),63));
    zext_ln344_1_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_990_p4),9));
    zext_ln344_2_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_1488),9));
    zext_ln344_3_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_622_p4),9));
    zext_ln344_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_769_p4),9));
    zext_ln671_1_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1074_p3),16));
    zext_ln671_2_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1185_p3),16));
    zext_ln671_3_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_706_p3),16));
    zext_ln671_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_853_p3),16));
end behav;
