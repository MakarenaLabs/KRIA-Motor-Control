-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_SVPWM_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Va : IN STD_LOGIC_VECTOR (31 downto 0);
    Vb : IN STD_LOGIC_VECTOR (31 downto 0);
    Vc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of foc_frontend_SVPWM_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal min_fu_174_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_fu_263_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_1_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal offset_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_68_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_72_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_12_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_13_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_85_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln14_1_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_95_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_fu_105_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln14_1_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_112_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_1_fu_122_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln14_3_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_1_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_1_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln15_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln15_1_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_184_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_fu_194_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln15_1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_201_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_1_fu_211_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln15_3_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_2_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal data_V_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_290_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_294_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_88_fu_280_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_fu_308_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_fu_312_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_fu_326_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_fu_332_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_336_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_304_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_fu_348_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_352_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_19_fu_358_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_376_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_fu_386_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_41_fu_394_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_13_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_429_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_8_fu_433_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_90_fu_419_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_8_fu_447_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_8_fu_451_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_7_fu_465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_8_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_8_fu_471_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_8_fu_475_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_8_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_8_fu_443_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_8_fu_487_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_20_fu_491_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_82_fu_503_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_21_fu_497_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_8_fu_511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_515_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_8_fu_525_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_14_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_44_fu_533_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_14_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_568_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_9_fu_572_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_92_fu_558_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_9_fu_586_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_9_fu_590_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_8_fu_604_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_9_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_9_fu_610_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_9_fu_614_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_9_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_9_fu_582_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_9_fu_626_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_22_fu_630_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_87_fu_642_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_23_fu_636_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_9_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_654_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_9_fu_664_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_fu_550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_47_fu_672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_400_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_48_fu_539_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_49_fu_678_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U98 : component foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => offset_reg_740,
        din1 => Va,
        ce => ap_const_logic_1,
        dout => grp_fu_68_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U99 : component foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => offset_reg_740,
        din1 => Vb,
        ce => ap_const_logic_1,
        dout => grp_fu_72_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U100 : component foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => offset_reg_740,
        din1 => Vc,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U101 : component foc_frontend_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => min_1_reg_735,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U102 : component foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_85_p0,
        din1 => grp_fu_85_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_85_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                dc_12_reg_752 <= grp_fu_72_p2;
                dc_13_reg_757 <= grp_fu_76_p2;
                dc_reg_747 <= grp_fu_68_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                min_1_reg_735 <= min_1_fu_263_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                min_reg_728 <= min_fu_174_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                offset_reg_740 <= grp_fu_80_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln344_8_fu_451_p2 <= std_logic_vector(unsigned(zext_ln344_8_fu_447_p1) + unsigned(ap_const_lv9_181));
    add_ln344_9_fu_590_p2 <= std_logic_vector(unsigned(zext_ln344_9_fu_586_p1) + unsigned(ap_const_lv9_181));
    add_ln344_fu_312_p2 <= std_logic_vector(unsigned(zext_ln344_fu_308_p1) + unsigned(ap_const_lv9_181));
    and_ln14_1_fu_168_p2 <= (grp_fu_85_p2 and and_ln14_fu_162_p2);
    and_ln14_fu_162_p2 <= (or_ln14_fu_138_p2 and or_ln14_1_fu_156_p2);
    and_ln15_1_fu_257_p2 <= (grp_fu_85_p2 and and_ln15_fu_251_p2);
    and_ln15_fu_251_p2 <= (or_ln15_fu_227_p2 and or_ln15_1_fu_245_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= result_V_fu_400_p3;
    ap_return_1 <= result_V_48_fu_539_p3;
    ap_return_2 <= result_V_49_fu_678_p3;
    bitcast_ln14_1_fu_109_p1 <= Vb;
    bitcast_ln14_fu_92_p1 <= Va;
    bitcast_ln15_1_fu_198_p1 <= Vc;
    bitcast_ln15_fu_181_p1 <= min_reg_728;
    data_V_13_fu_408_p1 <= dc_12_reg_752;
    data_V_14_fu_547_p1 <= dc_13_reg_757;
    data_V_fu_269_p1 <= dc_reg_747;

    grp_fu_85_p0_assign_proc : process(ap_CS_fsm_state1, Va, ap_CS_fsm_state2, min_fu_174_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_85_p0 <= min_fu_174_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_85_p0 <= Va;
        else 
            grp_fu_85_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_85_p1_assign_proc : process(ap_CS_fsm_state1, Vb, Vc, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_85_p1 <= Vc;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_85_p1 <= Vb;
        else 
            grp_fu_85_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln14_1_fu_132_p2 <= "1" when (trunc_ln14_fu_105_p1 = ap_const_lv23_0) else "0";
    icmp_ln14_2_fu_144_p2 <= "0" when (tmp_53_fu_112_p4 = ap_const_lv8_FF) else "1";
    icmp_ln14_3_fu_150_p2 <= "1" when (trunc_ln14_1_fu_122_p1 = ap_const_lv23_0) else "0";
    icmp_ln14_fu_126_p2 <= "0" when (tmp_s_fu_95_p4 = ap_const_lv8_FF) else "1";
    icmp_ln15_1_fu_221_p2 <= "1" when (trunc_ln15_fu_194_p1 = ap_const_lv23_0) else "0";
    icmp_ln15_2_fu_233_p2 <= "0" when (tmp_56_fu_201_p4 = ap_const_lv8_FF) else "1";
    icmp_ln15_3_fu_239_p2 <= "1" when (trunc_ln15_1_fu_211_p1 = ap_const_lv23_0) else "0";
    icmp_ln15_fu_215_p2 <= "0" when (tmp_55_fu_184_p4 = ap_const_lv8_FF) else "1";
    isNeg_8_fu_457_p3 <= add_ln344_8_fu_451_p2(8 downto 8);
    isNeg_9_fu_596_p3 <= add_ln344_9_fu_590_p2(8 downto 8);
    isNeg_fu_318_p3 <= add_ln344_fu_312_p2(8 downto 8);
    mantissa_8_fu_433_p4 <= ((ap_const_lv1_1 & tmp_91_fu_429_p1) & ap_const_lv1_0);
    mantissa_9_fu_572_p4 <= ((ap_const_lv1_1 & tmp_93_fu_568_p1) & ap_const_lv1_0);
    mantissa_fu_294_p4 <= ((ap_const_lv1_1 & tmp_89_fu_290_p1) & ap_const_lv1_0);
    min_1_fu_263_p3 <= 
        min_reg_728 when (and_ln15_1_fu_257_p2(0) = '1') else 
        Vc;
    min_fu_174_p3 <= 
        Va when (and_ln14_1_fu_168_p2(0) = '1') else 
        Vb;
    or_ln14_1_fu_156_p2 <= (icmp_ln14_3_fu_150_p2 or icmp_ln14_2_fu_144_p2);
    or_ln14_fu_138_p2 <= (icmp_ln14_fu_126_p2 or icmp_ln14_1_fu_132_p2);
    or_ln15_1_fu_245_p2 <= (icmp_ln15_3_fu_239_p2 or icmp_ln15_2_fu_233_p2);
    or_ln15_fu_227_p2 <= (icmp_ln15_fu_215_p2 or icmp_ln15_1_fu_221_p2);
    p_Result_14_fu_411_p3 <= data_V_13_fu_408_p1(31 downto 31);
    p_Result_15_fu_550_p3 <= data_V_14_fu_547_p1(31 downto 31);
    p_Result_s_fu_272_p3 <= data_V_fu_269_p1(31 downto 31);
    r_V_19_fu_358_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_304_p1),to_integer(unsigned('0' & zext_ln1340_fu_348_p1(31-1 downto 0)))));
    r_V_20_fu_491_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_8_fu_443_p1),to_integer(unsigned('0' & zext_ln1340_8_fu_487_p1(31-1 downto 0)))));
    r_V_21_fu_497_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_8_fu_443_p1),to_integer(unsigned('0' & zext_ln1340_8_fu_487_p1(31-1 downto 0)))));
    r_V_22_fu_630_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_9_fu_582_p1),to_integer(unsigned('0' & zext_ln1340_9_fu_626_p1(31-1 downto 0)))));
    r_V_23_fu_636_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_9_fu_582_p1),to_integer(unsigned('0' & zext_ln1340_9_fu_626_p1(31-1 downto 0)))));
    r_V_fu_352_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_304_p1),to_integer(unsigned('0' & zext_ln1340_fu_348_p1(31-1 downto 0)))));
    result_V_41_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_386_p3));
    result_V_44_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_8_fu_525_p3));
    result_V_47_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_9_fu_664_p3));
    result_V_48_fu_539_p3 <= 
        result_V_44_fu_533_p2 when (p_Result_14_fu_411_p3(0) = '1') else 
        val_8_fu_525_p3;
    result_V_49_fu_678_p3 <= 
        result_V_47_fu_672_p2 when (p_Result_15_fu_550_p3(0) = '1') else 
        val_9_fu_664_p3;
    result_V_fu_400_p3 <= 
        result_V_41_fu_394_p2 when (p_Result_s_fu_272_p3(0) = '1') else 
        val_fu_386_p3;
        sext_ln1340_8_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_8_fu_475_p3),32));

        sext_ln1340_9_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_9_fu_614_p3),32));

        sext_ln1340_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_336_p3),32));

        sext_ln1364_8_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_7_fu_465_p2),9));

        sext_ln1364_9_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_8_fu_604_p2),9));

        sext_ln1364_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_fu_326_p2),9));

    sub_ln1364_7_fu_465_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_90_fu_419_p4));
    sub_ln1364_8_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_92_fu_558_p4));
    sub_ln1364_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_88_fu_280_p4));
    tmp_53_fu_112_p4 <= bitcast_ln14_1_fu_109_p1(30 downto 23);
    tmp_55_fu_184_p4 <= bitcast_ln15_fu_181_p1(30 downto 23);
    tmp_56_fu_201_p4 <= bitcast_ln15_1_fu_198_p1(30 downto 23);
    tmp_59_fu_376_p4 <= r_V_19_fu_358_p2(39 downto 24);
    tmp_61_fu_515_p4 <= r_V_21_fu_497_p2(39 downto 24);
    tmp_63_fu_654_p4 <= r_V_23_fu_636_p2(39 downto 24);
    tmp_82_fu_503_p3 <= r_V_20_fu_491_p2(24 downto 24);
    tmp_87_fu_642_p3 <= r_V_22_fu_630_p2(24 downto 24);
    tmp_88_fu_280_p4 <= data_V_fu_269_p1(30 downto 23);
    tmp_89_fu_290_p1 <= data_V_fu_269_p1(23 - 1 downto 0);
    tmp_90_fu_419_p4 <= data_V_13_fu_408_p1(30 downto 23);
    tmp_91_fu_429_p1 <= data_V_13_fu_408_p1(23 - 1 downto 0);
    tmp_92_fu_558_p4 <= data_V_14_fu_547_p1(30 downto 23);
    tmp_93_fu_568_p1 <= data_V_14_fu_547_p1(23 - 1 downto 0);
    tmp_fu_364_p3 <= r_V_fu_352_p2(24 downto 24);
    tmp_s_fu_95_p4 <= bitcast_ln14_fu_92_p1(30 downto 23);
    trunc_ln14_1_fu_122_p1 <= bitcast_ln14_1_fu_109_p1(23 - 1 downto 0);
    trunc_ln14_fu_105_p1 <= bitcast_ln14_fu_92_p1(23 - 1 downto 0);
    trunc_ln15_1_fu_211_p1 <= bitcast_ln15_1_fu_198_p1(23 - 1 downto 0);
    trunc_ln15_fu_194_p1 <= bitcast_ln15_fu_181_p1(23 - 1 downto 0);
    ush_8_fu_475_p3 <= 
        sext_ln1364_8_fu_471_p1 when (isNeg_8_fu_457_p3(0) = '1') else 
        add_ln344_8_fu_451_p2;
    ush_9_fu_614_p3 <= 
        sext_ln1364_9_fu_610_p1 when (isNeg_9_fu_596_p3(0) = '1') else 
        add_ln344_9_fu_590_p2;
    ush_fu_336_p3 <= 
        sext_ln1364_fu_332_p1 when (isNeg_fu_318_p3(0) = '1') else 
        add_ln344_fu_312_p2;
    val_8_fu_525_p3 <= 
        zext_ln671_8_fu_511_p1 when (isNeg_8_fu_457_p3(0) = '1') else 
        tmp_61_fu_515_p4;
    val_9_fu_664_p3 <= 
        zext_ln671_9_fu_650_p1 when (isNeg_9_fu_596_p3(0) = '1') else 
        tmp_63_fu_654_p4;
    val_fu_386_p3 <= 
        zext_ln671_fu_372_p1 when (isNeg_fu_318_p3(0) = '1') else 
        tmp_59_fu_376_p4;
    zext_ln1340_8_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_8_fu_483_p1),63));
    zext_ln1340_9_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_9_fu_622_p1),63));
    zext_ln1340_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_fu_344_p1),63));
    zext_ln15_8_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_8_fu_433_p4),63));
    zext_ln15_9_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_9_fu_572_p4),63));
    zext_ln15_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_294_p4),63));
    zext_ln344_8_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_419_p4),9));
    zext_ln344_9_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_558_p4),9));
    zext_ln344_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_280_p4),9));
    zext_ln671_8_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_503_p3),16));
    zext_ln671_9_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_642_p3),16));
    zext_ln671_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_364_p3),16));
end behav;
