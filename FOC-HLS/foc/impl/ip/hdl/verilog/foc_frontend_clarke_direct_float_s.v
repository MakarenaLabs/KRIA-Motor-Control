// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_clarke_direct_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Ia,
        Ib,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Ia;
input  [31:0] Ib;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_47_p2;
reg   [31:0] reg_82;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_42_p2;
reg   [31:0] Ib_temp_reg_325;
wire    ap_CS_fsm_state7;
wire   [31:0] bitcast_ln354_fu_100_p1;
wire    ap_CS_fsm_state12;
wire   [0:0] or_ln20_fu_131_p2;
reg   [0:0] or_ln20_reg_335;
wire   [0:0] grp_fu_60_p2;
reg   [0:0] tmp_34_reg_342;
wire   [0:0] grp_fu_65_p2;
reg   [0:0] tmp_35_reg_347;
wire   [31:0] bitcast_ln354_3_fu_149_p1;
wire   [0:0] or_ln24_fu_180_p2;
reg   [0:0] or_ln24_reg_357;
wire   [0:0] grp_fu_70_p2;
reg   [0:0] tmp_38_reg_364;
wire   [0:0] grp_fu_75_p2;
reg   [0:0] tmp_39_reg_369;
reg   [0:0] tmp_s_reg_374;
wire    ap_CS_fsm_state13;
reg   [0:0] tmp_37_reg_384;
reg   [31:0] grp_fu_47_p0;
reg   [31:0] grp_fu_47_p1;
wire    ap_CS_fsm_state8;
wire  signed [31:0] grp_fu_54_p0;
wire  signed [31:0] grp_fu_57_p0;
reg   [31:0] grp_fu_60_p0;
reg   [31:0] grp_fu_60_p1;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_65_p0;
reg   [31:0] grp_fu_65_p1;
wire   [31:0] data_V_fu_89_p1;
wire   [30:0] p_Result_s_fu_92_p1;
wire   [31:0] zext_ln368_fu_96_p1;
wire   [7:0] tmp_fu_105_p4;
wire   [22:0] trunc_ln20_fu_115_p1;
wire   [0:0] icmp_ln20_1_fu_125_p2;
wire   [0:0] icmp_ln20_fu_119_p2;
wire   [31:0] data_V_11_fu_137_p1;
wire   [30:0] p_Result_12_fu_141_p1;
wire   [31:0] zext_ln368_5_fu_145_p1;
wire   [7:0] tmp_36_fu_154_p4;
wire   [22:0] trunc_ln24_fu_164_p1;
wire   [0:0] icmp_ln24_1_fu_174_p2;
wire   [0:0] icmp_ln24_fu_168_p2;
wire   [0:0] and_ln12_fu_186_p2;
wire   [0:0] and_ln12_12_fu_194_p2;
wire   [1:0] zext_ln12_fu_190_p1;
wire   [1:0] zext_ln12_12_fu_198_p1;
wire  signed [1:0] sub_ln12_fu_202_p2;
wire   [16:0] shl_ln_fu_212_p3;
wire  signed [16:0] sext_ln21_fu_208_p1;
wire   [16:0] sub_ln21_fu_220_p2;
wire   [0:0] and_ln12_13_fu_231_p2;
wire   [0:0] and_ln12_14_fu_239_p2;
wire   [1:0] zext_ln12_13_fu_235_p1;
wire   [1:0] zext_ln12_14_fu_243_p1;
wire  signed [1:0] sub_ln12_5_fu_247_p2;
wire   [16:0] shl_ln5_fu_257_p3;
wire  signed [16:0] sext_ln25_fu_253_p1;
wire   [16:0] sub_ln25_fu_265_p2;
wire    ap_CS_fsm_state16;
wire   [0:0] and_ln20_fu_276_p2;
wire   [31:0] grp_fu_54_p1;
wire   [0:0] and_ln24_fu_287_p2;
wire   [31:0] grp_fu_57_p1;
wire   [31:0] select_ln20_fu_280_p3;
wire   [31:0] select_ln24_fu_291_p3;
reg   [4:0] grp_fu_65_opcode;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

foc_frontend_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_82),
    .din1(Ia),
    .ce(1'b1),
    .dout(grp_fu_42_p2)
);

foc_frontend_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_47_p0),
    .din1(grp_fu_47_p1),
    .ce(1'b1),
    .dout(grp_fu_47_p2)
);

foc_frontend_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_54_p0),
    .ce(1'b1),
    .dout(grp_fu_54_p1)
);

foc_frontend_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_57_p0),
    .ce(1'b1),
    .dout(grp_fu_57_p1)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_60_p0),
    .din1(grp_fu_60_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_60_p2)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_65_p0),
    .din1(grp_fu_65_p1),
    .ce(1'b1),
    .opcode(grp_fu_65_opcode),
    .dout(grp_fu_65_p2)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_82),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_70_p2)
);

foc_frontend_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_82),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_75_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_return_0_preg <= select_ln20_fu_280_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_return_1_preg <= select_ln24_fu_291_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Ib_temp_reg_325 <= grp_fu_42_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        or_ln20_reg_335 <= or_ln20_fu_131_p2;
        or_ln24_reg_357 <= or_ln24_fu_180_p2;
        tmp_34_reg_342 <= grp_fu_60_p2;
        tmp_35_reg_347 <= grp_fu_65_p2;
        tmp_38_reg_364 <= grp_fu_70_p2;
        tmp_39_reg_369 <= grp_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_82 <= grp_fu_47_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_37_reg_384 <= grp_fu_65_p2;
        tmp_s_reg_374 <= grp_fu_60_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_return_0 = select_ln20_fu_280_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_return_1 = select_ln24_fu_291_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_47_p0 = Ib_temp_reg_325;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_47_p0 = Ib;
    end else begin
        grp_fu_47_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_47_p1 = 32'd1058262326;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_47_p1 = 32'd1073741824;
    end else begin
        grp_fu_47_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_60_p0 = bitcast_ln354_fu_100_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_60_p0 = Ia;
    end else begin
        grp_fu_60_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_60_p1 = 32'd1191181824;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_60_p1 = 32'd0;
    end else begin
        grp_fu_60_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_65_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_65_opcode = 5'd4;
    end else begin
        grp_fu_65_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_65_p0 = bitcast_ln354_3_fu_149_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_65_p0 = Ia;
    end else begin
        grp_fu_65_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_65_p1 = 32'd1191181824;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_65_p1 = 32'd0;
    end else begin
        grp_fu_65_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln12_12_fu_194_p2 = (tmp_35_reg_347 & or_ln20_reg_335);

assign and_ln12_13_fu_231_p2 = (tmp_38_reg_364 & or_ln24_reg_357);

assign and_ln12_14_fu_239_p2 = (tmp_39_reg_369 & or_ln24_reg_357);

assign and_ln12_fu_186_p2 = (tmp_34_reg_342 & or_ln20_reg_335);

assign and_ln20_fu_276_p2 = (tmp_s_reg_374 & or_ln20_reg_335);

assign and_ln24_fu_287_p2 = (tmp_37_reg_384 & or_ln24_reg_357);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln354_3_fu_149_p1 = zext_ln368_5_fu_145_p1;

assign bitcast_ln354_fu_100_p1 = zext_ln368_fu_96_p1;

assign data_V_11_fu_137_p1 = reg_82;

assign data_V_fu_89_p1 = Ia;

assign grp_fu_54_p0 = $signed(sub_ln21_fu_220_p2);

assign grp_fu_57_p0 = $signed(sub_ln25_fu_265_p2);

assign icmp_ln20_1_fu_125_p2 = ((trunc_ln20_fu_115_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_119_p2 = ((tmp_fu_105_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_174_p2 = ((trunc_ln24_fu_164_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_168_p2 = ((tmp_36_fu_154_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln20_fu_131_p2 = (icmp_ln20_fu_119_p2 | icmp_ln20_1_fu_125_p2);

assign or_ln24_fu_180_p2 = (icmp_ln24_fu_168_p2 | icmp_ln24_1_fu_174_p2);

assign p_Result_12_fu_141_p1 = data_V_11_fu_137_p1[30:0];

assign p_Result_s_fu_92_p1 = data_V_fu_89_p1[30:0];

assign select_ln20_fu_280_p3 = ((and_ln20_fu_276_p2[0:0] == 1'b1) ? grp_fu_54_p1 : Ia);

assign select_ln24_fu_291_p3 = ((and_ln24_fu_287_p2[0:0] == 1'b1) ? grp_fu_57_p1 : reg_82);

assign sext_ln21_fu_208_p1 = sub_ln12_fu_202_p2;

assign sext_ln25_fu_253_p1 = sub_ln12_5_fu_247_p2;

assign shl_ln5_fu_257_p3 = {{sub_ln12_5_fu_247_p2}, {15'd0}};

assign shl_ln_fu_212_p3 = {{sub_ln12_fu_202_p2}, {15'd0}};

assign sub_ln12_5_fu_247_p2 = (zext_ln12_13_fu_235_p1 - zext_ln12_14_fu_243_p1);

assign sub_ln12_fu_202_p2 = (zext_ln12_fu_190_p1 - zext_ln12_12_fu_198_p1);

assign sub_ln21_fu_220_p2 = ($signed(shl_ln_fu_212_p3) - $signed(sext_ln21_fu_208_p1));

assign sub_ln25_fu_265_p2 = ($signed(shl_ln5_fu_257_p3) - $signed(sext_ln25_fu_253_p1));

assign tmp_36_fu_154_p4 = {{data_V_11_fu_137_p1[30:23]}};

assign tmp_fu_105_p4 = {{data_V_fu_89_p1[30:23]}};

assign trunc_ln20_fu_115_p1 = data_V_fu_89_p1[22:0];

assign trunc_ln24_fu_164_p1 = data_V_11_fu_137_p1[22:0];

assign zext_ln12_12_fu_198_p1 = and_ln12_12_fu_194_p2;

assign zext_ln12_13_fu_235_p1 = and_ln12_13_fu_231_p2;

assign zext_ln12_14_fu_243_p1 = and_ln12_14_fu_239_p2;

assign zext_ln12_fu_190_p1 = and_ln12_fu_186_p2;

assign zext_ln368_5_fu_145_p1 = p_Result_12_fu_141_p1;

assign zext_ln368_fu_96_p1 = p_Result_s_fu_92_p1;

endmodule //foc_frontend_clarke_direct_float_s
