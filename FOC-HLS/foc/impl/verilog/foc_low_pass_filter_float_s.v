// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_low_pass_filter_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        velocity,
        Ia,
        Ib,
        vel_corr,
        vel_corr_ap_vld,
        Ia_corr_1,
        Ia_corr_1_ap_vld,
        Ib_corr_1,
        Ib_corr_1_ap_vld,
        grp_fu_514_p_din0,
        grp_fu_514_p_din1,
        grp_fu_514_p_opcode,
        grp_fu_514_p_dout0,
        grp_fu_514_p_ce,
        grp_fu_518_p_din0,
        grp_fu_518_p_din1,
        grp_fu_518_p_opcode,
        grp_fu_518_p_dout0,
        grp_fu_518_p_ce,
        grp_fu_526_p_din0,
        grp_fu_526_p_din1,
        grp_fu_526_p_dout0,
        grp_fu_526_p_ce,
        grp_fu_532_p_din0,
        grp_fu_532_p_din1,
        grp_fu_532_p_dout0,
        grp_fu_532_p_ce,
        grp_fu_536_p_din0,
        grp_fu_536_p_din1,
        grp_fu_536_p_dout0,
        grp_fu_536_p_ce,
        grp_fu_540_p_din0,
        grp_fu_540_p_din1,
        grp_fu_540_p_dout0,
        grp_fu_540_p_ce
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] velocity;
input  [31:0] Ia;
input  [31:0] Ib;
output  [31:0] vel_corr;
output   vel_corr_ap_vld;
output  [31:0] Ia_corr_1;
output   Ia_corr_1_ap_vld;
output  [31:0] Ib_corr_1;
output   Ib_corr_1_ap_vld;
output  [31:0] grp_fu_514_p_din0;
output  [31:0] grp_fu_514_p_din1;
output  [1:0] grp_fu_514_p_opcode;
input  [31:0] grp_fu_514_p_dout0;
output   grp_fu_514_p_ce;
output  [31:0] grp_fu_518_p_din0;
output  [31:0] grp_fu_518_p_din1;
output  [1:0] grp_fu_518_p_opcode;
input  [31:0] grp_fu_518_p_dout0;
output   grp_fu_518_p_ce;
output  [31:0] grp_fu_526_p_din0;
output  [31:0] grp_fu_526_p_din1;
input  [31:0] grp_fu_526_p_dout0;
output   grp_fu_526_p_ce;
output  [31:0] grp_fu_532_p_din0;
output  [31:0] grp_fu_532_p_din1;
input  [31:0] grp_fu_532_p_dout0;
output   grp_fu_532_p_ce;
output  [31:0] grp_fu_536_p_din0;
output  [31:0] grp_fu_536_p_din1;
input  [31:0] grp_fu_536_p_dout0;
output   grp_fu_536_p_ce;
output  [31:0] grp_fu_540_p_din0;
output  [31:0] grp_fu_540_p_din1;
input  [31:0] grp_fu_540_p_dout0;
output   grp_fu_540_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vel_corr_ap_vld;
reg Ia_corr_1_ap_vld;
reg Ib_corr_1_ap_vld;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] velocity_accum;
reg   [3:0] buffer_velocity_address0;
reg    buffer_velocity_ce0;
reg    buffer_velocity_we0;
reg   [31:0] buffer_velocity_d0;
wire   [31:0] buffer_velocity_q0;
wire   [31:0] buffer_velocity_q1;
reg   [31:0] Y1a_prev;
reg   [31:0] Y1b_prev;
reg   [31:0] Y2a_prev;
reg   [31:0] Y2b_prev;
reg   [31:0] dc_cnt;
reg   [31:0] Ia_DC_acc;
reg   [31:0] Ib_DC_acc;
reg   [31:0] Ia_corr;
reg   [31:0] Ib_corr;
reg   [31:0] reg_136;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
reg   [31:0] reg_141;
reg   [31:0] reg_146;
reg   [31:0] reg_151;
reg   [31:0] reg_156;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state14;
reg   [31:0] reg_163;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
reg   [31:0] Y1a_reg_364;
reg   [31:0] div_reg_375;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln64_fu_248_p2;
reg   [0:0] icmp_ln64_reg_383;
wire    ap_CS_fsm_state15;
wire   [31:0] add_ln76_fu_290_p2;
wire    ap_CS_fsm_state18;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_idle;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_ready;
wire   [3:0] grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0;
wire   [31:0] grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0;
wire   [3:0] grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address1;
wire    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce1;
reg   [31:0] storemerge_reg_84;
wire    ap_CS_fsm_state20;
reg    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_101_p0;
reg   [31:0] grp_fu_101_p1;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_106_p0;
reg   [31:0] grp_fu_106_p1;
reg   [31:0] grp_fu_111_p0;
reg   [31:0] grp_fu_111_p1;
reg   [31:0] grp_fu_117_p0;
reg   [31:0] grp_fu_117_p1;
reg   [31:0] grp_fu_122_p0;
reg   [31:0] grp_fu_128_p0;
wire   [31:0] bitcast_ln31_fu_213_p1;
wire   [31:0] xor_ln31_fu_216_p2;
reg   [1:0] grp_fu_101_opcode;
reg    grp_fu_101_ce;
wire    ap_CS_fsm_state19;
reg   [1:0] grp_fu_106_opcode;
reg    grp_fu_106_ce;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 velocity_accum = 32'd0;
#0 Y1a_prev = 32'd0;
#0 Y1b_prev = 32'd0;
#0 Y2a_prev = 32'd0;
#0 Y2b_prev = 32'd0;
#0 dc_cnt = 32'd0;
#0 Ia_DC_acc = 32'd0;
#0 Ib_DC_acc = 32'd0;
#0 Ia_corr = 32'd0;
#0 Ib_corr = 32'd0;
#0 grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg = 1'b0;
end

foc_low_pass_filter_float_s_buffer_velocity_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
buffer_velocity_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_velocity_address0),
    .ce0(buffer_velocity_ce0),
    .we0(buffer_velocity_we0),
    .d0(buffer_velocity_d0),
    .q0(buffer_velocity_q0),
    .address1(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address1),
    .ce1(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce1),
    .q1(buffer_velocity_q1)
);

foc_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1 grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start),
    .ap_done(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done),
    .ap_idle(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_idle),
    .ap_ready(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_ready),
    .buffer_velocity_address0(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0),
    .buffer_velocity_ce0(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0),
    .buffer_velocity_we0(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0),
    .buffer_velocity_d0(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0),
    .buffer_velocity_address1(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address1),
    .buffer_velocity_ce1(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce1),
    .buffer_velocity_q1(buffer_velocity_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_ready == 1'b1)) begin
            grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln64_fu_248_p2 == 1'd1))) begin
        Ia_DC_acc <= reg_156;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln64_reg_383 == 1'd0))) begin
        Ia_DC_acc <= grp_fu_514_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln64_fu_248_p2 == 1'd1))) begin
        Ib_DC_acc <= reg_163;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln64_reg_383 == 1'd0))) begin
        Ib_DC_acc <= grp_fu_518_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        storemerge_reg_84 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln64_reg_383 == 1'd0))) begin
        storemerge_reg_84 <= add_ln76_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Ia_corr <= grp_fu_526_p_dout0;
        Ib_corr <= grp_fu_532_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Y1a_prev <= grp_fu_514_p_dout0;
        Y1a_reg_364 <= grp_fu_514_p_dout0;
        Y1b_prev <= grp_fu_518_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Y2a_prev <= grp_fu_514_p_dout0;
        Y2b_prev <= grp_fu_518_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        dc_cnt <= storemerge_reg_84;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        div_reg_375 <= grp_fu_526_p_dout0;
        velocity_accum <= grp_fu_526_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        icmp_ln64_reg_383 <= icmp_ln64_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_136 <= grp_fu_526_p_dout0;
        reg_141 <= grp_fu_532_p_dout0;
        reg_146 <= grp_fu_536_p_dout0;
        reg_151 <= grp_fu_540_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_156 <= grp_fu_514_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_163 <= grp_fu_518_p_dout0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        Ia_corr_1_ap_vld = 1'b1;
    end else begin
        Ia_corr_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        Ib_corr_1_ap_vld = 1'b1;
    end else begin
        Ib_corr_1_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_velocity_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_velocity_address0 = 4'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_address0 = grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0;
    end else begin
        buffer_velocity_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buffer_velocity_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_ce0 = grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0;
    end else begin
        buffer_velocity_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_velocity_d0 = velocity;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_d0 = grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0;
    end else begin
        buffer_velocity_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_velocity_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_we0 = grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0;
    end else begin
        buffer_velocity_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state4) & (grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done == 1'b0)))) begin
        grp_fu_101_ce = 1'b0;
    end else begin
        grp_fu_101_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_101_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln64_fu_248_p2 == 1'd0)))) begin
        grp_fu_101_opcode = 2'd0;
    end else begin
        grp_fu_101_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_101_p0 = Ia_DC_acc;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_101_p0 = reg_156;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_101_p0 = reg_136;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_p0 = velocity_accum;
    end else begin
        grp_fu_101_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_101_p1 = Ia_corr;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_101_p1 = reg_156;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_101_p1 = velocity;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_101_p1 = reg_141;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_101_p1 = buffer_velocity_q0;
    end else begin
        grp_fu_101_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state4) & (grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done == 1'b0)))) begin
        grp_fu_106_ce = 1'b0;
    end else begin
        grp_fu_106_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_106_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln64_fu_248_p2 == 1'd0)))) begin
        grp_fu_106_opcode = 2'd0;
    end else begin
        grp_fu_106_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_106_p0 = reg_163;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_106_p0 = Ib_DC_acc;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_106_p0 = reg_146;
    end else begin
        grp_fu_106_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_106_p1 = Ib_corr;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_106_p1 = reg_163;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_106_p1 = reg_151;
    end else begin
        grp_fu_106_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_111_p0 = Ia_DC_acc;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_111_p0 = reg_156;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_111_p0 = Y1a_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_111_p0 = Ia;
    end else begin
        grp_fu_111_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_111_p1 = 32'd939524096;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_111_p1 = 32'd1023410176;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_111_p1 = 32'd1055186223;
    end else begin
        grp_fu_111_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_117_p0 = Ib_DC_acc;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_117_p0 = Y2a_prev;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_117_p0 = Y1a_prev;
    end else begin
        grp_fu_117_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_117_p1 = 32'd939524096;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_117_p1 = 32'd1057853800;
    end else begin
        grp_fu_117_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_122_p0 = reg_163;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_122_p0 = Ib;
    end else begin
        grp_fu_122_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_128_p0 = Y2b_prev;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_128_p0 = Y1b_prev;
    end else begin
        grp_fu_128_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        vel_corr_ap_vld = 1'b1;
    end else begin
        vel_corr_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln64_fu_248_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Ia_corr_1 = grp_fu_514_p_dout0;

assign Ib_corr_1 = grp_fu_518_p_dout0;

assign add_ln76_fu_290_p2 = (dc_cnt + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln31_fu_213_p1 = div_reg_375;

assign grp_fu_514_p_ce = grp_fu_101_ce;

assign grp_fu_514_p_din0 = grp_fu_101_p0;

assign grp_fu_514_p_din1 = grp_fu_101_p1;

assign grp_fu_514_p_opcode = grp_fu_101_opcode;

assign grp_fu_518_p_ce = grp_fu_106_ce;

assign grp_fu_518_p_din0 = grp_fu_106_p0;

assign grp_fu_518_p_din1 = grp_fu_106_p1;

assign grp_fu_518_p_opcode = grp_fu_106_opcode;

assign grp_fu_526_p_ce = 1'b1;

assign grp_fu_526_p_din0 = grp_fu_111_p0;

assign grp_fu_526_p_din1 = grp_fu_111_p1;

assign grp_fu_532_p_ce = 1'b1;

assign grp_fu_532_p_din0 = grp_fu_117_p0;

assign grp_fu_532_p_din1 = grp_fu_117_p1;

assign grp_fu_536_p_ce = 1'b1;

assign grp_fu_536_p_din0 = grp_fu_122_p0;

assign grp_fu_536_p_din1 = 32'd1055186223;

assign grp_fu_540_p_ce = 1'b1;

assign grp_fu_540_p_din0 = grp_fu_128_p0;

assign grp_fu_540_p_din1 = 32'd1057853800;

assign grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start = grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg;

assign icmp_ln64_fu_248_p2 = (($signed(dc_cnt) > $signed(32'd28)) ? 1'b1 : 1'b0);

assign vel_corr = xor_ln31_fu_216_p2;

assign xor_ln31_fu_216_p2 = (bitcast_ln31_fu_213_p1 ^ 32'd2147483648);

endmodule //foc_low_pass_filter_float_s
