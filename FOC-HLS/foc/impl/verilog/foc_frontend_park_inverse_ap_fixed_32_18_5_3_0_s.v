// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_park_inverse_ap_fixed_32_18_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Vd,
        Vq,
        angle,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Vd;
input  [31:0] Vq;
input  [9:0] angle;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] sine_i_V_address0;
reg    sine_i_V_ce0;
wire   [14:0] sine_i_V_q0;
wire   [9:0] cosine_i_V_address0;
reg    cosine_i_V_ce0;
wire   [14:0] cosine_i_V_q0;
reg   [31:0] Vd_cos_V_reg_412;
wire    ap_CS_fsm_state2;
reg   [31:0] Vd_sin_V_reg_417;
reg   [31:0] Vq_cos_V_reg_422;
reg   [31:0] Vq_sin_V_reg_427;
wire   [63:0] zext_ln19_fu_88_p1;
wire  signed [31:0] mul_ln1168_fu_102_p0;
wire  signed [45:0] sext_ln1171_fu_94_p1;
wire  signed [14:0] mul_ln1168_fu_102_p1;
wire  signed [45:0] sext_ln1171_1_fu_98_p1;
wire   [45:0] mul_ln1168_fu_102_p2;
wire  signed [31:0] mul_ln1168_1_fu_122_p0;
wire  signed [14:0] mul_ln1168_1_fu_122_p1;
wire  signed [45:0] sext_ln1171_2_fu_118_p1;
wire   [45:0] mul_ln1168_1_fu_122_p2;
wire  signed [31:0] mul_ln1168_2_fu_142_p0;
wire  signed [45:0] sext_ln1171_3_fu_138_p1;
wire  signed [14:0] mul_ln1168_2_fu_142_p1;
wire   [45:0] mul_ln1168_2_fu_142_p2;
wire  signed [31:0] mul_ln1168_3_fu_158_p0;
wire  signed [14:0] mul_ln1168_3_fu_158_p1;
wire   [45:0] mul_ln1168_3_fu_158_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] x_V_fu_174_p2;
wire   [31:0] p_Val2_s_fu_182_p2;
wire   [0:0] p_Result_s_fu_198_p3;
wire   [31:0] p_Result_5_fu_188_p4;
wire   [31:0] select_ln180_fu_206_p3;
wire   [0:0] icmp_ln1548_fu_220_p2;
wire   [0:0] tmp_fu_230_p3;
wire   [1:0] zext_ln12_fu_226_p1;
wire   [1:0] zext_ln12_1_fu_238_p1;
wire   [1:0] sub_ln12_fu_242_p2;
wire   [15:0] shl_ln740_1_fu_256_p3;
wire   [30:0] shl_ln_fu_248_p3;
wire  signed [30:0] sext_ln740_fu_264_p1;
wire   [30:0] sub_ln740_fu_268_p2;
wire   [0:0] icmp_ln1547_fu_214_p2;
wire  signed [31:0] sext_ln1547_fu_274_p1;
wire   [31:0] x_V_1_fu_178_p2;
wire   [31:0] p_Val2_4_fu_286_p2;
wire   [0:0] p_Result_4_fu_302_p3;
wire   [31:0] p_Result_6_fu_292_p4;
wire   [31:0] select_ln180_1_fu_310_p3;
wire   [0:0] icmp_ln1548_1_fu_324_p2;
wire   [0:0] tmp_8_fu_334_p3;
wire   [1:0] zext_ln12_2_fu_330_p1;
wire   [1:0] zext_ln12_3_fu_342_p1;
wire   [1:0] sub_ln12_1_fu_346_p2;
wire   [15:0] shl_ln740_3_fu_360_p3;
wire   [30:0] shl_ln740_2_fu_352_p3;
wire  signed [30:0] sext_ln740_1_fu_368_p1;
wire   [30:0] sub_ln740_1_fu_372_p2;
wire   [0:0] icmp_ln1547_1_fu_318_p2;
wire  signed [31:0] sext_ln1547_1_fu_378_p1;
wire   [31:0] select_ln1547_fu_278_p3;
wire   [31:0] select_ln1547_1_fu_382_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

foc_frontend_park_direct_ap_fixed_32_18_5_3_0_s_sine_d_V_ROM_AUTO_1R #(
    .DataWidth( 15 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
sine_i_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sine_i_V_address0),
    .ce0(sine_i_V_ce0),
    .q0(sine_i_V_q0)
);

foc_frontend_park_direct_ap_fixed_32_18_5_3_0_s_cosine_d_V_ROM_AUTO_1R #(
    .DataWidth( 15 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
cosine_i_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(cosine_i_V_address0),
    .ce0(cosine_i_V_ce0),
    .q0(cosine_i_V_q0)
);

foc_frontend_mul_32s_15s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 46 ))
mul_32s_15s_46_1_1_U47(
    .din0(mul_ln1168_fu_102_p0),
    .din1(mul_ln1168_fu_102_p1),
    .dout(mul_ln1168_fu_102_p2)
);

foc_frontend_mul_32s_15s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 46 ))
mul_32s_15s_46_1_1_U48(
    .din0(mul_ln1168_1_fu_122_p0),
    .din1(mul_ln1168_1_fu_122_p1),
    .dout(mul_ln1168_1_fu_122_p2)
);

foc_frontend_mul_32s_15s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 46 ))
mul_32s_15s_46_1_1_U49(
    .din0(mul_ln1168_2_fu_142_p0),
    .din1(mul_ln1168_2_fu_142_p1),
    .dout(mul_ln1168_2_fu_142_p2)
);

foc_frontend_mul_32s_15s_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 46 ))
mul_32s_15s_46_1_1_U50(
    .din0(mul_ln1168_3_fu_158_p0),
    .din1(mul_ln1168_3_fu_158_p1),
    .dout(mul_ln1168_3_fu_158_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Vd_cos_V_reg_412 <= {{mul_ln1168_fu_102_p2[45:14]}};
        Vd_sin_V_reg_417 <= {{mul_ln1168_1_fu_122_p2[45:14]}};
        Vq_cos_V_reg_422 <= {{mul_ln1168_2_fu_142_p2[45:14]}};
        Vq_sin_V_reg_427 <= {{mul_ln1168_3_fu_158_p2[45:14]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cosine_i_V_ce0 = 1'b1;
    end else begin
        cosine_i_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sine_i_V_ce0 = 1'b1;
    end else begin
        sine_i_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return_0 = select_ln1547_fu_278_p3;

assign ap_return_1 = select_ln1547_1_fu_382_p3;

assign cosine_i_V_address0 = zext_ln19_fu_88_p1;

assign icmp_ln1547_1_fu_318_p2 = (($signed(select_ln180_1_fu_310_p3) > $signed(32'd536854528)) ? 1'b1 : 1'b0);

assign icmp_ln1547_fu_214_p2 = (($signed(select_ln180_fu_206_p3) > $signed(32'd536854528)) ? 1'b1 : 1'b0);

assign icmp_ln1548_1_fu_324_p2 = (($signed(x_V_1_fu_178_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1548_fu_220_p2 = (($signed(x_V_fu_174_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign mul_ln1168_1_fu_122_p0 = sext_ln1171_fu_94_p1;

assign mul_ln1168_1_fu_122_p1 = sext_ln1171_2_fu_118_p1;

assign mul_ln1168_2_fu_142_p0 = sext_ln1171_3_fu_138_p1;

assign mul_ln1168_2_fu_142_p1 = sext_ln1171_1_fu_98_p1;

assign mul_ln1168_3_fu_158_p0 = sext_ln1171_3_fu_138_p1;

assign mul_ln1168_3_fu_158_p1 = sext_ln1171_2_fu_118_p1;

assign mul_ln1168_fu_102_p0 = sext_ln1171_fu_94_p1;

assign mul_ln1168_fu_102_p1 = sext_ln1171_1_fu_98_p1;

assign p_Result_4_fu_302_p3 = x_V_1_fu_178_p2[32'd31];

assign p_Result_5_fu_188_p4 = {|(1'd0), p_Val2_s_fu_182_p2[31 - 1:0]};

assign p_Result_6_fu_292_p4 = {|(1'd0), p_Val2_4_fu_286_p2[31 - 1:0]};

assign p_Result_s_fu_198_p3 = x_V_fu_174_p2[32'd31];

assign p_Val2_4_fu_286_p2 = (32'd0 - x_V_1_fu_178_p2);

assign p_Val2_s_fu_182_p2 = (32'd0 - x_V_fu_174_p2);

assign select_ln1547_1_fu_382_p3 = ((icmp_ln1547_1_fu_318_p2[0:0] == 1'b1) ? sext_ln1547_1_fu_378_p1 : x_V_1_fu_178_p2);

assign select_ln1547_fu_278_p3 = ((icmp_ln1547_fu_214_p2[0:0] == 1'b1) ? sext_ln1547_fu_274_p1 : x_V_fu_174_p2);

assign select_ln180_1_fu_310_p3 = ((p_Result_4_fu_302_p3[0:0] == 1'b1) ? p_Result_6_fu_292_p4 : x_V_1_fu_178_p2);

assign select_ln180_fu_206_p3 = ((p_Result_s_fu_198_p3[0:0] == 1'b1) ? p_Result_5_fu_188_p4 : x_V_fu_174_p2);

assign sext_ln1171_1_fu_98_p1 = $signed(cosine_i_V_q0);

assign sext_ln1171_2_fu_118_p1 = $signed(sine_i_V_q0);

assign sext_ln1171_3_fu_138_p1 = $signed(Vq);

assign sext_ln1171_fu_94_p1 = $signed(Vd);

assign sext_ln1547_1_fu_378_p1 = $signed(sub_ln740_1_fu_372_p2);

assign sext_ln1547_fu_274_p1 = $signed(sub_ln740_fu_268_p2);

assign sext_ln740_1_fu_368_p1 = $signed(shl_ln740_3_fu_360_p3);

assign sext_ln740_fu_264_p1 = $signed(shl_ln740_1_fu_256_p3);

assign shl_ln740_1_fu_256_p3 = {{sub_ln12_fu_242_p2}, {14'd0}};

assign shl_ln740_2_fu_352_p3 = {{sub_ln12_1_fu_346_p2}, {29'd0}};

assign shl_ln740_3_fu_360_p3 = {{sub_ln12_1_fu_346_p2}, {14'd0}};

assign shl_ln_fu_248_p3 = {{sub_ln12_fu_242_p2}, {29'd0}};

assign sine_i_V_address0 = zext_ln19_fu_88_p1;

assign sub_ln12_1_fu_346_p2 = (zext_ln12_2_fu_330_p1 - zext_ln12_3_fu_342_p1);

assign sub_ln12_fu_242_p2 = (zext_ln12_fu_226_p1 - zext_ln12_1_fu_238_p1);

assign sub_ln740_1_fu_372_p2 = ($signed(shl_ln740_2_fu_352_p3) - $signed(sext_ln740_1_fu_368_p1));

assign sub_ln740_fu_268_p2 = ($signed(shl_ln_fu_248_p3) - $signed(sext_ln740_fu_264_p1));

assign tmp_8_fu_334_p3 = x_V_1_fu_178_p2[32'd31];

assign tmp_fu_230_p3 = x_V_fu_174_p2[32'd31];

assign x_V_1_fu_178_p2 = (Vq_cos_V_reg_422 + Vd_sin_V_reg_417);

assign x_V_fu_174_p2 = (Vd_cos_V_reg_412 - Vq_sin_V_reg_427);

assign zext_ln12_1_fu_238_p1 = tmp_fu_230_p3;

assign zext_ln12_2_fu_330_p1 = icmp_ln1548_1_fu_324_p2;

assign zext_ln12_3_fu_342_p1 = tmp_8_fu_334_p3;

assign zext_ln12_fu_226_p1 = icmp_ln1548_fu_220_p2;

assign zext_ln19_fu_88_p1 = angle;

endmodule //foc_frontend_park_inverse_ap_fixed_32_18_5_3_0_s
