// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_low_pass_filter_ap_fixed_32_16_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        velocity,
        vel_corr_V,
        vel_corr_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] velocity;
output  [31:0] vel_corr_V;
output   vel_corr_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg vel_corr_V_ap_vld;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] velocity_accum_V;
reg   [2:0] buffer_velocity_V_address0;
reg    buffer_velocity_V_ce0;
reg    buffer_velocity_V_we0;
reg   [31:0] buffer_velocity_V_d0;
wire   [31:0] buffer_velocity_V_q0;
wire   [31:0] buffer_velocity_V_q1;
reg   [31:0] dc_cnt;
wire    ap_CS_fsm_state2;
wire    exp_r_V_exp_core_32_32_66_s_fu_39_ap_ready;
wire   [30:0] exp_r_V_exp_core_32_32_66_s_fu_39_ap_return;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_done;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_idle;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_ready;
wire   [2:0] grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_address0;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_ce0;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_we0;
wire   [31:0] grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_d0;
wire   [2:0] grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_address1;
wire    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_ce1;
reg    grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_99_p2;
wire    ap_CS_fsm_state37;
wire   [31:0] select_ln59_fu_65_p3;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln59_fu_53_p2;
wire   [31:0] add_ln71_fu_59_p2;
wire   [31:0] sub_ln712_1_fu_83_p2;
wire   [31:0] grp_fu_99_p0;
wire   [31:0] grp_fu_99_p1;
reg    grp_fu_99_ap_start;
wire    grp_fu_99_ap_done;
reg    grp_fu_99_ce;
reg   [36:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 velocity_accum_V = 32'd0;
#0 dc_cnt = 32'd0;
#0 grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start_reg = 1'b0;
end

foc_low_pass_filter_ap_fixed_32_16_5_3_0_s_buffer_velocity_V_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
buffer_velocity_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_velocity_V_address0),
    .ce0(buffer_velocity_V_ce0),
    .we0(buffer_velocity_V_we0),
    .d0(buffer_velocity_V_d0),
    .q0(buffer_velocity_V_q0),
    .address1(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_address1),
    .ce1(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_ce1),
    .q1(buffer_velocity_V_q1)
);

foc_exp_core_32_32_66_s exp_r_V_exp_core_32_32_66_s_fu_39(
    .ap_ready(exp_r_V_exp_core_32_32_66_s_fu_39_ap_ready),
    .ap_return(exp_r_V_exp_core_32_32_66_s_fu_39_ap_return)
);

foc_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1 grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start),
    .ap_done(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_done),
    .ap_idle(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_idle),
    .ap_ready(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_ready),
    .buffer_velocity_V_address0(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_address0),
    .buffer_velocity_V_ce0(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_ce0),
    .buffer_velocity_V_we0(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_we0),
    .buffer_velocity_V_d0(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_d0),
    .buffer_velocity_V_address1(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_address1),
    .buffer_velocity_V_ce1(grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_ce1),
    .buffer_velocity_V_q1(buffer_velocity_V_q1)
);

foc_sdiv_32ns_32ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_32ns_32ns_32_36_seq_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_99_ap_start),
    .done(grp_fu_99_ap_done),
    .din0(grp_fu_99_p0),
    .din1(grp_fu_99_p1),
    .ce(grp_fu_99_ce),
    .dout(grp_fu_99_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start_reg <= 1'b1;
        end else if ((grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_ready == 1'b1)) begin
            grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dc_cnt <= select_ln59_fu_65_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        velocity_accum_V <= grp_fu_99_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_velocity_V_address0 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_velocity_V_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_address0 = grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_address0;
    end else begin
        buffer_velocity_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        buffer_velocity_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_ce0 = grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_ce0;
    end else begin
        buffer_velocity_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_velocity_V_d0 = velocity;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_d0 = grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_d0;
    end else begin
        buffer_velocity_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_velocity_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_we0 = grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_buffer_velocity_V_we0;
    end else begin
        buffer_velocity_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_99_ap_start = 1'b1;
    end else begin
        grp_fu_99_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_99_ce = 1'b0;
    end else begin
        grp_fu_99_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        vel_corr_V_ap_vld = 1'b1;
    end else begin
        vel_corr_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_fu_59_p2 = (dc_cnt + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_99_p0 = (sub_ln712_1_fu_83_p2 + velocity);

assign grp_fu_99_p1 = exp_r_V_exp_core_32_32_66_s_fu_39_ap_return;

assign grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start = grp_low_pass_filter_ap_fixed_32_16_5_3_0_Pipeline_VITIS_LOOP_24_1_fu_43_ap_start_reg;

assign icmp_ln59_fu_53_p2 = (($signed(dc_cnt) > $signed(32'd28)) ? 1'b1 : 1'b0);

assign select_ln59_fu_65_p3 = ((icmp_ln59_fu_53_p2[0:0] == 1'b1) ? 32'd0 : add_ln71_fu_59_p2);

assign sub_ln712_1_fu_83_p2 = (velocity_accum_V - buffer_velocity_V_q0);

assign vel_corr_V = (32'd0 - grp_fu_99_p2);

endmodule //foc_low_pass_filter_ap_fixed_32_16_5_3_0_s
