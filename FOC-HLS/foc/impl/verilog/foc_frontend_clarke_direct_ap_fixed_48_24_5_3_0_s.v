// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_clarke_direct_ap_fixed_48_24_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Ia,
        Ib,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] Ia;
input  [46:0] Ib;
output  [47:0] ap_return_0;
output  [47:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [47:0] Ib_temp_V_reg_328;
wire   [47:0] select_ln1547_fu_186_p3;
reg   [47:0] select_ln1547_reg_333;
wire   [71:0] lhs_fu_66_p3;
wire   [71:0] r_V_fu_58_p3;
wire   [71:0] ret_V_fu_74_p2;
wire   [47:0] p_Val2_s_fu_90_p2;
wire   [0:0] p_Result_s_fu_106_p3;
wire   [47:0] p_Result_23_fu_96_p4;
wire   [47:0] select_ln180_fu_114_p3;
wire   [0:0] icmp_ln1548_fu_128_p2;
wire   [0:0] tmp_fu_138_p3;
wire   [1:0] zext_ln12_fu_134_p1;
wire   [1:0] zext_ln12_8_fu_146_p1;
wire  signed [1:0] sub_ln12_fu_150_p2;
wire   [16:0] shl_ln_fu_160_p3;
wire  signed [16:0] sext_ln21_fu_156_p1;
wire   [16:0] tmp_35_fu_168_p2;
wire   [40:0] tmp_s_fu_174_p3;
wire   [0:0] icmp_ln1547_fu_122_p2;
wire  signed [47:0] sext_ln737_fu_182_p1;
wire    ap_CS_fsm_state2;
wire   [24:0] r_V_21_fu_197_p1;
wire   [71:0] r_V_21_fu_197_p2;
wire   [47:0] x_V_fu_203_p4;
wire   [47:0] p_Val2_16_fu_213_p2;
wire   [0:0] p_Result_22_fu_229_p3;
wire   [47:0] p_Result_24_fu_219_p4;
wire   [47:0] select_ln180_5_fu_237_p3;
wire   [0:0] icmp_ln1548_5_fu_251_p2;
wire   [0:0] tmp_38_fu_261_p3;
wire   [1:0] zext_ln12_6_fu_257_p1;
wire   [1:0] zext_ln12_9_fu_269_p1;
wire  signed [1:0] sub_ln12_5_fu_273_p2;
wire   [16:0] shl_ln5_fu_283_p3;
wire  signed [16:0] sext_ln25_fu_279_p1;
wire   [16:0] tmp_39_fu_291_p2;
wire   [40:0] tmp_8_fu_297_p3;
wire   [0:0] icmp_ln1547_5_fu_245_p2;
wire  signed [47:0] sext_ln737_5_fu_305_p1;
wire   [47:0] select_ln1547_5_fu_309_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

foc_frontend_mul_48s_25ns_72_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 72 ))
mul_48s_25ns_72_1_1_U24(
    .din0(Ib_temp_V_reg_328),
    .din1(r_V_21_fu_197_p1),
    .dout(r_V_21_fu_197_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Ib_temp_V_reg_328 <= {{ret_V_fu_74_p2[71:24]}};
        select_ln1547_reg_333 <= select_ln1547_fu_186_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = select_ln1547_reg_333;

assign ap_return_1 = select_ln1547_5_fu_309_p3;

assign icmp_ln1547_5_fu_245_p2 = (($signed(select_ln180_5_fu_237_p3) > $signed(48'd549739036672)) ? 1'b1 : 1'b0);

assign icmp_ln1547_fu_122_p2 = (($signed(select_ln180_fu_114_p3) > $signed(48'd549739036672)) ? 1'b1 : 1'b0);

assign icmp_ln1548_5_fu_251_p2 = (($signed(x_V_fu_203_p4) > $signed(48'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1548_fu_128_p2 = (($signed(Ia) > $signed(48'd0)) ? 1'b1 : 1'b0);

assign lhs_fu_66_p3 = {{Ia}, {24'd0}};

assign p_Result_22_fu_229_p3 = r_V_21_fu_197_p2[32'd71];

assign p_Result_23_fu_96_p4 = {|(1'd0), p_Val2_s_fu_90_p2[47 - 1:0]};

assign p_Result_24_fu_219_p4 = {|(1'd0), p_Val2_16_fu_213_p2[47 - 1:0]};

assign p_Result_s_fu_106_p3 = Ia[32'd47];

assign p_Val2_16_fu_213_p2 = (48'd0 - x_V_fu_203_p4);

assign p_Val2_s_fu_90_p2 = (48'd0 - Ia);

assign r_V_21_fu_197_p1 = 72'd9686325;

assign r_V_fu_58_p3 = {{Ib}, {25'd0}};

assign ret_V_fu_74_p2 = (lhs_fu_66_p3 + r_V_fu_58_p3);

assign select_ln1547_5_fu_309_p3 = ((icmp_ln1547_5_fu_245_p2[0:0] == 1'b1) ? sext_ln737_5_fu_305_p1 : x_V_fu_203_p4);

assign select_ln1547_fu_186_p3 = ((icmp_ln1547_fu_122_p2[0:0] == 1'b1) ? sext_ln737_fu_182_p1 : Ia);

assign select_ln180_5_fu_237_p3 = ((p_Result_22_fu_229_p3[0:0] == 1'b1) ? p_Result_24_fu_219_p4 : x_V_fu_203_p4);

assign select_ln180_fu_114_p3 = ((p_Result_s_fu_106_p3[0:0] == 1'b1) ? p_Result_23_fu_96_p4 : Ia);

assign sext_ln21_fu_156_p1 = sub_ln12_fu_150_p2;

assign sext_ln25_fu_279_p1 = sub_ln12_5_fu_273_p2;

assign sext_ln737_5_fu_305_p1 = $signed(tmp_8_fu_297_p3);

assign sext_ln737_fu_182_p1 = $signed(tmp_s_fu_174_p3);

assign shl_ln5_fu_283_p3 = {{sub_ln12_5_fu_273_p2}, {15'd0}};

assign shl_ln_fu_160_p3 = {{sub_ln12_fu_150_p2}, {15'd0}};

assign sub_ln12_5_fu_273_p2 = (zext_ln12_6_fu_257_p1 - zext_ln12_9_fu_269_p1);

assign sub_ln12_fu_150_p2 = (zext_ln12_fu_134_p1 - zext_ln12_8_fu_146_p1);

assign tmp_35_fu_168_p2 = ($signed(shl_ln_fu_160_p3) - $signed(sext_ln21_fu_156_p1));

assign tmp_38_fu_261_p3 = r_V_21_fu_197_p2[32'd71];

assign tmp_39_fu_291_p2 = ($signed(shl_ln5_fu_283_p3) - $signed(sext_ln25_fu_279_p1));

assign tmp_8_fu_297_p3 = {{tmp_39_fu_291_p2}, {24'd0}};

assign tmp_fu_138_p3 = Ia[32'd47];

assign tmp_s_fu_174_p3 = {{tmp_35_fu_168_p2}, {24'd0}};

assign x_V_fu_203_p4 = {{r_V_21_fu_197_p2[71:24]}};

assign zext_ln12_6_fu_257_p1 = icmp_ln1548_5_fu_251_p2;

assign zext_ln12_8_fu_146_p1 = tmp_fu_138_p3;

assign zext_ln12_9_fu_269_p1 = tmp_38_fu_261_p3;

assign zext_ln12_fu_134_p1 = icmp_ln1548_fu_128_p2;

endmodule //foc_frontend_clarke_direct_ap_fixed_48_24_5_3_0_s
