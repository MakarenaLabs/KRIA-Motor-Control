// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        velocity,
        Ia,
        Ib,
        filt_a,
        filt_b,
        velocity_accum_V_i,
        velocity_accum_V_o,
        velocity_accum_V_o_ap_vld,
        buffer_velocity_V_address0,
        buffer_velocity_V_ce0,
        buffer_velocity_V_we0,
        buffer_velocity_V_d0,
        buffer_velocity_V_q0,
        Y1a_prev_V_i,
        Y1a_prev_V_o,
        Y1a_prev_V_o_ap_vld,
        Y1b_prev_V_i,
        Y1b_prev_V_o,
        Y1b_prev_V_o_ap_vld,
        Y2a_prev_V_i,
        Y2a_prev_V_o,
        Y2a_prev_V_o_ap_vld,
        Y2b_prev_V_i,
        Y2b_prev_V_o,
        Y2b_prev_V_o_ap_vld,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [29:0] velocity;
input  [29:0] Ia;
input  [29:0] Ib;
input  [13:0] filt_a;
input  [12:0] filt_b;
input  [31:0] velocity_accum_V_i;
output  [31:0] velocity_accum_V_o;
output   velocity_accum_V_o_ap_vld;
output  [4:0] buffer_velocity_V_address0;
output   buffer_velocity_V_ce0;
output   buffer_velocity_V_we0;
output  [29:0] buffer_velocity_V_d0;
input  [29:0] buffer_velocity_V_q0;
input  [31:0] Y1a_prev_V_i;
output  [31:0] Y1a_prev_V_o;
output   Y1a_prev_V_o_ap_vld;
input  [31:0] Y1b_prev_V_i;
output  [31:0] Y1b_prev_V_o;
output   Y1b_prev_V_o_ap_vld;
input  [31:0] Y2a_prev_V_i;
output  [31:0] Y2a_prev_V_o;
output   Y2a_prev_V_o_ap_vld;
input  [31:0] Y2b_prev_V_i;
output  [31:0] Y2b_prev_V_o;
output   Y2b_prev_V_o_ap_vld;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] velocity_accum_V_o;
reg velocity_accum_V_o_ap_vld;
reg[4:0] buffer_velocity_V_address0;
reg buffer_velocity_V_ce0;
reg buffer_velocity_V_we0;
reg[29:0] buffer_velocity_V_d0;
reg[31:0] Y1a_prev_V_o;
reg Y1a_prev_V_o_ap_vld;
reg[31:0] Y1b_prev_V_o;
reg Y1b_prev_V_o_ap_vld;
reg[31:0] Y2a_prev_V_o;
reg Y2a_prev_V_o_ap_vld;
reg[31:0] Y2b_prev_V_o;
reg Y2b_prev_V_o_ap_vld;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [29:0] buffer_velocity_V_load_reg_412;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [45:0] zext_ln1171_2_fu_120_p1;
reg   [45:0] zext_ln1171_2_reg_422;
reg  signed [31:0] Ia1_filtered_V_reg_428;
reg  signed [31:0] Ib1_filtered_V_reg_433;
wire    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start;
wire    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done;
wire    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_idle;
wire    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_ready;
wire   [4:0] grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0;
wire    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0;
wire    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0;
wire   [29:0] grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0;
reg    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [31:0] t_V_fu_223_p2;
wire    ap_CS_fsm_state5;
wire   [12:0] r_V_fu_106_p1;
wire   [42:0] zext_ln1171_1_fu_102_p1;
wire   [13:0] r_V_2_fu_124_p1;
wire   [42:0] r_V_fu_106_p2;
wire   [45:0] r_V_2_fu_124_p2;
wire  signed [45:0] sext_ln712_1_fu_130_p1;
wire   [45:0] ret_V_fu_134_p2;
wire   [12:0] r_V_3_fu_154_p1;
wire   [13:0] r_V_5_fu_168_p1;
wire   [42:0] r_V_3_fu_154_p2;
wire   [45:0] r_V_5_fu_168_p2;
wire  signed [45:0] sext_ln712_2_fu_174_p1;
wire   [45:0] ret_V_9_fu_178_p2;
wire  signed [29:0] velocity_cast_fu_206_p0;
wire  signed [31:0] sext_ln712_fu_214_p1;
wire   [31:0] sub_ln712_fu_217_p2;
wire  signed [31:0] velocity_cast_fu_206_p1;
wire   [31:0] sub_ln1201_fu_243_p2;
wire   [26:0] trunc_ln1201_1_fu_249_p4;
wire   [27:0] zext_ln1201_fu_259_p1;
wire   [26:0] trunc_ln1201_2_fu_269_p4;
wire   [0:0] tmp_fu_235_p3;
wire   [27:0] sub_ln1201_1_fu_263_p2;
wire   [27:0] zext_ln1201_1_fu_279_p1;
wire   [27:0] select_ln1201_fu_283_p3;
wire   [12:0] r_V_7_fu_301_p1;
wire   [44:0] zext_ln1171_fu_295_p1;
wire   [13:0] r_V_9_fu_315_p1;
wire   [44:0] r_V_7_fu_301_p2;
wire  signed [45:0] sext_ln712_3_fu_320_p1;
wire   [45:0] r_V_9_fu_315_p2;
wire   [45:0] ret_V_10_fu_324_p2;
wire   [12:0] r_V_11_fu_343_p1;
wire   [13:0] r_V_13_fu_357_p1;
wire   [44:0] r_V_11_fu_343_p2;
wire  signed [45:0] sext_ln712_4_fu_362_p1;
wire   [45:0] r_V_13_fu_357_p2;
wire   [45:0] ret_V_11_fu_366_p2;
wire  signed [31:0] sext_ln1169_fu_291_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
end

foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1 grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start),
    .ap_done(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done),
    .ap_idle(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_idle),
    .ap_ready(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_ready),
    .buffer_velocity_V_address0(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0),
    .buffer_velocity_V_ce0(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0),
    .buffer_velocity_V_we0(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0),
    .buffer_velocity_V_d0(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0),
    .buffer_velocity_V_q0(buffer_velocity_V_q0)
);

foc_frontend_mul_30s_13ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 43 ))
mul_30s_13ns_43_1_1_U2(
    .din0(Ia),
    .din1(r_V_fu_106_p1),
    .dout(r_V_fu_106_p2)
);

foc_frontend_mul_32s_14ns_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 46 ))
mul_32s_14ns_46_1_1_U3(
    .din0(Y1a_prev_V_i),
    .din1(r_V_2_fu_124_p1),
    .dout(r_V_2_fu_124_p2)
);

foc_frontend_mul_30s_13ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 43 ))
mul_30s_13ns_43_1_1_U4(
    .din0(Ib),
    .din1(r_V_3_fu_154_p1),
    .dout(r_V_3_fu_154_p2)
);

foc_frontend_mul_32s_14ns_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 46 ))
mul_32s_14ns_46_1_1_U5(
    .din0(Y1b_prev_V_i),
    .din1(r_V_5_fu_168_p1),
    .dout(r_V_5_fu_168_p2)
);

foc_frontend_mul_32s_13ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 45 ))
mul_32s_13ns_45_1_1_U6(
    .din0(Ia1_filtered_V_reg_428),
    .din1(r_V_7_fu_301_p1),
    .dout(r_V_7_fu_301_p2)
);

foc_frontend_mul_32s_14ns_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 46 ))
mul_32s_14ns_46_1_1_U7(
    .din0(Y2a_prev_V_i),
    .din1(r_V_9_fu_315_p1),
    .dout(r_V_9_fu_315_p2)
);

foc_frontend_mul_32s_13ns_45_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 45 ))
mul_32s_13ns_45_1_1_U8(
    .din0(Ib1_filtered_V_reg_433),
    .din1(r_V_11_fu_343_p1),
    .dout(r_V_11_fu_343_p2)
);

foc_frontend_mul_32s_14ns_46_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 46 ))
mul_32s_14ns_46_1_1_U9(
    .din0(Y2b_prev_V_i),
    .din1(r_V_13_fu_357_p1),
    .dout(r_V_13_fu_357_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_0_preg <= sext_ln1169_fu_291_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_1_preg <= {{ret_V_10_fu_324_p2[45:14]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_2_preg <= {{ret_V_11_fu_366_p2[45:14]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg <= 1'b1;
        end else if ((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_ready == 1'b1)) begin
            grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Ia1_filtered_V_reg_428 <= {{ret_V_fu_134_p2[45:14]}};
        Ib1_filtered_V_reg_433 <= {{ret_V_9_fu_178_p2[45:14]}};
        zext_ln1171_2_reg_422[13 : 0] <= zext_ln1171_2_fu_120_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buffer_velocity_V_load_reg_412 <= buffer_velocity_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Y1a_prev_V_o = {{ret_V_fu_134_p2[45:14]}};
    end else begin
        Y1a_prev_V_o = Y1a_prev_V_i;
    end
end

always @ (*) begin
    if (((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        Y1a_prev_V_o_ap_vld = 1'b1;
    end else begin
        Y1a_prev_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Y1b_prev_V_o = {{ret_V_9_fu_178_p2[45:14]}};
    end else begin
        Y1b_prev_V_o = Y1b_prev_V_i;
    end
end

always @ (*) begin
    if (((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        Y1b_prev_V_o_ap_vld = 1'b1;
    end else begin
        Y1b_prev_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Y2a_prev_V_o = {{ret_V_10_fu_324_p2[45:14]}};
    end else begin
        Y2a_prev_V_o = Y2a_prev_V_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Y2a_prev_V_o_ap_vld = 1'b1;
    end else begin
        Y2a_prev_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Y2b_prev_V_o = {{ret_V_11_fu_366_p2[45:14]}};
    end else begin
        Y2b_prev_V_o = Y2b_prev_V_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Y2b_prev_V_o_ap_vld = 1'b1;
    end else begin
        Y2b_prev_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_0 = sext_ln1169_fu_291_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_1 = {{ret_V_10_fu_324_p2[45:14]}};
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_2 = {{ret_V_11_fu_366_p2[45:14]}};
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_velocity_V_address0 = 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_velocity_V_address0 = 5'd31;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_address0 = grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0;
    end else begin
        buffer_velocity_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        buffer_velocity_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_ce0 = grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0;
    end else begin
        buffer_velocity_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_velocity_V_d0 = velocity;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_d0 = grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0;
    end else begin
        buffer_velocity_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_velocity_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_velocity_V_we0 = grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0;
    end else begin
        buffer_velocity_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        velocity_accum_V_o = t_V_fu_223_p2;
    end else begin
        velocity_accum_V_o = velocity_accum_V_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        velocity_accum_V_o_ap_vld = 1'b1;
    end else begin
        velocity_accum_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start = grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg;

assign r_V_11_fu_343_p1 = zext_ln1171_fu_295_p1;

assign r_V_13_fu_357_p1 = zext_ln1171_2_reg_422;

assign r_V_2_fu_124_p1 = zext_ln1171_2_fu_120_p1;

assign r_V_3_fu_154_p1 = zext_ln1171_1_fu_102_p1;

assign r_V_5_fu_168_p1 = zext_ln1171_2_fu_120_p1;

assign r_V_7_fu_301_p1 = zext_ln1171_fu_295_p1;

assign r_V_9_fu_315_p1 = zext_ln1171_2_reg_422;

assign r_V_fu_106_p1 = zext_ln1171_1_fu_102_p1;

assign ret_V_10_fu_324_p2 = ($signed(sext_ln712_3_fu_320_p1) + $signed(r_V_9_fu_315_p2));

assign ret_V_11_fu_366_p2 = ($signed(sext_ln712_4_fu_362_p1) + $signed(r_V_13_fu_357_p2));

assign ret_V_9_fu_178_p2 = ($signed(r_V_5_fu_168_p2) + $signed(sext_ln712_2_fu_174_p1));

assign ret_V_fu_134_p2 = ($signed(r_V_2_fu_124_p2) + $signed(sext_ln712_1_fu_130_p1));

assign select_ln1201_fu_283_p3 = ((tmp_fu_235_p3[0:0] == 1'b1) ? sub_ln1201_1_fu_263_p2 : zext_ln1201_1_fu_279_p1);

assign sext_ln1169_fu_291_p1 = $signed(select_ln1201_fu_283_p3);

assign sext_ln712_1_fu_130_p1 = $signed(r_V_fu_106_p2);

assign sext_ln712_2_fu_174_p1 = $signed(r_V_3_fu_154_p2);

assign sext_ln712_3_fu_320_p1 = $signed(r_V_7_fu_301_p2);

assign sext_ln712_4_fu_362_p1 = $signed(r_V_11_fu_343_p2);

assign sext_ln712_fu_214_p1 = buffer_velocity_V_load_reg_412;

assign sub_ln1201_1_fu_263_p2 = (28'd0 - zext_ln1201_fu_259_p1);

assign sub_ln1201_fu_243_p2 = (32'd0 - t_V_fu_223_p2);

assign sub_ln712_fu_217_p2 = ($signed(velocity_accum_V_i) - $signed(sext_ln712_fu_214_p1));

assign t_V_fu_223_p2 = ($signed(sub_ln712_fu_217_p2) + $signed(velocity_cast_fu_206_p1));

assign tmp_fu_235_p3 = t_V_fu_223_p2[32'd31];

assign trunc_ln1201_1_fu_249_p4 = {{sub_ln1201_fu_243_p2[31:5]}};

assign trunc_ln1201_2_fu_269_p4 = {{t_V_fu_223_p2[31:5]}};

assign velocity_cast_fu_206_p0 = velocity;

assign velocity_cast_fu_206_p1 = velocity_cast_fu_206_p0;

assign zext_ln1171_1_fu_102_p1 = filt_b;

assign zext_ln1171_2_fu_120_p1 = filt_a;

assign zext_ln1171_fu_295_p1 = filt_b;

assign zext_ln1201_1_fu_279_p1 = trunc_ln1201_2_fu_269_p4;

assign zext_ln1201_fu_259_p1 = trunc_ln1201_1_fu_249_p4;

always @ (posedge ap_clk) begin
    zext_ln1171_2_reg_422[45:14] <= 32'b00000000000000000000000000000000;
end

endmodule //foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_s
