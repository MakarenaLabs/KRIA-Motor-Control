// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_PI_control_ap_fixed_48_24_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ref,
        val_r,
        KP,
        KI,
        ierr_V_i,
        ierr_V_o,
        ierr_V_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] ref;
input  [47:0] val_r;
input  [37:0] KP;
input  [28:0] KI;
input  [47:0] ierr_V_i;
output  [47:0] ierr_V_o;
output   ierr_V_o_ap_vld;
output  [47:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[47:0] ierr_V_o;
reg ierr_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [84:0] r_V_fu_112_p2;
reg   [84:0] r_V_reg_306;
wire   [75:0] r_V_23_fu_126_p2;
reg   [75:0] r_V_23_reg_311;
wire  signed [47:0] add_ln712_fu_92_p2;
wire  signed [47:0] err_V_fu_82_p2;
wire    ap_CS_fsm_state2;
wire  signed [84:0] sext_ln1245_fu_132_p1;
wire   [84:0] ret_V_fu_135_p2;
wire   [79:0] trunc_ln1245_fu_140_p1;
wire   [79:0] sub_ln1201_fu_152_p2;
wire   [71:0] trunc_ln1201_3_fu_158_p4;
wire   [0:0] tmp_fu_144_p3;
wire   [71:0] sub_ln1201_2_fu_168_p2;
wire   [71:0] trunc_ln1201_4_fu_174_p4;
wire   [71:0] select_ln1201_fu_184_p3;
wire   [47:0] x_V_fu_192_p4;
wire   [47:0] p_Val2_s_fu_202_p2;
wire   [0:0] p_Result_s_fu_218_p3;
wire   [47:0] p_Result_27_fu_208_p4;
wire   [47:0] select_ln180_fu_226_p3;
wire   [0:0] icmp_ln1548_fu_240_p2;
wire   [0:0] tmp_45_fu_250_p3;
wire   [1:0] zext_ln12_fu_246_p1;
wire   [1:0] zext_ln12_10_fu_258_p1;
wire  signed [1:0] sub_ln12_fu_262_p2;
wire   [16:0] shl_ln_fu_272_p3;
wire  signed [16:0] sext_ln23_fu_268_p1;
wire   [16:0] tmp_46_fu_280_p2;
wire   [40:0] tmp_s_fu_286_p3;
wire   [0:0] icmp_ln1547_fu_234_p2;
wire  signed [47:0] sext_ln737_fu_294_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

foc_frontend_mul_38s_48s_85_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 38 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 85 ))
mul_38s_48s_85_1_1_U38(
    .din0(KP),
    .din1(err_V_fu_82_p2),
    .dout(r_V_fu_112_p2)
);

foc_frontend_mul_29s_48s_76_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 76 ))
mul_29s_48s_76_1_1_U39(
    .din0(KI),
    .din1(add_ln712_fu_92_p2),
    .dout(r_V_23_fu_126_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        r_V_23_reg_311 <= r_V_23_fu_126_p2;
        r_V_reg_306 <= r_V_fu_112_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ierr_V_o = add_ln712_fu_92_p2;
    end else begin
        ierr_V_o = ierr_V_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ierr_V_o_ap_vld = 1'b1;
    end else begin
        ierr_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln712_fu_92_p2 = ($signed(ierr_V_i) + $signed(err_V_fu_82_p2));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((icmp_ln1547_fu_234_p2[0:0] == 1'b1) ? sext_ln737_fu_294_p1 : x_V_fu_192_p4);

assign err_V_fu_82_p2 = (ref - val_r);

assign icmp_ln1547_fu_234_p2 = (($signed(select_ln180_fu_226_p3) > $signed(48'd549739036672)) ? 1'b1 : 1'b0);

assign icmp_ln1548_fu_240_p2 = (($signed(x_V_fu_192_p4) > $signed(48'd0)) ? 1'b1 : 1'b0);

assign p_Result_27_fu_208_p4 = {|(1'd0), p_Val2_s_fu_202_p2[47 - 1:0]};

assign p_Result_s_fu_218_p3 = select_ln1201_fu_184_p3[32'd71];

assign p_Val2_s_fu_202_p2 = (48'd0 - x_V_fu_192_p4);

assign ret_V_fu_135_p2 = ($signed(sext_ln1245_fu_132_p1) + $signed(r_V_reg_306));

assign select_ln1201_fu_184_p3 = ((tmp_fu_144_p3[0:0] == 1'b1) ? sub_ln1201_2_fu_168_p2 : trunc_ln1201_4_fu_174_p4);

assign select_ln180_fu_226_p3 = ((p_Result_s_fu_218_p3[0:0] == 1'b1) ? p_Result_27_fu_208_p4 : x_V_fu_192_p4);

assign sext_ln1245_fu_132_p1 = $signed(r_V_23_reg_311);

assign sext_ln23_fu_268_p1 = sub_ln12_fu_262_p2;

assign sext_ln737_fu_294_p1 = $signed(tmp_s_fu_286_p3);

assign shl_ln_fu_272_p3 = {{sub_ln12_fu_262_p2}, {15'd0}};

assign sub_ln1201_2_fu_168_p2 = (72'd0 - trunc_ln1201_3_fu_158_p4);

assign sub_ln1201_fu_152_p2 = (80'd0 - trunc_ln1245_fu_140_p1);

assign sub_ln12_fu_262_p2 = (zext_ln12_fu_246_p1 - zext_ln12_10_fu_258_p1);

assign tmp_45_fu_250_p3 = select_ln1201_fu_184_p3[32'd71];

assign tmp_46_fu_280_p2 = ($signed(shl_ln_fu_272_p3) - $signed(sext_ln23_fu_268_p1));

assign tmp_fu_144_p3 = ret_V_fu_135_p2[32'd84];

assign tmp_s_fu_286_p3 = {{tmp_46_fu_280_p2}, {24'd0}};

assign trunc_ln1201_3_fu_158_p4 = {{sub_ln1201_fu_152_p2[79:8]}};

assign trunc_ln1201_4_fu_174_p4 = {{ret_V_fu_135_p2[79:8]}};

assign trunc_ln1245_fu_140_p1 = ret_V_fu_135_p2[79:0];

assign x_V_fu_192_p4 = {{select_ln1201_fu_184_p3[71:24]}};

assign zext_ln12_10_fu_258_p1 = tmp_45_fu_250_p3;

assign zext_ln12_fu_246_p1 = icmp_ln1548_fu_240_p2;

endmodule //foc_frontend_PI_control_ap_fixed_48_24_5_3_0_s
