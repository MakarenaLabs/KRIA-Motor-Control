// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_frontend_manual_control (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TLAST,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        B_TKEEP,
        B_TSTRB,
        B_TLAST,
        control_address0,
        control_ce0,
        control_q0,
        logger_address0,
        logger_ce0,
        logger_we0,
        logger_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [79:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [9:0] A_TKEEP;
input  [9:0] A_TSTRB;
input  [0:0] A_TLAST;
output  [63:0] B_TDATA;
output   B_TVALID;
input   B_TREADY;
output  [7:0] B_TKEEP;
output  [7:0] B_TSTRB;
output  [0:0] B_TLAST;
output  [2:0] control_address0;
output   control_ce0;
input  [31:0] control_q0;
output  [3:0] logger_address0;
output   logger_ce0;
output   logger_we0;
output  [31:0] logger_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_TREADY;
reg B_TVALID;
reg[2:0] control_address0;
reg control_ce0;
reg[3:0] logger_address0;
reg logger_ce0;
reg logger_we0;
reg[31:0] logger_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_TDATA_blk_n;
reg    B_TDATA_blk_n;
wire    ap_CS_fsm_state11;
reg   [15:0] Ib_reg_811;
reg   [15:0] RPM_reg_816;
wire  signed [31:0] sext_ln37_fu_374_p1;
reg   [31:0] control_load_reg_836;
wire    ap_CS_fsm_state2;
wire  signed [31:0] sext_ln45_fu_384_p1;
reg   [31:0] control_load_2_reg_851;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_330_p1;
reg   [31:0] conv_reg_861;
wire    ap_CS_fsm_state4;
reg   [31:0] control_load_3_reg_866;
wire    ap_CS_fsm_state5;
wire   [9:0] result_V_20_fu_530_p3;
reg   [9:0] result_V_20_reg_881;
wire  signed [31:0] sext_ln46_fu_538_p1;
wire    ap_CS_fsm_state6;
wire   [31:0] Vd_fu_542_p1;
reg   [31:0] Vd_reg_891;
wire   [31:0] Vq_fu_546_p1;
reg   [31:0] Vq_reg_896;
reg   [31:0] Valpha_reg_901;
wire    ap_CS_fsm_state7;
reg   [31:0] Vbeta_reg_906;
wire   [31:0] grp_fu_326_p2;
reg   [31:0] dc_reg_912;
wire    ap_CS_fsm_state8;
wire   [15:0] Theta_4_fu_720_p3;
reg   [15:0] Theta_4_reg_917;
wire    ap_CS_fsm_state9;
reg   [31:0] Va_reg_924;
reg   [31:0] Vb_reg_930;
reg   [31:0] Vc_reg_936;
wire  signed [31:0] sext_ln47_fu_762_p1;
wire    ap_CS_fsm_state10;
wire    grp_park_inverse_float_s_fu_302_ap_start;
wire    grp_park_inverse_float_s_fu_302_ap_done;
wire    grp_park_inverse_float_s_fu_302_ap_idle;
wire    grp_park_inverse_float_s_fu_302_ap_ready;
wire   [31:0] grp_park_inverse_float_s_fu_302_ap_return_0;
wire   [31:0] grp_park_inverse_float_s_fu_302_ap_return_1;
wire    grp_clarke_inverse_float_s_fu_313_ap_start;
wire    grp_clarke_inverse_float_s_fu_313_ap_done;
wire    grp_clarke_inverse_float_s_fu_313_ap_idle;
wire    grp_clarke_inverse_float_s_fu_313_ap_ready;
wire   [31:0] grp_clarke_inverse_float_s_fu_313_ap_return_0;
wire   [31:0] grp_clarke_inverse_float_s_fu_313_ap_return_1;
wire   [31:0] grp_clarke_inverse_float_s_fu_313_ap_return_2;
wire    grp_SVPWM_float_s_fu_319_ap_start;
wire    grp_SVPWM_float_s_fu_319_ap_done;
wire    grp_SVPWM_float_s_fu_319_ap_idle;
wire    grp_SVPWM_float_s_fu_319_ap_ready;
wire   [15:0] grp_SVPWM_float_s_fu_319_ap_return_0;
wire   [15:0] grp_SVPWM_float_s_fu_319_ap_return_1;
wire   [15:0] grp_SVPWM_float_s_fu_319_ap_return_2;
reg    grp_park_inverse_float_s_fu_302_ap_start_reg;
reg    grp_clarke_inverse_float_s_fu_313_ap_start_reg;
reg    grp_SVPWM_float_s_fu_319_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    ap_block_state1;
wire   [31:0] bitcast_ln44_fu_388_p1;
wire   [31:0] bitcast_ln45_fu_397_p1;
wire   [31:0] bitcast_ln59_fu_558_p1;
wire   [31:0] bitcast_ln60_fu_563_p1;
wire   [31:0] bitcast_ln46_fu_728_p1;
wire   [31:0] bitcast_ln66_fu_767_p1;
wire   [31:0] bitcast_ln67_fu_771_p1;
wire   [31:0] bitcast_ln68_fu_802_p1;
wire   [31:0] bitcast_ln47_fu_806_p1;
wire   [31:0] grp_fu_326_p1;
reg  signed [31:0] grp_fu_330_p0;
wire  signed [31:0] grp_fu_333_p0;
wire   [15:0] Angle_fu_364_p4;
wire   [15:0] Ia_fu_340_p1;
wire   [31:0] grp_fu_333_p1;
wire   [22:0] tmp_34_fu_420_p1;
wire   [24:0] mantissa_3_fu_424_p4;
wire   [7:0] tmp_33_fu_410_p4;
wire   [8:0] zext_ln344_3_fu_438_p1;
wire   [8:0] add_ln344_3_fu_442_p2;
wire   [7:0] sub_ln1364_1_fu_456_p2;
wire   [0:0] isNeg_3_fu_448_p3;
wire  signed [8:0] sext_ln1364_3_fu_462_p1;
wire   [8:0] ush_3_fu_466_p3;
wire  signed [31:0] sext_ln1340_3_fu_474_p1;
wire   [62:0] zext_ln15_3_fu_434_p1;
wire   [62:0] zext_ln1340_3_fu_478_p1;
wire   [62:0] r_V_7_fu_482_p2;
wire   [0:0] tmp_30_fu_494_p3;
wire   [62:0] r_V_8_fu_488_p2;
wire   [9:0] zext_ln671_3_fu_502_p1;
wire   [9:0] tmp_9_fu_506_p4;
wire   [9:0] val_3_fu_516_p3;
wire   [0:0] p_Result_5_fu_402_p3;
wire   [9:0] result_V_19_fu_524_p2;
wire   [31:0] data_V_fu_567_p1;
wire   [22:0] tmp_32_fu_588_p1;
wire   [24:0] mantissa_fu_592_p4;
wire   [7:0] tmp_31_fu_578_p4;
wire   [8:0] zext_ln344_fu_606_p1;
wire   [8:0] add_ln344_fu_610_p2;
wire   [7:0] sub_ln1364_fu_624_p2;
wire   [0:0] isNeg_fu_616_p3;
wire  signed [8:0] sext_ln1364_fu_630_p1;
wire   [8:0] ush_fu_634_p3;
wire  signed [31:0] sext_ln1340_fu_642_p1;
wire   [62:0] zext_ln15_fu_602_p1;
wire   [62:0] zext_ln1340_fu_646_p1;
wire   [62:0] r_V_fu_650_p2;
wire   [0:0] tmp_fu_662_p3;
wire   [62:0] r_V_6_fu_656_p2;
wire   [15:0] zext_ln671_fu_670_p1;
wire   [15:0] tmp_7_fu_674_p4;
wire   [15:0] val_fu_684_p3;
wire   [0:0] p_Result_s_fu_570_p3;
wire   [15:0] result_V_16_fu_692_p2;
wire   [15:0] result_V_fu_698_p3;
wire   [0:0] tmp_24_fu_706_p3;
wire   [15:0] add_ln38_fu_714_p2;
wire   [0:0] icmp_ln39_fu_745_p2;
wire   [15:0] add_ln39_fu_750_p2;
wire   [15:0] Theta_fu_755_p3;
wire   [47:0] pwmStreamObj_data_V_fu_787_p4;
reg    grp_fu_326_ce;
reg    grp_fu_330_ce;
reg    grp_fu_333_ce;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_park_inverse_float_s_fu_302_ap_start_reg = 1'b0;
#0 grp_clarke_inverse_float_s_fu_313_ap_start_reg = 1'b0;
#0 grp_SVPWM_float_s_fu_319_ap_start_reg = 1'b0;
end

foc_frontend_park_inverse_float_s grp_park_inverse_float_s_fu_302(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_park_inverse_float_s_fu_302_ap_start),
    .ap_done(grp_park_inverse_float_s_fu_302_ap_done),
    .ap_idle(grp_park_inverse_float_s_fu_302_ap_idle),
    .ap_ready(grp_park_inverse_float_s_fu_302_ap_ready),
    .Vd(Vd_reg_891),
    .Vq(Vq_reg_896),
    .angle(result_V_20_reg_881),
    .ap_return_0(grp_park_inverse_float_s_fu_302_ap_return_0),
    .ap_return_1(grp_park_inverse_float_s_fu_302_ap_return_1)
);

foc_frontend_clarke_inverse_float_s grp_clarke_inverse_float_s_fu_313(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_clarke_inverse_float_s_fu_313_ap_start),
    .ap_done(grp_clarke_inverse_float_s_fu_313_ap_done),
    .ap_idle(grp_clarke_inverse_float_s_fu_313_ap_idle),
    .ap_ready(grp_clarke_inverse_float_s_fu_313_ap_ready),
    .Valpha(Valpha_reg_901),
    .Vbeta(Vbeta_reg_906),
    .ap_return_0(grp_clarke_inverse_float_s_fu_313_ap_return_0),
    .ap_return_1(grp_clarke_inverse_float_s_fu_313_ap_return_1),
    .ap_return_2(grp_clarke_inverse_float_s_fu_313_ap_return_2)
);

foc_frontend_SVPWM_float_s grp_SVPWM_float_s_fu_319(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SVPWM_float_s_fu_319_ap_start),
    .ap_done(grp_SVPWM_float_s_fu_319_ap_done),
    .ap_idle(grp_SVPWM_float_s_fu_319_ap_idle),
    .ap_ready(grp_SVPWM_float_s_fu_319_ap_ready),
    .Va(Va_reg_924),
    .Vb(Vb_reg_930),
    .Vc(Vc_reg_936),
    .ap_return_0(grp_SVPWM_float_s_fu_319_ap_return_0),
    .ap_return_1(grp_SVPWM_float_s_fu_319_ap_return_1),
    .ap_return_2(grp_SVPWM_float_s_fu_319_ap_return_2)
);

foc_frontend_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_861),
    .din1(grp_fu_326_p1),
    .ce(grp_fu_326_ce),
    .dout(grp_fu_326_p2)
);

foc_frontend_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_330_p0),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p1)
);

foc_frontend_sitofp_32s_32_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32s_32_4_no_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SVPWM_float_s_fu_319_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_SVPWM_float_s_fu_319_ap_start_reg <= 1'b1;
        end else if ((grp_SVPWM_float_s_fu_319_ap_ready == 1'b1)) begin
            grp_SVPWM_float_s_fu_319_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_clarke_inverse_float_s_fu_313_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_clarke_inverse_float_s_fu_313_ap_start_reg <= 1'b1;
        end else if ((grp_clarke_inverse_float_s_fu_313_ap_ready == 1'b1)) begin
            grp_clarke_inverse_float_s_fu_313_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_park_inverse_float_s_fu_302_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_park_inverse_float_s_fu_302_ap_start_reg <= 1'b1;
        end else if ((grp_park_inverse_float_s_fu_302_ap_ready == 1'b1)) begin
            grp_park_inverse_float_s_fu_302_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        Ib_reg_811 <= {{A_TDATA[31:16]}};
        RPM_reg_816 <= {{A_TDATA[63:48]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Theta_4_reg_917 <= Theta_4_fu_720_p3;
        Va_reg_924 <= grp_clarke_inverse_float_s_fu_313_ap_return_0;
        Vb_reg_930 <= grp_clarke_inverse_float_s_fu_313_ap_return_1;
        Vc_reg_936 <= grp_clarke_inverse_float_s_fu_313_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Valpha_reg_901 <= grp_park_inverse_float_s_fu_302_ap_return_0;
        Vbeta_reg_906 <= grp_park_inverse_float_s_fu_302_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Vd_reg_891 <= Vd_fu_542_p1;
        Vq_reg_896 <= Vq_fu_546_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        control_load_2_reg_851 <= control_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        control_load_3_reg_866 <= control_q0;
        conv_reg_861 <= grp_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        control_load_reg_836 <= control_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dc_reg_912 <= grp_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        result_V_20_reg_881 <= result_V_20_fu_530_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        A_TDATA_blk_n = A_TVALID;
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == A_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_TREADY = 1'b1;
    end else begin
        A_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        B_TDATA_blk_n = B_TREADY;
    end else begin
        B_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_TREADY) | (grp_SVPWM_float_s_fu_319_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        B_TVALID = 1'b1;
    end else begin
        B_TVALID = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == B_TREADY) | (grp_SVPWM_float_s_fu_319_ap_done == 1'b0))) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == A_TVALID) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_park_inverse_float_s_fu_302_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_clarke_inverse_float_s_fu_313_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        control_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        control_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        control_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        control_address0 = 64'd1;
    end else begin
        control_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((1'b0 == A_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        control_ce0 = 1'b1;
    end else begin
        control_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state7) & (grp_park_inverse_float_s_fu_302_ap_done == 1'b1)))) begin
        grp_fu_326_ce = 1'b1;
    end else begin
        grp_fu_326_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ((1'b0 == B_TREADY) | (grp_SVPWM_float_s_fu_319_ap_done == 1'b0))) | ((1'b1 == ap_CS_fsm_state1) & ((1'b0 == A_TVALID) | (ap_start == 1'b0))) | ((1'b1 == ap_CS_fsm_state9) & (grp_clarke_inverse_float_s_fu_313_ap_done == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & (grp_park_inverse_float_s_fu_302_ap_done == 1'b0)))) begin
        grp_fu_330_ce = 1'b0;
    end else begin
        grp_fu_330_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_330_p0 = sext_ln47_fu_762_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_330_p0 = sext_ln46_fu_538_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_330_p0 = sext_ln45_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_330_p0 = sext_ln37_fu_374_p1;
    end else begin
        grp_fu_330_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((1'b0 == A_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        logger_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        logger_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        logger_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        logger_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        logger_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        logger_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        logger_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        logger_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        logger_address0 = 64'd1;
    end else begin
        logger_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (~((1'b0 == B_TREADY) | (grp_SVPWM_float_s_fu_319_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state9) & (grp_clarke_inverse_float_s_fu_313_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (grp_park_inverse_float_s_fu_302_ap_done == 1'b1)))) begin
        logger_ce0 = 1'b1;
    end else begin
        logger_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        logger_d0 = bitcast_ln47_fu_806_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        logger_d0 = bitcast_ln68_fu_802_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        logger_d0 = bitcast_ln67_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        logger_d0 = bitcast_ln66_fu_767_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        logger_d0 = bitcast_ln46_fu_728_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        logger_d0 = bitcast_ln60_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        logger_d0 = bitcast_ln59_fu_558_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        logger_d0 = bitcast_ln45_fu_397_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        logger_d0 = bitcast_ln44_fu_388_p1;
    end else begin
        logger_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (~((1'b0 == B_TREADY) | (grp_SVPWM_float_s_fu_319_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state9) & (grp_clarke_inverse_float_s_fu_313_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (grp_park_inverse_float_s_fu_302_ap_done == 1'b1)))) begin
        logger_we0 = 1'b1;
    end else begin
        logger_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == A_TVALID) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_park_inverse_float_s_fu_302_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_clarke_inverse_float_s_fu_313_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~((1'b0 == B_TREADY) | (grp_SVPWM_float_s_fu_319_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Angle_fu_364_p4 = {{A_TDATA[79:64]}};

assign B_TDATA = pwmStreamObj_data_V_fu_787_p4;

assign B_TKEEP = 8'd0;

assign B_TLAST = 1'd0;

assign B_TSTRB = 8'd0;

assign Ia_fu_340_p1 = A_TDATA[15:0];

assign Theta_4_fu_720_p3 = ((tmp_24_fu_706_p3[0:0] == 1'b1) ? add_ln38_fu_714_p2 : result_V_fu_698_p3);

assign Theta_fu_755_p3 = ((icmp_ln39_fu_745_p2[0:0] == 1'b1) ? add_ln39_fu_750_p2 : Theta_4_reg_917);

assign Vd_fu_542_p1 = control_load_2_reg_851;

assign Vq_fu_546_p1 = control_load_3_reg_866;

assign add_ln344_3_fu_442_p2 = ($signed(zext_ln344_3_fu_438_p1) + $signed(9'd385));

assign add_ln344_fu_610_p2 = ($signed(zext_ln344_fu_606_p1) + $signed(9'd385));

assign add_ln38_fu_714_p2 = (result_V_fu_698_p3 + 16'd1000);

assign add_ln39_fu_750_p2 = ($signed(Theta_4_reg_917) + $signed(16'd64536));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((1'b0 == A_TVALID) | (ap_start == 1'b0));
end

assign bitcast_ln44_fu_388_p1 = grp_fu_333_p1;

assign bitcast_ln45_fu_397_p1 = grp_fu_330_p1;

assign bitcast_ln46_fu_728_p1 = grp_fu_330_p1;

assign bitcast_ln47_fu_806_p1 = grp_fu_330_p1;

assign bitcast_ln59_fu_558_p1 = grp_park_inverse_float_s_fu_302_ap_return_0;

assign bitcast_ln60_fu_563_p1 = Vbeta_reg_906;

assign bitcast_ln66_fu_767_p1 = Va_reg_924;

assign bitcast_ln67_fu_771_p1 = Vb_reg_930;

assign bitcast_ln68_fu_802_p1 = Vc_reg_936;

assign data_V_fu_567_p1 = dc_reg_912;

assign grp_SVPWM_float_s_fu_319_ap_start = grp_SVPWM_float_s_fu_319_ap_start_reg;

assign grp_clarke_inverse_float_s_fu_313_ap_start = grp_clarke_inverse_float_s_fu_313_ap_start_reg;

assign grp_fu_326_p1 = control_load_reg_836;

assign grp_fu_333_p0 = $signed(Ia_fu_340_p1);

assign grp_park_inverse_float_s_fu_302_ap_start = grp_park_inverse_float_s_fu_302_ap_start_reg;

assign icmp_ln39_fu_745_p2 = (($signed(Theta_4_reg_917) > $signed(16'd999)) ? 1'b1 : 1'b0);

assign isNeg_3_fu_448_p3 = add_ln344_3_fu_442_p2[32'd8];

assign isNeg_fu_616_p3 = add_ln344_fu_610_p2[32'd8];

assign mantissa_3_fu_424_p4 = {{{{1'd1}, {tmp_34_fu_420_p1}}}, {1'd0}};

assign mantissa_fu_592_p4 = {{{{1'd1}, {tmp_32_fu_588_p1}}}, {1'd0}};

assign p_Result_5_fu_402_p3 = control_q0[32'd31];

assign p_Result_s_fu_570_p3 = data_V_fu_567_p1[32'd31];

assign pwmStreamObj_data_V_fu_787_p4 = {{{grp_SVPWM_float_s_fu_319_ap_return_2}, {grp_SVPWM_float_s_fu_319_ap_return_1}}, {grp_SVPWM_float_s_fu_319_ap_return_0}};

assign r_V_6_fu_656_p2 = zext_ln15_fu_602_p1 << zext_ln1340_fu_646_p1;

assign r_V_7_fu_482_p2 = zext_ln15_3_fu_434_p1 >> zext_ln1340_3_fu_478_p1;

assign r_V_8_fu_488_p2 = zext_ln15_3_fu_434_p1 << zext_ln1340_3_fu_478_p1;

assign r_V_fu_650_p2 = zext_ln15_fu_602_p1 >> zext_ln1340_fu_646_p1;

assign result_V_16_fu_692_p2 = (16'd0 - val_fu_684_p3);

assign result_V_19_fu_524_p2 = (10'd0 - val_3_fu_516_p3);

assign result_V_20_fu_530_p3 = ((p_Result_5_fu_402_p3[0:0] == 1'b1) ? result_V_19_fu_524_p2 : val_3_fu_516_p3);

assign result_V_fu_698_p3 = ((p_Result_s_fu_570_p3[0:0] == 1'b1) ? result_V_16_fu_692_p2 : val_fu_684_p3);

assign sext_ln1340_3_fu_474_p1 = $signed(ush_3_fu_466_p3);

assign sext_ln1340_fu_642_p1 = $signed(ush_fu_634_p3);

assign sext_ln1364_3_fu_462_p1 = $signed(sub_ln1364_1_fu_456_p2);

assign sext_ln1364_fu_630_p1 = $signed(sub_ln1364_fu_624_p2);

assign sext_ln37_fu_374_p1 = $signed(Angle_fu_364_p4);

assign sext_ln45_fu_384_p1 = $signed(Ib_reg_811);

assign sext_ln46_fu_538_p1 = $signed(RPM_reg_816);

assign sext_ln47_fu_762_p1 = $signed(Theta_fu_755_p3);

assign sub_ln1364_1_fu_456_p2 = (8'd127 - tmp_33_fu_410_p4);

assign sub_ln1364_fu_624_p2 = (8'd127 - tmp_31_fu_578_p4);

assign tmp_24_fu_706_p3 = result_V_fu_698_p3[32'd15];

assign tmp_30_fu_494_p3 = r_V_7_fu_482_p2[32'd24];

assign tmp_31_fu_578_p4 = {{data_V_fu_567_p1[30:23]}};

assign tmp_32_fu_588_p1 = data_V_fu_567_p1[22:0];

assign tmp_33_fu_410_p4 = {{control_q0[30:23]}};

assign tmp_34_fu_420_p1 = control_q0[22:0];

assign tmp_7_fu_674_p4 = {{r_V_6_fu_656_p2[39:24]}};

assign tmp_9_fu_506_p4 = {{r_V_8_fu_488_p2[33:24]}};

assign tmp_fu_662_p3 = r_V_fu_650_p2[32'd24];

assign ush_3_fu_466_p3 = ((isNeg_3_fu_448_p3[0:0] == 1'b1) ? sext_ln1364_3_fu_462_p1 : add_ln344_3_fu_442_p2);

assign ush_fu_634_p3 = ((isNeg_fu_616_p3[0:0] == 1'b1) ? sext_ln1364_fu_630_p1 : add_ln344_fu_610_p2);

assign val_3_fu_516_p3 = ((isNeg_3_fu_448_p3[0:0] == 1'b1) ? zext_ln671_3_fu_502_p1 : tmp_9_fu_506_p4);

assign val_fu_684_p3 = ((isNeg_fu_616_p3[0:0] == 1'b1) ? zext_ln671_fu_670_p1 : tmp_7_fu_674_p4);

assign zext_ln1340_3_fu_478_p1 = $unsigned(sext_ln1340_3_fu_474_p1);

assign zext_ln1340_fu_646_p1 = $unsigned(sext_ln1340_fu_642_p1);

assign zext_ln15_3_fu_434_p1 = mantissa_3_fu_424_p4;

assign zext_ln15_fu_602_p1 = mantissa_fu_592_p4;

assign zext_ln344_3_fu_438_p1 = tmp_33_fu_410_p4;

assign zext_ln344_fu_606_p1 = tmp_31_fu_578_p4;

assign zext_ln671_3_fu_502_p1 = tmp_30_fu_494_p3;

assign zext_ln671_fu_670_p1 = tmp_fu_662_p3;

endmodule //foc_frontend_manual_control
