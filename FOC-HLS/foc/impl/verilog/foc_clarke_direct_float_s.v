// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foc_clarke_direct_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Ia,
        Ib,
        Ialpha,
        Ialpha_ap_vld,
        Ibeta,
        Ibeta_ap_vld,
        grp_fu_699_p_din0,
        grp_fu_699_p_din1,
        grp_fu_699_p_opcode,
        grp_fu_699_p_dout0,
        grp_fu_699_p_ce,
        grp_fu_2056_p_din0,
        grp_fu_2056_p_din1,
        grp_fu_2056_p_dout0,
        grp_fu_2056_p_ce,
        grp_fu_2076_p_din0,
        grp_fu_2076_p_dout0,
        grp_fu_2076_p_ce,
        grp_fu_709_p_din0,
        grp_fu_709_p_din1,
        grp_fu_709_p_opcode,
        grp_fu_709_p_dout0,
        grp_fu_709_p_ce,
        grp_fu_2079_p_din0,
        grp_fu_2079_p_din1,
        grp_fu_2079_p_opcode,
        grp_fu_2079_p_dout0,
        grp_fu_2079_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Ia;
input  [31:0] Ib;
output  [31:0] Ialpha;
output   Ialpha_ap_vld;
output  [31:0] Ibeta;
output   Ibeta_ap_vld;
output  [31:0] grp_fu_699_p_din0;
output  [31:0] grp_fu_699_p_din1;
output  [0:0] grp_fu_699_p_opcode;
input  [31:0] grp_fu_699_p_dout0;
output   grp_fu_699_p_ce;
output  [31:0] grp_fu_2056_p_din0;
output  [31:0] grp_fu_2056_p_din1;
input  [31:0] grp_fu_2056_p_dout0;
output   grp_fu_2056_p_ce;
output  [31:0] grp_fu_2076_p_din0;
input  [31:0] grp_fu_2076_p_dout0;
output   grp_fu_2076_p_ce;
output  [31:0] grp_fu_709_p_din0;
output  [31:0] grp_fu_709_p_din1;
output  [4:0] grp_fu_709_p_opcode;
input  [0:0] grp_fu_709_p_dout0;
output   grp_fu_709_p_ce;
output  [31:0] grp_fu_2079_p_din0;
output  [31:0] grp_fu_2079_p_din1;
output  [4:0] grp_fu_2079_p_opcode;
input  [0:0] grp_fu_2079_p_dout0;
output   grp_fu_2079_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Ialpha_ap_vld;
reg Ibeta_ap_vld;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_71;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
wire   [31:0] bitcast_ln354_fu_89_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln16_fu_120_p2;
reg   [0:0] or_ln16_reg_319;
reg   [0:0] tmp_29_reg_326;
reg   [0:0] tmp_30_reg_331;
reg   [0:0] tmp_s_reg_336;
wire  signed [31:0] sext_ln19_1_fu_166_p1;
reg   [31:0] Ib_temp_reg_346;
wire    ap_CS_fsm_state7;
wire   [31:0] bitcast_ln354_3_fu_200_p1;
wire    ap_CS_fsm_state12;
wire   [0:0] or_ln25_fu_231_p2;
reg   [0:0] or_ln25_reg_356;
reg   [0:0] tmp_33_reg_363;
reg   [0:0] tmp_34_reg_368;
reg   [0:0] tmp_32_reg_373;
wire    ap_CS_fsm_state13;
wire  signed [31:0] sext_ln26_1_fu_277_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state16;
reg   [31:0] grp_fu_48_p0;
reg   [31:0] grp_fu_48_p1;
wire    ap_CS_fsm_state8;
reg  signed [31:0] grp_fu_55_p0;
reg   [31:0] grp_fu_58_p0;
reg   [31:0] grp_fu_58_p1;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_64_p0;
wire   [31:0] data_V_fu_78_p1;
wire   [30:0] p_Result_s_fu_81_p1;
wire   [31:0] zext_ln368_fu_85_p1;
wire   [7:0] tmp_fu_94_p4;
wire   [22:0] trunc_ln16_fu_104_p1;
wire   [0:0] icmp_ln16_1_fu_114_p2;
wire   [0:0] icmp_ln16_fu_108_p2;
wire   [0:0] and_ln12_fu_126_p2;
wire   [0:0] and_ln12_12_fu_134_p2;
wire   [1:0] zext_ln12_fu_130_p1;
wire   [1:0] zext_ln12_12_fu_138_p1;
wire  signed [1:0] sub_ln12_fu_142_p2;
wire   [16:0] shl_ln_fu_152_p3;
wire  signed [16:0] sext_ln19_fu_148_p1;
wire   [16:0] sub_ln19_fu_160_p2;
wire   [0:0] and_ln16_fu_171_p2;
wire   [31:0] data_V_7_fu_188_p1;
wire   [30:0] p_Result_7_fu_192_p1;
wire   [31:0] zext_ln368_5_fu_196_p1;
wire   [7:0] tmp_31_fu_205_p4;
wire   [22:0] trunc_ln25_fu_215_p1;
wire   [0:0] icmp_ln25_1_fu_225_p2;
wire   [0:0] icmp_ln25_fu_219_p2;
wire   [0:0] and_ln12_13_fu_237_p2;
wire   [0:0] and_ln12_14_fu_245_p2;
wire   [1:0] zext_ln12_13_fu_241_p1;
wire   [1:0] zext_ln12_14_fu_249_p1;
wire  signed [1:0] sub_ln12_5_fu_253_p2;
wire   [16:0] shl_ln5_fu_263_p3;
wire  signed [16:0] sext_ln26_fu_259_p1;
wire   [16:0] sub_ln26_fu_271_p2;
wire   [0:0] and_ln25_fu_282_p2;
reg   [4:0] grp_fu_58_opcode;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Ib_temp_reg_346 <= grp_fu_699_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        or_ln16_reg_319 <= or_ln16_fu_120_p2;
        tmp_29_reg_326 <= grp_fu_709_p_dout0;
        tmp_30_reg_331 <= grp_fu_2079_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        or_ln25_reg_356 <= or_ln25_fu_231_p2;
        tmp_33_reg_363 <= grp_fu_709_p_dout0;
        tmp_34_reg_368 <= grp_fu_2079_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_71 <= grp_fu_2056_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_32_reg_373 <= grp_fu_709_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_s_reg_336 <= grp_fu_709_p_dout0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Ialpha_ap_vld = 1'b1;
    end else begin
        Ialpha_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Ibeta_ap_vld = 1'b1;
    end else begin
        Ibeta_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_48_p0 = Ib_temp_reg_346;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_48_p0 = Ib;
    end else begin
        grp_fu_48_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_48_p1 = 32'd1058262326;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_48_p1 = 32'd1073741824;
    end else begin
        grp_fu_48_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_55_p0 = sext_ln26_1_fu_277_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_55_p0 = sext_ln19_1_fu_166_p1;
    end else begin
        grp_fu_55_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_58_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_58_opcode = 5'd2;
    end else begin
        grp_fu_58_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_58_p0 = bitcast_ln354_3_fu_200_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_58_p0 = reg_71;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_58_p0 = bitcast_ln354_fu_89_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_58_p0 = Ia;
    end else begin
        grp_fu_58_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_58_p1 = 32'd1191181824;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_58_p1 = 32'd0;
    end else begin
        grp_fu_58_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_64_p0 = reg_71;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_64_p0 = Ia;
    end else begin
        grp_fu_64_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Ialpha = ((and_ln16_fu_171_p2[0:0] == 1'b1) ? Ia : grp_fu_2076_p_dout0);

assign Ibeta = ((and_ln25_fu_282_p2[0:0] == 1'b1) ? grp_fu_2076_p_dout0 : reg_71);

assign and_ln12_12_fu_134_p2 = (tmp_30_reg_331 & or_ln16_reg_319);

assign and_ln12_13_fu_237_p2 = (tmp_33_reg_363 & or_ln25_reg_356);

assign and_ln12_14_fu_245_p2 = (tmp_34_reg_368 & or_ln25_reg_356);

assign and_ln12_fu_126_p2 = (tmp_29_reg_326 & or_ln16_reg_319);

assign and_ln16_fu_171_p2 = (tmp_s_reg_336 & or_ln16_reg_319);

assign and_ln25_fu_282_p2 = (tmp_32_reg_373 & or_ln25_reg_356);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln354_3_fu_200_p1 = zext_ln368_5_fu_196_p1;

assign bitcast_ln354_fu_89_p1 = zext_ln368_fu_85_p1;

assign data_V_7_fu_188_p1 = reg_71;

assign data_V_fu_78_p1 = Ia;

assign grp_fu_2056_p_ce = 1'b1;

assign grp_fu_2056_p_din0 = grp_fu_48_p0;

assign grp_fu_2056_p_din1 = grp_fu_48_p1;

assign grp_fu_2076_p_ce = 1'b1;

assign grp_fu_2076_p_din0 = grp_fu_55_p0;

assign grp_fu_2079_p_ce = 1'b1;

assign grp_fu_2079_p_din0 = grp_fu_64_p0;

assign grp_fu_2079_p_din1 = 32'd0;

assign grp_fu_2079_p_opcode = 5'd4;

assign grp_fu_699_p_ce = 1'b1;

assign grp_fu_699_p_din0 = reg_71;

assign grp_fu_699_p_din1 = Ia;

assign grp_fu_699_p_opcode = 2'd0;

assign grp_fu_709_p_ce = 1'b1;

assign grp_fu_709_p_din0 = grp_fu_58_p0;

assign grp_fu_709_p_din1 = grp_fu_58_p1;

assign grp_fu_709_p_opcode = grp_fu_58_opcode;

assign icmp_ln16_1_fu_114_p2 = ((trunc_ln16_fu_104_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_108_p2 = ((tmp_fu_94_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_225_p2 = ((trunc_ln25_fu_215_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_219_p2 = ((tmp_31_fu_205_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln16_fu_120_p2 = (icmp_ln16_fu_108_p2 | icmp_ln16_1_fu_114_p2);

assign or_ln25_fu_231_p2 = (icmp_ln25_fu_219_p2 | icmp_ln25_1_fu_225_p2);

assign p_Result_7_fu_192_p1 = data_V_7_fu_188_p1[30:0];

assign p_Result_s_fu_81_p1 = data_V_fu_78_p1[30:0];

assign sext_ln19_1_fu_166_p1 = $signed(sub_ln19_fu_160_p2);

assign sext_ln19_fu_148_p1 = sub_ln12_fu_142_p2;

assign sext_ln26_1_fu_277_p1 = $signed(sub_ln26_fu_271_p2);

assign sext_ln26_fu_259_p1 = sub_ln12_5_fu_253_p2;

assign shl_ln5_fu_263_p3 = {{sub_ln12_5_fu_253_p2}, {15'd0}};

assign shl_ln_fu_152_p3 = {{sub_ln12_fu_142_p2}, {15'd0}};

assign sub_ln12_5_fu_253_p2 = (zext_ln12_13_fu_241_p1 - zext_ln12_14_fu_249_p1);

assign sub_ln12_fu_142_p2 = (zext_ln12_fu_130_p1 - zext_ln12_12_fu_138_p1);

assign sub_ln19_fu_160_p2 = ($signed(shl_ln_fu_152_p3) - $signed(sext_ln19_fu_148_p1));

assign sub_ln26_fu_271_p2 = ($signed(shl_ln5_fu_263_p3) - $signed(sext_ln26_fu_259_p1));

assign tmp_31_fu_205_p4 = {{data_V_7_fu_188_p1[30:23]}};

assign tmp_fu_94_p4 = {{data_V_fu_78_p1[30:23]}};

assign trunc_ln16_fu_104_p1 = data_V_fu_78_p1[22:0];

assign trunc_ln25_fu_215_p1 = data_V_7_fu_188_p1[22:0];

assign zext_ln12_12_fu_138_p1 = and_ln12_12_fu_134_p2;

assign zext_ln12_13_fu_241_p1 = and_ln12_13_fu_237_p2;

assign zext_ln12_14_fu_249_p1 = and_ln12_14_fu_245_p2;

assign zext_ln12_fu_130_p1 = and_ln12_fu_126_p2;

assign zext_ln368_5_fu_196_p1 = p_Result_7_fu_192_p1;

assign zext_ln368_fu_85_p1 = p_Result_s_fu_81_p1;

endmodule //foc_clarke_direct_float_s
