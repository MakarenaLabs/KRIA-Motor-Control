-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_manual_control is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (79 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (9 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (9 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    control_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    control_ce0 : OUT STD_LOGIC;
    control_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    logger_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    logger_ce0 : OUT STD_LOGIC;
    logger_we0 : OUT STD_LOGIC;
    logger_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of foc_frontend_manual_control is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_3E8 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111101000";
    constant ap_const_lv16_3E7 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111100111";
    constant ap_const_lv16_FC18 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_TDATA_blk_n : STD_LOGIC;
    signal B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Ib_reg_811 : STD_LOGIC_VECTOR (15 downto 0);
    signal RPM_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln37_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal control_load_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln45_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal control_load_2_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal control_load_3_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal result_V_20_fu_530_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_V_20_reg_881 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln46_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Vd_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vd_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vq_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vq_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal Valpha_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal Vbeta_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Theta_4_fu_720_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_4_reg_917 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Va_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vb_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vc_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln47_fu_762_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_park_inverse_float_s_fu_302_ap_start : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_302_ap_done : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_302_ap_idle : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_302_ap_ready : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_302_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_park_inverse_float_s_fu_302_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_inverse_float_s_fu_313_ap_start : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_313_ap_done : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_313_ap_idle : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_313_ap_ready : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_313_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_inverse_float_s_fu_313_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_inverse_float_s_fu_313_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SVPWM_float_s_fu_319_ap_start : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_319_ap_done : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_319_ap_idle : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_319_ap_ready : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_319_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SVPWM_float_s_fu_319_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_SVPWM_float_s_fu_319_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_park_inverse_float_s_fu_302_ap_start_reg : STD_LOGIC := '0';
    signal grp_clarke_inverse_float_s_fu_313_ap_start_reg : STD_LOGIC := '0';
    signal grp_SVPWM_float_s_fu_319_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal bitcast_ln44_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln59_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln60_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln46_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln66_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln67_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln68_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_fu_806_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Angle_fu_364_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ia_fu_340_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_420_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_3_fu_424_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_33_fu_410_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_3_fu_438_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_3_fu_442_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_1_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_3_fu_462_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_466_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_3_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_434_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_3_fu_478_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_7_fu_482_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_30_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_488_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_3_fu_502_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_506_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_3_fu_516_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_5_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_19_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_V_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_588_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_592_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_31_fu_578_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_fu_606_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_fu_624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_616_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_fu_630_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_634_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_602_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_fu_646_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_650_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_656_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_fu_670_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_674_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_fu_684_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_16_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_698_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_714_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln39_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_750_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_fu_755_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pwmStreamObj_data_V_fu_787_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_326_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_park_inverse_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Vd : IN STD_LOGIC_VECTOR (31 downto 0);
        Vq : IN STD_LOGIC_VECTOR (31 downto 0);
        angle : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_clarke_inverse_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Valpha : IN STD_LOGIC_VECTOR (31 downto 0);
        Vbeta : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_SVPWM_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Va : IN STD_LOGIC_VECTOR (31 downto 0);
        Vb : IN STD_LOGIC_VECTOR (31 downto 0);
        Vc : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component foc_frontend_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_park_inverse_float_s_fu_302 : component foc_frontend_park_inverse_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_park_inverse_float_s_fu_302_ap_start,
        ap_done => grp_park_inverse_float_s_fu_302_ap_done,
        ap_idle => grp_park_inverse_float_s_fu_302_ap_idle,
        ap_ready => grp_park_inverse_float_s_fu_302_ap_ready,
        Vd => Vd_reg_891,
        Vq => Vq_reg_896,
        angle => result_V_20_reg_881,
        ap_return_0 => grp_park_inverse_float_s_fu_302_ap_return_0,
        ap_return_1 => grp_park_inverse_float_s_fu_302_ap_return_1);

    grp_clarke_inverse_float_s_fu_313 : component foc_frontend_clarke_inverse_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_clarke_inverse_float_s_fu_313_ap_start,
        ap_done => grp_clarke_inverse_float_s_fu_313_ap_done,
        ap_idle => grp_clarke_inverse_float_s_fu_313_ap_idle,
        ap_ready => grp_clarke_inverse_float_s_fu_313_ap_ready,
        Valpha => Valpha_reg_901,
        Vbeta => Vbeta_reg_906,
        ap_return_0 => grp_clarke_inverse_float_s_fu_313_ap_return_0,
        ap_return_1 => grp_clarke_inverse_float_s_fu_313_ap_return_1,
        ap_return_2 => grp_clarke_inverse_float_s_fu_313_ap_return_2);

    grp_SVPWM_float_s_fu_319 : component foc_frontend_SVPWM_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SVPWM_float_s_fu_319_ap_start,
        ap_done => grp_SVPWM_float_s_fu_319_ap_done,
        ap_idle => grp_SVPWM_float_s_fu_319_ap_idle,
        ap_ready => grp_SVPWM_float_s_fu_319_ap_ready,
        Va => Va_reg_924,
        Vb => Vb_reg_930,
        Vc => Vc_reg_936,
        ap_return_0 => grp_SVPWM_float_s_fu_319_ap_return_0,
        ap_return_1 => grp_SVPWM_float_s_fu_319_ap_return_1,
        ap_return_2 => grp_SVPWM_float_s_fu_319_ap_return_2);

    fsub_32ns_32ns_32_4_full_dsp_1_U43 : component foc_frontend_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_861,
        din1 => grp_fu_326_p1,
        ce => grp_fu_326_ce,
        dout => grp_fu_326_p2);

    sitofp_32s_32_4_no_dsp_1_U44 : component foc_frontend_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p1);

    sitofp_32s_32_4_no_dsp_1_U45 : component foc_frontend_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_SVPWM_float_s_fu_319_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SVPWM_float_s_fu_319_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_SVPWM_float_s_fu_319_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SVPWM_float_s_fu_319_ap_ready = ap_const_logic_1)) then 
                    grp_SVPWM_float_s_fu_319_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_clarke_inverse_float_s_fu_313_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_clarke_inverse_float_s_fu_313_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_clarke_inverse_float_s_fu_313_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_clarke_inverse_float_s_fu_313_ap_ready = ap_const_logic_1)) then 
                    grp_clarke_inverse_float_s_fu_313_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_park_inverse_float_s_fu_302_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_park_inverse_float_s_fu_302_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_park_inverse_float_s_fu_302_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_park_inverse_float_s_fu_302_ap_ready = ap_const_logic_1)) then 
                    grp_park_inverse_float_s_fu_302_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Ib_reg_811 <= A_TDATA(31 downto 16);
                RPM_reg_816 <= A_TDATA(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Theta_4_reg_917 <= Theta_4_fu_720_p3;
                Va_reg_924 <= grp_clarke_inverse_float_s_fu_313_ap_return_0;
                Vb_reg_930 <= grp_clarke_inverse_float_s_fu_313_ap_return_1;
                Vc_reg_936 <= grp_clarke_inverse_float_s_fu_313_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Valpha_reg_901 <= grp_park_inverse_float_s_fu_302_ap_return_0;
                Vbeta_reg_906 <= grp_park_inverse_float_s_fu_302_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Vd_reg_891 <= Vd_fu_542_p1;
                Vq_reg_896 <= Vq_fu_546_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                control_load_2_reg_851 <= control_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                control_load_3_reg_866 <= control_q0;
                conv_reg_861 <= grp_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                control_load_reg_836 <= control_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                dc_reg_912 <= grp_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                result_V_20_reg_881 <= result_V_20_fu_530_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, A_TVALID, B_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_park_inverse_float_s_fu_302_ap_done, grp_clarke_inverse_float_s_fu_313_ap_done, grp_SVPWM_float_s_fu_319_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_park_inverse_float_s_fu_302_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_clarke_inverse_float_s_fu_313_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_const_logic_0 = B_TREADY) or (grp_SVPWM_float_s_fu_319_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            A_TDATA_blk_n <= A_TVALID;
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID)
    begin
        if ((not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    Angle_fu_364_p4 <= A_TDATA(79 downto 64);
    B_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pwmStreamObj_data_V_fu_787_p4),64));

    B_TDATA_blk_n_assign_proc : process(B_TREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            B_TDATA_blk_n <= B_TREADY;
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TKEEP <= ap_const_lv8_0;
    B_TLAST <= ap_const_lv1_0;
    B_TSTRB <= ap_const_lv8_0;

    B_TVALID_assign_proc : process(B_TREADY, ap_CS_fsm_state11, grp_SVPWM_float_s_fu_319_ap_done)
    begin
        if ((not(((ap_const_logic_0 = B_TREADY) or (grp_SVPWM_float_s_fu_319_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    Ia_fu_340_p1 <= A_TDATA(16 - 1 downto 0);
    Theta_4_fu_720_p3 <= 
        add_ln38_fu_714_p2 when (tmp_24_fu_706_p3(0) = '1') else 
        result_V_fu_698_p3;
    Theta_fu_755_p3 <= 
        add_ln39_fu_750_p2 when (icmp_ln39_fu_745_p2(0) = '1') else 
        Theta_4_reg_917;
    Vd_fu_542_p1 <= control_load_2_reg_851;
    Vq_fu_546_p1 <= control_load_3_reg_866;
    add_ln344_3_fu_442_p2 <= std_logic_vector(unsigned(zext_ln344_3_fu_438_p1) + unsigned(ap_const_lv9_181));
    add_ln344_fu_610_p2 <= std_logic_vector(unsigned(zext_ln344_fu_606_p1) + unsigned(ap_const_lv9_181));
    add_ln38_fu_714_p2 <= std_logic_vector(unsigned(result_V_fu_698_p3) + unsigned(ap_const_lv16_3E8));
    add_ln39_fu_750_p2 <= std_logic_vector(unsigned(Theta_4_reg_917) + unsigned(ap_const_lv16_FC18));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(B_TREADY, grp_SVPWM_float_s_fu_319_ap_done)
    begin
        if (((ap_const_logic_0 = B_TREADY) or (grp_SVPWM_float_s_fu_319_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, A_TVALID)
    begin
        if (((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_park_inverse_float_s_fu_302_ap_done)
    begin
        if ((grp_park_inverse_float_s_fu_302_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_clarke_inverse_float_s_fu_313_ap_done)
    begin
        if ((grp_clarke_inverse_float_s_fu_313_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, A_TVALID)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln44_fu_388_p1 <= grp_fu_333_p1;
    bitcast_ln45_fu_397_p1 <= grp_fu_330_p1;
    bitcast_ln46_fu_728_p1 <= grp_fu_330_p1;
    bitcast_ln47_fu_806_p1 <= grp_fu_330_p1;
    bitcast_ln59_fu_558_p1 <= grp_park_inverse_float_s_fu_302_ap_return_0;
    bitcast_ln60_fu_563_p1 <= Vbeta_reg_906;
    bitcast_ln66_fu_767_p1 <= Va_reg_924;
    bitcast_ln67_fu_771_p1 <= Vb_reg_930;
    bitcast_ln68_fu_802_p1 <= Vc_reg_936;

    control_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            control_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            control_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            control_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            control_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            control_address0 <= "XXX";
        end if; 
    end process;


    control_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            control_ce0 <= ap_const_logic_1;
        else 
            control_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_567_p1 <= dc_reg_912;
    grp_SVPWM_float_s_fu_319_ap_start <= grp_SVPWM_float_s_fu_319_ap_start_reg;
    grp_clarke_inverse_float_s_fu_313_ap_start <= grp_clarke_inverse_float_s_fu_313_ap_start_reg;

    grp_fu_326_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_park_inverse_float_s_fu_302_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_park_inverse_float_s_fu_302_ap_done = ap_const_logic_1)))) then 
            grp_fu_326_ce <= ap_const_logic_1;
        else 
            grp_fu_326_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_326_p1 <= control_load_reg_836;

    grp_fu_330_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, B_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_park_inverse_float_s_fu_302_ap_done, grp_clarke_inverse_float_s_fu_313_ap_done, grp_SVPWM_float_s_fu_319_ap_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and ((ap_const_logic_0 = B_TREADY) or (grp_SVPWM_float_s_fu_319_ap_done = ap_const_logic_0))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_clarke_inverse_float_s_fu_313_ap_done = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_park_inverse_float_s_fu_302_ap_done = ap_const_logic_0)))) then 
            grp_fu_330_ce <= ap_const_logic_0;
        else 
            grp_fu_330_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_330_p0_assign_proc : process(ap_CS_fsm_state1, sext_ln37_fu_374_p1, ap_CS_fsm_state2, sext_ln45_fu_384_p1, sext_ln46_fu_538_p1, ap_CS_fsm_state6, sext_ln47_fu_762_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_330_p0 <= sext_ln47_fu_762_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_330_p0 <= sext_ln46_fu_538_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_330_p0 <= sext_ln45_fu_384_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_330_p0 <= sext_ln37_fu_374_p1;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_333_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ia_fu_340_p1),32));

    grp_park_inverse_float_s_fu_302_ap_start <= grp_park_inverse_float_s_fu_302_ap_start_reg;
    icmp_ln39_fu_745_p2 <= "1" when (signed(Theta_4_reg_917) > signed(ap_const_lv16_3E7)) else "0";
    isNeg_3_fu_448_p3 <= add_ln344_3_fu_442_p2(8 downto 8);
    isNeg_fu_616_p3 <= add_ln344_fu_610_p2(8 downto 8);

    logger_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            logger_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            logger_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            logger_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            logger_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            logger_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            logger_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            logger_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            logger_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            logger_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            logger_address0 <= "XXXX";
        end if; 
    end process;


    logger_ce0_assign_proc : process(B_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_park_inverse_float_s_fu_302_ap_done, grp_clarke_inverse_float_s_fu_313_ap_done, grp_SVPWM_float_s_fu_319_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_const_logic_0 = B_TREADY) or (grp_SVPWM_float_s_fu_319_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_clarke_inverse_float_s_fu_313_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_park_inverse_float_s_fu_302_ap_done = ap_const_logic_1)))) then 
            logger_ce0 <= ap_const_logic_1;
        else 
            logger_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    logger_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, bitcast_ln44_fu_388_p1, bitcast_ln45_fu_397_p1, bitcast_ln59_fu_558_p1, bitcast_ln60_fu_563_p1, bitcast_ln46_fu_728_p1, bitcast_ln66_fu_767_p1, bitcast_ln67_fu_771_p1, bitcast_ln68_fu_802_p1, bitcast_ln47_fu_806_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            logger_d0 <= bitcast_ln47_fu_806_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            logger_d0 <= bitcast_ln68_fu_802_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            logger_d0 <= bitcast_ln67_fu_771_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            logger_d0 <= bitcast_ln66_fu_767_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            logger_d0 <= bitcast_ln46_fu_728_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            logger_d0 <= bitcast_ln60_fu_563_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            logger_d0 <= bitcast_ln59_fu_558_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            logger_d0 <= bitcast_ln45_fu_397_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            logger_d0 <= bitcast_ln44_fu_388_p1;
        else 
            logger_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    logger_we0_assign_proc : process(B_TREADY, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_park_inverse_float_s_fu_302_ap_done, grp_clarke_inverse_float_s_fu_313_ap_done, grp_SVPWM_float_s_fu_319_ap_done, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((ap_const_logic_0 = B_TREADY) or (grp_SVPWM_float_s_fu_319_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_clarke_inverse_float_s_fu_313_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_park_inverse_float_s_fu_302_ap_done = ap_const_logic_1)))) then 
            logger_we0 <= ap_const_logic_1;
        else 
            logger_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_3_fu_424_p4 <= ((ap_const_lv1_1 & tmp_34_fu_420_p1) & ap_const_lv1_0);
    mantissa_fu_592_p4 <= ((ap_const_lv1_1 & tmp_32_fu_588_p1) & ap_const_lv1_0);
    p_Result_5_fu_402_p3 <= control_q0(31 downto 31);
    p_Result_s_fu_570_p3 <= data_V_fu_567_p1(31 downto 31);
    pwmStreamObj_data_V_fu_787_p4 <= ((grp_SVPWM_float_s_fu_319_ap_return_2 & grp_SVPWM_float_s_fu_319_ap_return_1) & grp_SVPWM_float_s_fu_319_ap_return_0);
    r_V_6_fu_656_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_602_p1),to_integer(unsigned('0' & zext_ln1340_fu_646_p1(31-1 downto 0)))));
    r_V_7_fu_482_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_434_p1),to_integer(unsigned('0' & zext_ln1340_3_fu_478_p1(31-1 downto 0)))));
    r_V_8_fu_488_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_434_p1),to_integer(unsigned('0' & zext_ln1340_3_fu_478_p1(31-1 downto 0)))));
    r_V_fu_650_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_602_p1),to_integer(unsigned('0' & zext_ln1340_fu_646_p1(31-1 downto 0)))));
    result_V_16_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_684_p3));
    result_V_19_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(val_3_fu_516_p3));
    result_V_20_fu_530_p3 <= 
        result_V_19_fu_524_p2 when (p_Result_5_fu_402_p3(0) = '1') else 
        val_3_fu_516_p3;
    result_V_fu_698_p3 <= 
        result_V_16_fu_692_p2 when (p_Result_s_fu_570_p3(0) = '1') else 
        val_fu_684_p3;
        sext_ln1340_3_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_466_p3),32));

        sext_ln1340_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_634_p3),32));

        sext_ln1364_3_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_1_fu_456_p2),9));

        sext_ln1364_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_fu_624_p2),9));

        sext_ln37_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Angle_fu_364_p4),32));

        sext_ln45_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ib_reg_811),32));

        sext_ln46_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(RPM_reg_816),32));

        sext_ln47_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Theta_fu_755_p3),32));

    sub_ln1364_1_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_33_fu_410_p4));
    sub_ln1364_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_31_fu_578_p4));
    tmp_24_fu_706_p3 <= result_V_fu_698_p3(15 downto 15);
    tmp_30_fu_494_p3 <= r_V_7_fu_482_p2(24 downto 24);
    tmp_31_fu_578_p4 <= data_V_fu_567_p1(30 downto 23);
    tmp_32_fu_588_p1 <= data_V_fu_567_p1(23 - 1 downto 0);
    tmp_33_fu_410_p4 <= control_q0(30 downto 23);
    tmp_34_fu_420_p1 <= control_q0(23 - 1 downto 0);
    tmp_7_fu_674_p4 <= r_V_6_fu_656_p2(39 downto 24);
    tmp_9_fu_506_p4 <= r_V_8_fu_488_p2(33 downto 24);
    tmp_fu_662_p3 <= r_V_fu_650_p2(24 downto 24);
    ush_3_fu_466_p3 <= 
        sext_ln1364_3_fu_462_p1 when (isNeg_3_fu_448_p3(0) = '1') else 
        add_ln344_3_fu_442_p2;
    ush_fu_634_p3 <= 
        sext_ln1364_fu_630_p1 when (isNeg_fu_616_p3(0) = '1') else 
        add_ln344_fu_610_p2;
    val_3_fu_516_p3 <= 
        zext_ln671_3_fu_502_p1 when (isNeg_3_fu_448_p3(0) = '1') else 
        tmp_9_fu_506_p4;
    val_fu_684_p3 <= 
        zext_ln671_fu_670_p1 when (isNeg_fu_616_p3(0) = '1') else 
        tmp_7_fu_674_p4;
    zext_ln1340_3_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_3_fu_474_p1),63));
    zext_ln1340_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_fu_642_p1),63));
    zext_ln15_3_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_424_p4),63));
    zext_ln15_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_592_p4),63));
    zext_ln344_3_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_410_p4),9));
    zext_ln344_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_578_p4),9));
    zext_ln671_3_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_494_p3),10));
    zext_ln671_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_662_p3),16));
end behav;
