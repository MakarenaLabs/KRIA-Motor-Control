-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_low_pass_filter_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    velocity : IN STD_LOGIC_VECTOR (31 downto 0);
    Ia : IN STD_LOGIC_VECTOR (31 downto 0);
    Ib : IN STD_LOGIC_VECTOR (31 downto 0);
    vel_corr : OUT STD_LOGIC_VECTOR (31 downto 0);
    vel_corr_ap_vld : OUT STD_LOGIC;
    Ia_corr_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ia_corr_1_ap_vld : OUT STD_LOGIC;
    Ib_corr_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ib_corr_1_ap_vld : OUT STD_LOGIC;
    grp_fu_514_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_514_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_514_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_514_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_514_p_ce : OUT STD_LOGIC;
    grp_fu_518_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_518_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_518_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_518_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_518_p_ce : OUT STD_LOGIC;
    grp_fu_526_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_ce : OUT STD_LOGIC;
    grp_fu_532_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_532_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_532_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_532_p_ce : OUT STD_LOGIC;
    grp_fu_536_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_536_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_536_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_536_p_ce : OUT STD_LOGIC;
    grp_fu_540_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_540_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_540_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_540_p_ce : OUT STD_LOGIC );
end;


architecture behav of foc_low_pass_filter_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3EE4DD2F : STD_LOGIC_VECTOR (31 downto 0) := "00111110111001001101110100101111";
    constant ap_const_lv32_3D000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000000000000000000000000";
    constant ap_const_lv32_38000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111000000000000000000000000000";
    constant ap_const_lv32_3F0D9168 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000011011001000101101000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal velocity_accum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal buffer_velocity_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_velocity_ce0 : STD_LOGIC;
    signal buffer_velocity_we0 : STD_LOGIC;
    signal buffer_velocity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_velocity_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_velocity_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Y1a_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Y1b_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Y2a_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Y2b_prev : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dc_cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ia_DC_acc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ib_DC_acc : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ia_corr : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Ib_corr : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Y1a_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln64_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln76_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start : STD_LOGIC;
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done : STD_LOGIC;
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_idle : STD_LOGIC;
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_ready : STD_LOGIC;
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0 : STD_LOGIC;
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0 : STD_LOGIC;
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce1 : STD_LOGIC;
    signal storemerge_reg_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_117_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln31_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_101_ce : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_106_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_106_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_velocity_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_velocity_ce0 : OUT STD_LOGIC;
        buffer_velocity_we0 : OUT STD_LOGIC;
        buffer_velocity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_velocity_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_velocity_ce1 : OUT STD_LOGIC;
        buffer_velocity_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_low_pass_filter_float_s_buffer_velocity_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buffer_velocity_U : component foc_low_pass_filter_float_s_buffer_velocity_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_velocity_address0,
        ce0 => buffer_velocity_ce0,
        we0 => buffer_velocity_we0,
        d0 => buffer_velocity_d0,
        q0 => buffer_velocity_q0,
        address1 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address1,
        ce1 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce1,
        q1 => buffer_velocity_q1);

    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95 : component foc_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start,
        ap_done => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done,
        ap_idle => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_idle,
        ap_ready => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_ready,
        buffer_velocity_address0 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0,
        buffer_velocity_ce0 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0,
        buffer_velocity_we0 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0,
        buffer_velocity_d0 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0,
        buffer_velocity_address1 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address1,
        buffer_velocity_ce1 => grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce1,
        buffer_velocity_q1 => buffer_velocity_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Ia_DC_acc_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln64_fu_248_p2 = ap_const_lv1_1))) then 
                Ia_DC_acc <= reg_156;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln64_reg_383 = ap_const_lv1_0))) then 
                Ia_DC_acc <= grp_fu_514_p_dout0;
            end if; 
        end if;
    end process;

    Ib_DC_acc_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln64_fu_248_p2 = ap_const_lv1_1))) then 
                Ib_DC_acc <= reg_163;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln64_reg_383 = ap_const_lv1_0))) then 
                Ib_DC_acc <= grp_fu_518_p_dout0;
            end if; 
        end if;
    end process;

    storemerge_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                storemerge_reg_84 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln64_reg_383 = ap_const_lv1_0))) then 
                storemerge_reg_84 <= add_ln76_fu_290_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                Ia_corr <= grp_fu_526_p_dout0;
                Ib_corr <= grp_fu_532_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Y1a_prev <= grp_fu_514_p_dout0;
                Y1a_reg_364 <= grp_fu_514_p_dout0;
                Y1b_prev <= grp_fu_518_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                Y2a_prev <= grp_fu_514_p_dout0;
                Y2b_prev <= grp_fu_518_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                dc_cnt <= storemerge_reg_84;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                div_reg_375 <= grp_fu_526_p_dout0;
                velocity_accum <= grp_fu_526_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                icmp_ln64_reg_383 <= icmp_ln64_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_136 <= grp_fu_526_p_dout0;
                reg_141 <= grp_fu_532_p_dout0;
                reg_146 <= grp_fu_536_p_dout0;
                reg_151 <= grp_fu_540_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_156 <= grp_fu_514_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_163 <= grp_fu_518_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln64_fu_248_p2, ap_CS_fsm_state15, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln64_fu_248_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ia_corr_1 <= grp_fu_514_p_dout0;

    Ia_corr_1_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Ia_corr_1_ap_vld <= ap_const_logic_1;
        else 
            Ia_corr_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ib_corr_1 <= grp_fu_518_p_dout0;

    Ib_corr_1_ap_vld_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Ib_corr_1_ap_vld <= ap_const_logic_1;
        else 
            Ib_corr_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln76_fu_290_p2 <= std_logic_vector(unsigned(dc_cnt) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done)
    begin
        if ((grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln31_fu_213_p1 <= div_reg_375;

    buffer_velocity_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_velocity_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buffer_velocity_address0 <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_address0 <= grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_address0;
        else 
            buffer_velocity_address0 <= "XXXX";
        end if; 
    end process;


    buffer_velocity_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            buffer_velocity_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_ce0 <= grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_ce0;
        else 
            buffer_velocity_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_velocity_d0_assign_proc : process(velocity, ap_CS_fsm_state6, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_velocity_d0 <= velocity;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_d0 <= grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_d0;
        else 
            buffer_velocity_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_velocity_we0_assign_proc : process(ap_CS_fsm_state6, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buffer_velocity_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_we0 <= grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_buffer_velocity_we0;
        else 
            buffer_velocity_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_101_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done = ap_const_logic_0)))) then 
            grp_fu_101_ce <= ap_const_logic_0;
        else 
            grp_fu_101_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_101_opcode_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, icmp_ln64_fu_248_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_101_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln64_fu_248_p2 = ap_const_lv1_0)))) then 
            grp_fu_101_opcode <= ap_const_lv2_0;
        else 
            grp_fu_101_opcode <= "XX";
        end if; 
    end process;


    grp_fu_101_p0_assign_proc : process(velocity_accum, Ia_DC_acc, reg_136, reg_156, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_101_p0 <= Ia_DC_acc;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_101_p0 <= reg_156;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_101_p0 <= reg_136;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_p0 <= velocity_accum;
        else 
            grp_fu_101_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_101_p1_assign_proc : process(velocity, buffer_velocity_q0, Ia_corr, reg_141, reg_156, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_101_p1 <= Ia_corr;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_101_p1 <= reg_156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_101_p1 <= velocity;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_101_p1 <= reg_141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_p1 <= buffer_velocity_q0;
        else 
            grp_fu_101_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_106_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state2, grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_done = ap_const_logic_0)))) then 
            grp_fu_106_ce <= ap_const_logic_0;
        else 
            grp_fu_106_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_106_opcode_assign_proc : process(icmp_ln64_fu_248_p2, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_106_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln64_fu_248_p2 = ap_const_lv1_0)))) then 
            grp_fu_106_opcode <= ap_const_lv2_0;
        else 
            grp_fu_106_opcode <= "XX";
        end if; 
    end process;


    grp_fu_106_p0_assign_proc : process(Ib_DC_acc, reg_146, reg_163, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_106_p0 <= reg_163;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_106_p0 <= Ib_DC_acc;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_106_p0 <= reg_146;
        else 
            grp_fu_106_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_106_p1_assign_proc : process(Ib_corr, reg_151, reg_163, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_106_p1 <= Ib_corr;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_106_p1 <= reg_163;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_106_p1 <= reg_151;
        else 
            grp_fu_106_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_111_p0_assign_proc : process(ap_CS_fsm_state1, Ia, Ia_DC_acc, ap_CS_fsm_state10, reg_156, Y1a_reg_364, ap_CS_fsm_state15, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_111_p0 <= Ia_DC_acc;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_111_p0 <= reg_156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_111_p0 <= Y1a_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_111_p0 <= Ia;
        else 
            grp_fu_111_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_111_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_111_p1 <= ap_const_lv32_38000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_111_p1 <= ap_const_lv32_3D000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_111_p1 <= ap_const_lv32_3EE4DD2F;
        else 
            grp_fu_111_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_117_p0_assign_proc : process(ap_CS_fsm_state1, Y1a_prev, Y2a_prev, Ib_DC_acc, ap_CS_fsm_state15, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_117_p0 <= Ib_DC_acc;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_117_p0 <= Y2a_prev;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_117_p0 <= Y1a_prev;
        else 
            grp_fu_117_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_117_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state15, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_117_p1 <= ap_const_lv32_38000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_117_p1 <= ap_const_lv32_3F0D9168;
        else 
            grp_fu_117_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_122_p0_assign_proc : process(ap_CS_fsm_state1, Ib, reg_163, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_122_p0 <= reg_163;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_122_p0 <= Ib;
        else 
            grp_fu_122_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p0_assign_proc : process(ap_CS_fsm_state1, Y1b_prev, Y2b_prev, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_128_p0 <= Y2b_prev;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_128_p0 <= Y1b_prev;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_514_p_ce <= grp_fu_101_ce;
    grp_fu_514_p_din0 <= grp_fu_101_p0;
    grp_fu_514_p_din1 <= grp_fu_101_p1;
    grp_fu_514_p_opcode <= grp_fu_101_opcode;
    grp_fu_518_p_ce <= grp_fu_106_ce;
    grp_fu_518_p_din0 <= grp_fu_106_p0;
    grp_fu_518_p_din1 <= grp_fu_106_p1;
    grp_fu_518_p_opcode <= grp_fu_106_opcode;
    grp_fu_526_p_ce <= ap_const_logic_1;
    grp_fu_526_p_din0 <= grp_fu_111_p0;
    grp_fu_526_p_din1 <= grp_fu_111_p1;
    grp_fu_532_p_ce <= ap_const_logic_1;
    grp_fu_532_p_din0 <= grp_fu_117_p0;
    grp_fu_532_p_din1 <= grp_fu_117_p1;
    grp_fu_536_p_ce <= ap_const_logic_1;
    grp_fu_536_p_din0 <= grp_fu_122_p0;
    grp_fu_536_p_din1 <= ap_const_lv32_3EE4DD2F;
    grp_fu_540_p_ce <= ap_const_logic_1;
    grp_fu_540_p_din0 <= grp_fu_128_p0;
    grp_fu_540_p_din1 <= ap_const_lv32_3F0D9168;
    grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start <= grp_low_pass_filter_float_Pipeline_VITIS_LOOP_25_1_fu_95_ap_start_reg;
    icmp_ln64_fu_248_p2 <= "1" when (signed(dc_cnt) > signed(ap_const_lv32_1C)) else "0";
    vel_corr <= xor_ln31_fu_216_p2;

    vel_corr_ap_vld_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            vel_corr_ap_vld <= ap_const_logic_1;
        else 
            vel_corr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln31_fu_216_p2 <= (bitcast_ln31_fu_213_p1 xor ap_const_lv32_80000000);
end behav;
