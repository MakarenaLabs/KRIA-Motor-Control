-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    velocity : IN STD_LOGIC_VECTOR (29 downto 0);
    Ia : IN STD_LOGIC_VECTOR (29 downto 0);
    Ib : IN STD_LOGIC_VECTOR (29 downto 0);
    filt_a : IN STD_LOGIC_VECTOR (13 downto 0);
    filt_b : IN STD_LOGIC_VECTOR (12 downto 0);
    velocity_accum_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_V_o_ap_vld : OUT STD_LOGIC;
    buffer_velocity_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_velocity_V_ce0 : OUT STD_LOGIC;
    buffer_velocity_V_we0 : OUT STD_LOGIC;
    buffer_velocity_V_d0 : OUT STD_LOGIC_VECTOR (29 downto 0);
    buffer_velocity_V_q0 : IN STD_LOGIC_VECTOR (29 downto 0);
    Y1a_prev_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_V_o_ap_vld : OUT STD_LOGIC;
    Y1b_prev_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1b_prev_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y1b_prev_V_o_ap_vld : OUT STD_LOGIC;
    Y2a_prev_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y2a_prev_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y2a_prev_V_o_ap_vld : OUT STD_LOGIC;
    Y2b_prev_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y2b_prev_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y2b_prev_V_o_ap_vld : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buffer_velocity_V_load_reg_412 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln1171_2_fu_120_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal zext_ln1171_2_reg_422 : STD_LOGIC_VECTOR (45 downto 0);
    signal Ia1_filtered_V_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib1_filtered_V_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start : STD_LOGIC;
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done : STD_LOGIC;
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_idle : STD_LOGIC;
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_ready : STD_LOGIC;
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0 : STD_LOGIC;
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0 : STD_LOGIC;
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_V_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_V_fu_106_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_1_fu_102_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_2_fu_124_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_106_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_2_fu_124_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_1_fu_130_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_fu_134_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_3_fu_154_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_5_fu_168_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_3_fu_154_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_5_fu_168_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_2_fu_174_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_9_fu_178_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal velocity_cast_fu_206_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln712_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln712_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal velocity_cast_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1201_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1201_1_fu_249_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln1201_fu_259_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln1201_2_fu_269_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1201_1_fu_263_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln1201_1_fu_279_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln1201_fu_283_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_7_fu_301_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1171_fu_295_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_9_fu_315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_7_fu_301_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal sext_ln712_3_fu_320_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_9_fu_315_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_10_fu_324_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_11_fu_343_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_13_fu_357_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_11_fu_343_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal sext_ln712_4_fu_362_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal r_V_13_fu_357_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal ret_V_11_fu_366_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln1169_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_velocity_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_velocity_V_ce0 : OUT STD_LOGIC;
        buffer_velocity_V_we0 : OUT STD_LOGIC;
        buffer_velocity_V_d0 : OUT STD_LOGIC_VECTOR (29 downto 0);
        buffer_velocity_V_q0 : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component foc_frontend_mul_30s_13ns_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component foc_frontend_mul_32s_14ns_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component foc_frontend_mul_32s_13ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;



begin
    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92 : component foc_frontend_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start,
        ap_done => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done,
        ap_idle => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_idle,
        ap_ready => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_ready,
        buffer_velocity_V_address0 => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0,
        buffer_velocity_V_ce0 => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0,
        buffer_velocity_V_we0 => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0,
        buffer_velocity_V_d0 => grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0,
        buffer_velocity_V_q0 => buffer_velocity_V_q0);

    mul_30s_13ns_43_1_1_U2 : component foc_frontend_mul_30s_13ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 13,
        dout_WIDTH => 43)
    port map (
        din0 => Ia,
        din1 => r_V_fu_106_p1,
        dout => r_V_fu_106_p2);

    mul_32s_14ns_46_1_1_U3 : component foc_frontend_mul_32s_14ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 46)
    port map (
        din0 => Y1a_prev_V_i,
        din1 => r_V_2_fu_124_p1,
        dout => r_V_2_fu_124_p2);

    mul_30s_13ns_43_1_1_U4 : component foc_frontend_mul_30s_13ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 13,
        dout_WIDTH => 43)
    port map (
        din0 => Ib,
        din1 => r_V_3_fu_154_p1,
        dout => r_V_3_fu_154_p2);

    mul_32s_14ns_46_1_1_U5 : component foc_frontend_mul_32s_14ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 46)
    port map (
        din0 => Y1b_prev_V_i,
        din1 => r_V_5_fu_168_p1,
        dout => r_V_5_fu_168_p2);

    mul_32s_13ns_45_1_1_U6 : component foc_frontend_mul_32s_13ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 13,
        dout_WIDTH => 45)
    port map (
        din0 => Ia1_filtered_V_reg_428,
        din1 => r_V_7_fu_301_p1,
        dout => r_V_7_fu_301_p2);

    mul_32s_14ns_46_1_1_U7 : component foc_frontend_mul_32s_14ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 46)
    port map (
        din0 => Y2a_prev_V_i,
        din1 => r_V_9_fu_315_p1,
        dout => r_V_9_fu_315_p2);

    mul_32s_13ns_45_1_1_U8 : component foc_frontend_mul_32s_13ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 13,
        dout_WIDTH => 45)
    port map (
        din0 => Ib1_filtered_V_reg_433,
        din1 => r_V_11_fu_343_p1,
        dout => r_V_11_fu_343_p2);

    mul_32s_14ns_46_1_1_U9 : component foc_frontend_mul_32s_14ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 14,
        dout_WIDTH => 46)
    port map (
        din0 => Y2b_prev_V_i,
        din1 => r_V_13_fu_357_p1,
        dout => r_V_13_fu_357_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_0_preg <= sext_ln1169_fu_291_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_1_preg <= ret_V_10_fu_324_p2(45 downto 14);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_return_2_preg <= ret_V_11_fu_366_p2(45 downto 14);
                end if; 
            end if;
        end if;
    end process;


    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_ready = ap_const_logic_1)) then 
                    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Ia1_filtered_V_reg_428 <= ret_V_fu_134_p2(45 downto 14);
                Ib1_filtered_V_reg_433 <= ret_V_9_fu_178_p2(45 downto 14);
                    zext_ln1171_2_reg_422(13 downto 0) <= zext_ln1171_2_fu_120_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                buffer_velocity_V_load_reg_412 <= buffer_velocity_V_q0;
            end if;
        end if;
    end process;
    zext_ln1171_2_reg_422(45 downto 14) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    Y1a_prev_V_o_assign_proc : process(Y1a_prev_V_i, ap_CS_fsm_state4, ret_V_fu_134_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Y1a_prev_V_o <= ret_V_fu_134_p2(45 downto 14);
        else 
            Y1a_prev_V_o <= Y1a_prev_V_i;
        end if; 
    end process;


    Y1a_prev_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done)
    begin
        if (((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Y1a_prev_V_o_ap_vld <= ap_const_logic_1;
        else 
            Y1a_prev_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Y1b_prev_V_o_assign_proc : process(Y1b_prev_V_i, ap_CS_fsm_state4, ret_V_9_fu_178_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Y1b_prev_V_o <= ret_V_9_fu_178_p2(45 downto 14);
        else 
            Y1b_prev_V_o <= Y1b_prev_V_i;
        end if; 
    end process;


    Y1b_prev_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done)
    begin
        if (((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Y1b_prev_V_o_ap_vld <= ap_const_logic_1;
        else 
            Y1b_prev_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Y2a_prev_V_o_assign_proc : process(Y2a_prev_V_i, ap_CS_fsm_state5, ret_V_10_fu_324_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Y2a_prev_V_o <= ret_V_10_fu_324_p2(45 downto 14);
        else 
            Y2a_prev_V_o <= Y2a_prev_V_i;
        end if; 
    end process;


    Y2a_prev_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Y2a_prev_V_o_ap_vld <= ap_const_logic_1;
        else 
            Y2a_prev_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Y2b_prev_V_o_assign_proc : process(Y2b_prev_V_i, ap_CS_fsm_state5, ret_V_11_fu_366_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Y2b_prev_V_o <= ret_V_11_fu_366_p2(45 downto 14);
        else 
            Y2b_prev_V_o <= Y2b_prev_V_i;
        end if; 
    end process;


    Y2b_prev_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Y2b_prev_V_o_ap_vld <= ap_const_logic_1;
        else 
            Y2b_prev_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done)
    begin
        if ((grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state5, sext_ln1169_fu_291_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return_0 <= sext_ln1169_fu_291_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state5, ret_V_10_fu_324_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return_1 <= ret_V_10_fu_324_p2(45 downto 14);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state5, ret_V_11_fu_366_p2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_return_2 <= ret_V_11_fu_366_p2(45 downto 14);
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    buffer_velocity_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_velocity_V_address0 <= ap_const_lv5_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            buffer_velocity_V_address0 <= ap_const_lv5_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_V_address0 <= grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_address0;
        else 
            buffer_velocity_V_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_velocity_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            buffer_velocity_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_V_ce0 <= grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_ce0;
        else 
            buffer_velocity_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_velocity_V_d0_assign_proc : process(velocity, ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_velocity_V_d0 <= velocity;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_V_d0 <= grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_d0;
        else 
            buffer_velocity_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_velocity_V_we0_assign_proc : process(ap_CS_fsm_state4, grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_velocity_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer_velocity_V_we0 <= grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_buffer_velocity_V_we0;
        else 
            buffer_velocity_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start <= grp_low_pass_filter_ap_fixed_32_18_5_3_0_Pipeline_VITIS_LOOP_29_1_fu_92_ap_start_reg;
    r_V_11_fu_343_p1 <= zext_ln1171_fu_295_p1(13 - 1 downto 0);
    r_V_13_fu_357_p1 <= zext_ln1171_2_reg_422(14 - 1 downto 0);
    r_V_2_fu_124_p1 <= zext_ln1171_2_fu_120_p1(14 - 1 downto 0);
    r_V_3_fu_154_p1 <= zext_ln1171_1_fu_102_p1(13 - 1 downto 0);
    r_V_5_fu_168_p1 <= zext_ln1171_2_fu_120_p1(14 - 1 downto 0);
    r_V_7_fu_301_p1 <= zext_ln1171_fu_295_p1(13 - 1 downto 0);
    r_V_9_fu_315_p1 <= zext_ln1171_2_reg_422(14 - 1 downto 0);
    r_V_fu_106_p1 <= zext_ln1171_1_fu_102_p1(13 - 1 downto 0);
    ret_V_10_fu_324_p2 <= std_logic_vector(signed(sext_ln712_3_fu_320_p1) + signed(r_V_9_fu_315_p2));
    ret_V_11_fu_366_p2 <= std_logic_vector(signed(sext_ln712_4_fu_362_p1) + signed(r_V_13_fu_357_p2));
    ret_V_9_fu_178_p2 <= std_logic_vector(unsigned(r_V_5_fu_168_p2) + unsigned(sext_ln712_2_fu_174_p1));
    ret_V_fu_134_p2 <= std_logic_vector(unsigned(r_V_2_fu_124_p2) + unsigned(sext_ln712_1_fu_130_p1));
    select_ln1201_fu_283_p3 <= 
        sub_ln1201_1_fu_263_p2 when (tmp_fu_235_p3(0) = '1') else 
        zext_ln1201_1_fu_279_p1;
        sext_ln1169_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1201_fu_283_p3),32));

        sext_ln712_1_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_106_p2),46));

        sext_ln712_2_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_154_p2),46));

        sext_ln712_3_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_301_p2),46));

        sext_ln712_4_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_11_fu_343_p2),46));

        sext_ln712_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(buffer_velocity_V_load_reg_412),32));

    sub_ln1201_1_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln1201_fu_259_p1));
    sub_ln1201_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(t_V_fu_223_p2));
    sub_ln712_fu_217_p2 <= std_logic_vector(unsigned(velocity_accum_V_i) - unsigned(sext_ln712_fu_214_p1));
    t_V_fu_223_p2 <= std_logic_vector(unsigned(sub_ln712_fu_217_p2) + unsigned(velocity_cast_fu_206_p1));
    tmp_fu_235_p3 <= t_V_fu_223_p2(31 downto 31);
    trunc_ln1201_1_fu_249_p4 <= sub_ln1201_fu_243_p2(31 downto 5);
    trunc_ln1201_2_fu_269_p4 <= t_V_fu_223_p2(31 downto 5);

    velocity_accum_V_o_assign_proc : process(velocity_accum_V_i, t_V_fu_223_p2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            velocity_accum_V_o <= t_V_fu_223_p2;
        else 
            velocity_accum_V_o <= velocity_accum_V_i;
        end if; 
    end process;


    velocity_accum_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            velocity_accum_V_o_ap_vld <= ap_const_logic_1;
        else 
            velocity_accum_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    velocity_cast_fu_206_p0 <= velocity;
        velocity_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(velocity_cast_fu_206_p0),32));

    zext_ln1171_1_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filt_b),43));
    zext_ln1171_2_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filt_a),46));
    zext_ln1171_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filt_b),45));
    zext_ln1201_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1201_2_fu_269_p4),28));
    zext_ln1201_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1201_1_fu_249_p4),28));
end behav;
