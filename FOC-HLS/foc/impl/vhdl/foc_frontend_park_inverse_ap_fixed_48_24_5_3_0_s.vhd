-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_park_inverse_ap_fixed_48_24_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Vd : IN STD_LOGIC_VECTOR (47 downto 0);
    Vq : IN STD_LOGIC_VECTOR (47 downto 0);
    angle : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (47 downto 0) );
end;


architecture behav of foc_frontend_park_inverse_ap_fixed_48_24_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv48_7FFF000000 : STD_LOGIC_VECTOR (47 downto 0) := "000000000111111111111111000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sine_i_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sine_i_V_ce0 : STD_LOGIC;
    signal sine_i_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal cosine_i_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cosine_i_V_ce0 : STD_LOGIC;
    signal cosine_i_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal Vd_cos_V_reg_412 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Vd_sin_V_reg_417 : STD_LOGIC_VECTOR (47 downto 0);
    signal Vq_cos_V_reg_422 : STD_LOGIC_VECTOR (47 downto 0);
    signal Vq_sin_V_reg_427 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln19_fu_88_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_102_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1168_fu_94_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_fu_102_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1171_fu_98_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_fu_102_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_1_fu_122_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_fu_122_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1171_1_fu_118_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_1_fu_122_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_2_fu_142_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1168_1_fu_138_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_2_fu_142_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_2_fu_142_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal r_V_3_fu_158_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_3_fu_158_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_3_fu_158_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_V_fu_174_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_s_fu_182_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_s_fu_198_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_188_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln180_fu_206_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1548_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_226_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_2_fu_238_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_252_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln31_fu_248_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_260_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_266_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln1547_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln737_fu_274_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal x_V_1_fu_178_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Val2_4_fu_286_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_4_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_292_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln180_1_fu_310_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1548_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_1_fu_330_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_3_fu_342_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_1_fu_346_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_356_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_fu_352_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_364_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_370_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln1547_1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln737_1_fu_378_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln1547_fu_278_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln1547_1_fu_382_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_mul_48s_25s_72_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (71 downto 0) );
    end component;


    component foc_frontend_park_direct_ap_fixed_48_24_5_3_0_s_sine_d_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component foc_frontend_park_direct_ap_fixed_48_24_5_3_0_s_cosine_d_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    sine_i_V_U : component foc_frontend_park_direct_ap_fixed_48_24_5_3_0_s_sine_d_V_ROM_AUTO_1R
    generic map (
        DataWidth => 25,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sine_i_V_address0,
        ce0 => sine_i_V_ce0,
        q0 => sine_i_V_q0);

    cosine_i_V_U : component foc_frontend_park_direct_ap_fixed_48_24_5_3_0_s_cosine_d_V_ROM_AUTO_1R
    generic map (
        DataWidth => 25,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosine_i_V_address0,
        ce0 => cosine_i_V_ce0,
        q0 => cosine_i_V_q0);

    mul_48s_25s_72_1_1_U47 : component foc_frontend_mul_48s_25s_72_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 48,
        din1_WIDTH => 25,
        dout_WIDTH => 72)
    port map (
        din0 => r_V_fu_102_p0,
        din1 => r_V_fu_102_p1,
        dout => r_V_fu_102_p2);

    mul_48s_25s_72_1_1_U48 : component foc_frontend_mul_48s_25s_72_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 48,
        din1_WIDTH => 25,
        dout_WIDTH => 72)
    port map (
        din0 => r_V_1_fu_122_p0,
        din1 => r_V_1_fu_122_p1,
        dout => r_V_1_fu_122_p2);

    mul_48s_25s_72_1_1_U49 : component foc_frontend_mul_48s_25s_72_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 48,
        din1_WIDTH => 25,
        dout_WIDTH => 72)
    port map (
        din0 => r_V_2_fu_142_p0,
        din1 => r_V_2_fu_142_p1,
        dout => r_V_2_fu_142_p2);

    mul_48s_25s_72_1_1_U50 : component foc_frontend_mul_48s_25s_72_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 48,
        din1_WIDTH => 25,
        dout_WIDTH => 72)
    port map (
        din0 => r_V_3_fu_158_p0,
        din1 => r_V_3_fu_158_p1,
        dout => r_V_3_fu_158_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Vd_cos_V_reg_412 <= r_V_fu_102_p2(71 downto 24);
                Vd_sin_V_reg_417 <= r_V_1_fu_122_p2(71 downto 24);
                Vq_cos_V_reg_422 <= r_V_2_fu_142_p2(71 downto 24);
                Vq_sin_V_reg_427 <= r_V_3_fu_158_p2(71 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln1547_fu_278_p3;
    ap_return_1 <= select_ln1547_1_fu_382_p3;
    cosine_i_V_address0 <= zext_ln19_fu_88_p1(10 - 1 downto 0);

    cosine_i_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cosine_i_V_ce0 <= ap_const_logic_1;
        else 
            cosine_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1547_1_fu_318_p2 <= "1" when (signed(select_ln180_1_fu_310_p3) > signed(ap_const_lv48_7FFF000000)) else "0";
    icmp_ln1547_fu_214_p2 <= "1" when (signed(select_ln180_fu_206_p3) > signed(ap_const_lv48_7FFF000000)) else "0";
    icmp_ln1548_1_fu_324_p2 <= "1" when (signed(x_V_1_fu_178_p2) > signed(ap_const_lv48_0)) else "0";
    icmp_ln1548_fu_220_p2 <= "1" when (signed(x_V_fu_174_p2) > signed(ap_const_lv48_0)) else "0";
    p_Result_4_fu_302_p3 <= x_V_1_fu_178_p2(47 downto 47);
    
    p_Result_5_fu_188_p4_proc : process(p_Val2_s_fu_182_p2)
    begin
        p_Result_5_fu_188_p4 <= p_Val2_s_fu_182_p2;
        p_Result_5_fu_188_p4(47) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_6_fu_292_p4_proc : process(p_Val2_4_fu_286_p2)
    begin
        p_Result_6_fu_292_p4 <= p_Val2_4_fu_286_p2;
        p_Result_6_fu_292_p4(47) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_198_p3 <= x_V_fu_174_p2(47 downto 47);
    p_Val2_4_fu_286_p2 <= std_logic_vector(unsigned(ap_const_lv48_0) - unsigned(x_V_1_fu_178_p2));
    p_Val2_s_fu_182_p2 <= std_logic_vector(unsigned(ap_const_lv48_0) - unsigned(x_V_fu_174_p2));
    r_V_1_fu_122_p0 <= sext_ln1168_fu_94_p1(48 - 1 downto 0);
    r_V_1_fu_122_p1 <= sext_ln1171_1_fu_118_p1(25 - 1 downto 0);
    r_V_2_fu_142_p0 <= sext_ln1168_1_fu_138_p1(48 - 1 downto 0);
    r_V_2_fu_142_p1 <= sext_ln1171_fu_98_p1(25 - 1 downto 0);
    r_V_3_fu_158_p0 <= sext_ln1168_1_fu_138_p1(48 - 1 downto 0);
    r_V_3_fu_158_p1 <= sext_ln1171_1_fu_118_p1(25 - 1 downto 0);
    r_V_fu_102_p0 <= sext_ln1168_fu_94_p1(48 - 1 downto 0);
    r_V_fu_102_p1 <= sext_ln1171_fu_98_p1(25 - 1 downto 0);
    select_ln1547_1_fu_382_p3 <= 
        sext_ln737_1_fu_378_p1 when (icmp_ln1547_1_fu_318_p2(0) = '1') else 
        x_V_1_fu_178_p2;
    select_ln1547_fu_278_p3 <= 
        sext_ln737_fu_274_p1 when (icmp_ln1547_fu_214_p2(0) = '1') else 
        x_V_fu_174_p2;
    select_ln180_1_fu_310_p3 <= 
        p_Result_6_fu_292_p4 when (p_Result_4_fu_302_p3(0) = '1') else 
        x_V_1_fu_178_p2;
    select_ln180_fu_206_p3 <= 
        p_Result_5_fu_188_p4 when (p_Result_s_fu_198_p3(0) = '1') else 
        x_V_fu_174_p2;
        sext_ln1168_1_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Vq),72));

        sext_ln1168_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Vd),72));

        sext_ln1171_1_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sine_i_V_q0),72));

        sext_ln1171_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cosine_i_V_q0),72));

        sext_ln31_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_fu_242_p2),17));

        sext_ln35_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_1_fu_346_p2),17));

        sext_ln737_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_370_p3),48));

        sext_ln737_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_266_p3),48));

    shl_ln1_fu_356_p3 <= (sub_ln12_1_fu_346_p2 & ap_const_lv15_0);
    shl_ln_fu_252_p3 <= (sub_ln12_fu_242_p2 & ap_const_lv15_0);
    sine_i_V_address0 <= zext_ln19_fu_88_p1(10 - 1 downto 0);

    sine_i_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sine_i_V_ce0 <= ap_const_logic_1;
        else 
            sine_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln12_1_fu_346_p2 <= std_logic_vector(unsigned(zext_ln12_1_fu_330_p1) - unsigned(zext_ln12_3_fu_342_p1));
    sub_ln12_fu_242_p2 <= std_logic_vector(unsigned(zext_ln12_fu_226_p1) - unsigned(zext_ln12_2_fu_238_p1));
    tmp_12_fu_334_p3 <= x_V_1_fu_178_p2(47 downto 47);
    tmp_13_fu_364_p2 <= std_logic_vector(unsigned(shl_ln1_fu_356_p3) - unsigned(sext_ln35_fu_352_p1));
    tmp_6_fu_266_p3 <= (tmp_7_fu_260_p2 & ap_const_lv24_0);
    tmp_7_fu_260_p2 <= std_logic_vector(unsigned(shl_ln_fu_252_p3) - unsigned(sext_ln31_fu_248_p1));
    tmp_9_fu_370_p3 <= (tmp_13_fu_364_p2 & ap_const_lv24_0);
    tmp_fu_230_p3 <= x_V_fu_174_p2(47 downto 47);
    x_V_1_fu_178_p2 <= std_logic_vector(unsigned(Vq_cos_V_reg_422) + unsigned(Vd_sin_V_reg_417));
    x_V_fu_174_p2 <= std_logic_vector(unsigned(Vd_cos_V_reg_412) - unsigned(Vq_sin_V_reg_427));
    zext_ln12_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1548_1_fu_324_p2),2));
    zext_ln12_2_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_230_p3),2));
    zext_ln12_3_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_334_p3),2));
    zext_ln12_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1548_fu_220_p2),2));
    zext_ln19_fu_88_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(angle),64));
end behav;
