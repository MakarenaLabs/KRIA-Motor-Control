-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_park_direct_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Ialpha : IN STD_LOGIC_VECTOR (31 downto 0);
    Ibeta : IN STD_LOGIC_VECTOR (31 downto 0);
    angle : IN STD_LOGIC_VECTOR (9 downto 0);
    Id : OUT STD_LOGIC_VECTOR (31 downto 0);
    Id_ap_vld : OUT STD_LOGIC;
    Iq : OUT STD_LOGIC_VECTOR (31 downto 0);
    Iq_ap_vld : OUT STD_LOGIC;
    grp_fu_2056_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2056_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2056_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2056_p_ce : OUT STD_LOGIC;
    grp_fu_2060_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2060_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2060_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2060_p_ce : OUT STD_LOGIC;
    grp_fu_2076_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2076_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2076_p_ce : OUT STD_LOGIC;
    grp_fu_709_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_709_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_709_p_ce : OUT STD_LOGIC;
    grp_fu_2079_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2079_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2079_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2079_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2079_p_ce : OUT STD_LOGIC;
    grp_fu_699_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_699_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_699_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_699_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_699_p_ce : OUT STD_LOGIC;
    grp_fu_2072_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2072_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2072_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2072_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2072_p_ce : OUT STD_LOGIC;
    grp_fu_2064_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2064_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2064_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2064_p_ce : OUT STD_LOGIC;
    grp_fu_2068_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2068_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2068_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2068_p_ce : OUT STD_LOGIC );
end;


architecture behav of foc_park_direct_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_46FFFE00 : STD_LOGIC_VECTOR (31 downto 0) := "01000110111111111111111000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sine_d_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sine_d_ce0 : STD_LOGIC;
    signal sine_d_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cosine_d_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cosine_d_ce0 : STD_LOGIC;
    signal cosine_d_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sine_d_load_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cosine_d_load_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mul3_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal dc_2_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln354_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal or_ln30_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln354_2_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln34_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln31_2_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_147_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_160_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln30_fu_170_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln30_2_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_2_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_195_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_2_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_208_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_218_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_2_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_4_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_244_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_4_fu_252_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_256_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_266_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln31_fu_262_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln31_fu_274_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln12_5_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_6_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_5_fu_289_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_6_fu_297_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_2_fu_301_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln2_fu_311_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_fu_307_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln35_fu_319_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln30_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_113_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component foc_park_inverse_float_s_sine_i_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_park_inverse_float_s_cosine_i_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sine_d_U : component foc_park_inverse_float_s_sine_i_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sine_d_address0,
        ce0 => sine_d_ce0,
        q0 => sine_d_q0);

    cosine_d_U : component foc_park_inverse_float_s_cosine_i_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosine_d_address0,
        ce0 => cosine_d_ce0,
        q0 => cosine_d_q0);

    sitofp_32s_32_4_no_dsp_1_U77 : component foc_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_113_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_113_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U80 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_2_reg_426,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_126_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U81 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_2_reg_426,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_131_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cosine_d_load_reg_380 <= cosine_d_q0;
                sine_d_load_reg_374 <= sine_d_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                dc_2_reg_426 <= grp_fu_2072_p_dout0;
                dc_reg_418 <= grp_fu_699_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul3_reg_403 <= grp_fu_2068_p_dout0;
                mul4_reg_408 <= grp_fu_2056_p_dout0;
                mul5_reg_413 <= grp_fu_2060_p_dout0;
                mul_reg_398 <= grp_fu_2064_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                or_ln30_reg_439 <= or_ln30_fu_186_p2;
                or_ln34_reg_461 <= or_ln34_fu_234_p2;
                tmp_1_reg_468 <= grp_fu_126_p2;
                tmp_2_reg_473 <= grp_fu_131_p2;
                tmp_6_reg_446 <= grp_fu_709_p_dout0;
                tmp_7_reg_451 <= grp_fu_2079_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_5_reg_478 <= grp_fu_709_p_dout0;
                tmp_s_reg_488 <= grp_fu_2079_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Id <= 
        grp_fu_2076_p_dout0 when (and_ln30_fu_330_p2(0) = '1') else 
        dc_reg_418;

    Id_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Id_ap_vld <= ap_const_logic_1;
        else 
            Id_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Iq <= 
        grp_fu_113_p1 when (and_ln34_fu_341_p2(0) = '1') else 
        dc_2_reg_426;

    Iq_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Iq_ap_vld <= ap_const_logic_1;
        else 
            Iq_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln12_4_fu_248_p2 <= (tmp_7_reg_451 and or_ln30_reg_439);
    and_ln12_5_fu_285_p2 <= (tmp_1_reg_468 and or_ln34_reg_461);
    and_ln12_6_fu_293_p2 <= (tmp_2_reg_473 and or_ln34_reg_461);
    and_ln12_fu_240_p2 <= (tmp_6_reg_446 and or_ln30_reg_439);
    and_ln30_fu_330_p2 <= (tmp_5_reg_478 and or_ln30_reg_439);
    and_ln34_fu_341_p2 <= (tmp_s_reg_488 and or_ln34_reg_461);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln354_2_fu_203_p1 <= zext_ln368_2_fu_199_p1;
    bitcast_ln354_fu_155_p1 <= zext_ln368_fu_151_p1;
    cosine_d_address0 <= zext_ln19_fu_138_p1(10 - 1 downto 0);

    cosine_d_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cosine_d_ce0 <= ap_const_logic_1;
        else 
            cosine_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_2_fu_192_p1 <= dc_2_reg_426;
    data_V_fu_144_p1 <= dc_reg_418;
        grp_fu_113_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln35_fu_319_p2),32));


    grp_fu_116_p0_assign_proc : process(dc_reg_418, bitcast_ln354_fu_155_p1, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_116_p0 <= bitcast_ln354_fu_155_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_116_p0 <= dc_reg_418;
        else 
            grp_fu_116_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_116_p1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_116_p1 <= ap_const_lv32_46FFFE00;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_116_p1 <= ap_const_lv32_0;
        else 
            grp_fu_116_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_121_opcode_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_121_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_121_opcode <= ap_const_lv5_4;
        else 
            grp_fu_121_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_121_p0_assign_proc : process(dc_reg_418, ap_CS_fsm_state11, bitcast_ln354_2_fu_203_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_121_p0 <= bitcast_ln354_2_fu_203_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_121_p0 <= dc_reg_418;
        else 
            grp_fu_121_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_121_p1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_121_p1 <= ap_const_lv32_46FFFE00;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_121_p1 <= ap_const_lv32_0;
        else 
            grp_fu_121_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_2056_p_ce <= ap_const_logic_1;
    grp_fu_2056_p_din0 <= cosine_d_load_reg_380;
    grp_fu_2056_p_din1 <= Ibeta;
    grp_fu_2060_p_ce <= ap_const_logic_1;
    grp_fu_2060_p_din0 <= sine_d_load_reg_374;
    grp_fu_2060_p_din1 <= Ibeta;
    grp_fu_2064_p_ce <= ap_const_logic_1;
    grp_fu_2064_p_din0 <= cosine_d_load_reg_380;
    grp_fu_2064_p_din1 <= Ialpha;
    grp_fu_2068_p_ce <= ap_const_logic_1;
    grp_fu_2068_p_din0 <= sine_d_load_reg_374;
    grp_fu_2068_p_din1 <= Ialpha;
    grp_fu_2072_p_ce <= ap_const_logic_1;
    grp_fu_2072_p_din0 <= mul4_reg_408;
    grp_fu_2072_p_din1 <= mul3_reg_403;
    grp_fu_2072_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_2076_p_ce <= ap_const_logic_1;
    grp_fu_2076_p_din0 <= sext_ln31_2_fu_280_p1;
    grp_fu_2079_p_ce <= ap_const_logic_1;
    grp_fu_2079_p_din0 <= grp_fu_121_p0;
    grp_fu_2079_p_din1 <= grp_fu_121_p1;
    grp_fu_2079_p_opcode <= grp_fu_121_opcode;
    grp_fu_699_p_ce <= ap_const_logic_1;
    grp_fu_699_p_din0 <= mul_reg_398;
    grp_fu_699_p_din1 <= mul5_reg_413;
    grp_fu_699_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_709_p_ce <= ap_const_logic_1;
    grp_fu_709_p_din0 <= grp_fu_116_p0;
    grp_fu_709_p_din1 <= grp_fu_116_p1;
    grp_fu_709_p_opcode <= ap_const_lv5_2;
    icmp_ln30_2_fu_180_p2 <= "1" when (trunc_ln30_fu_170_p1 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_174_p2 <= "0" when (tmp_fu_160_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_2_fu_228_p2 <= "1" when (trunc_ln34_fu_218_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_222_p2 <= "0" when (tmp_8_fu_208_p4 = ap_const_lv8_FF) else "1";
    or_ln30_fu_186_p2 <= (icmp_ln30_fu_174_p2 or icmp_ln30_2_fu_180_p2);
    or_ln34_fu_234_p2 <= (icmp_ln34_fu_222_p2 or icmp_ln34_2_fu_228_p2);
    p_Result_2_fu_195_p1 <= data_V_2_fu_192_p1(31 - 1 downto 0);
    p_Result_s_fu_147_p1 <= data_V_fu_144_p1(31 - 1 downto 0);
        sext_ln31_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln31_fu_274_p2),32));

        sext_ln31_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_fu_256_p2),17));

        sext_ln35_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_2_fu_301_p2),17));

    shl_ln2_fu_311_p3 <= (sub_ln12_2_fu_301_p2 & ap_const_lv15_0);
    shl_ln_fu_266_p3 <= (sub_ln12_fu_256_p2 & ap_const_lv15_0);
    sine_d_address0 <= zext_ln19_fu_138_p1(10 - 1 downto 0);

    sine_d_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sine_d_ce0 <= ap_const_logic_1;
        else 
            sine_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln12_2_fu_301_p2 <= std_logic_vector(unsigned(zext_ln12_5_fu_289_p1) - unsigned(zext_ln12_6_fu_297_p1));
    sub_ln12_fu_256_p2 <= std_logic_vector(unsigned(zext_ln12_fu_244_p1) - unsigned(zext_ln12_4_fu_252_p1));
    sub_ln31_fu_274_p2 <= std_logic_vector(unsigned(shl_ln_fu_266_p3) - unsigned(sext_ln31_fu_262_p1));
    sub_ln35_fu_319_p2 <= std_logic_vector(unsigned(shl_ln2_fu_311_p3) - unsigned(sext_ln35_fu_307_p1));
    tmp_8_fu_208_p4 <= data_V_2_fu_192_p1(30 downto 23);
    tmp_fu_160_p4 <= data_V_fu_144_p1(30 downto 23);
    trunc_ln30_fu_170_p1 <= data_V_fu_144_p1(23 - 1 downto 0);
    trunc_ln34_fu_218_p1 <= data_V_2_fu_192_p1(23 - 1 downto 0);
    zext_ln12_4_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_4_fu_248_p2),2));
    zext_ln12_5_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_5_fu_285_p2),2));
    zext_ln12_6_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_6_fu_293_p2),2));
    zext_ln12_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_fu_240_p2),2));
    zext_ln19_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(angle),64));
    zext_ln368_2_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_195_p1),32));
    zext_ln368_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_147_p1),32));
end behav;
