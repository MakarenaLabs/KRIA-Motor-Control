-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_clarke_direct_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Ia : IN STD_LOGIC_VECTOR (31 downto 0);
    Ib : IN STD_LOGIC_VECTOR (31 downto 0);
    Ialpha : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ialpha_ap_vld : OUT STD_LOGIC;
    Ibeta : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ibeta_ap_vld : OUT STD_LOGIC;
    grp_fu_699_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_699_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_699_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_699_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_699_p_ce : OUT STD_LOGIC;
    grp_fu_2056_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2056_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2056_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2056_p_ce : OUT STD_LOGIC;
    grp_fu_2076_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2076_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2076_p_ce : OUT STD_LOGIC;
    grp_fu_709_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_709_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_709_p_ce : OUT STD_LOGIC;
    grp_fu_2079_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2079_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2079_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_2079_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2079_p_ce : OUT STD_LOGIC );
end;


architecture behav of foc_clarke_direct_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3F13CD36 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000100111100110100110110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_46FFFE00 : STD_LOGIC_VECTOR (31 downto 0) := "01000110111111111111111000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_71 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bitcast_ln354_fu_89_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln16_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln19_1_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib_temp_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bitcast_ln354_3_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal or_ln25_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln26_1_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_48_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_48_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_55_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_58_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_58_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_64_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_78_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_81_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_94_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln16_fu_104_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln16_1_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_12_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_130_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_12_fu_138_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_142_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_152_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln19_fu_148_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln19_fu_160_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln16_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_7_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_192_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_5_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_205_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln25_fu_215_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln25_1_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_13_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_14_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_13_fu_241_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_14_fu_249_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_5_fu_253_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln5_fu_263_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln26_fu_259_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln26_fu_271_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln25_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_58_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Ib_temp_reg_346 <= grp_fu_699_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                or_ln16_reg_319 <= or_ln16_fu_120_p2;
                tmp_29_reg_326 <= grp_fu_709_p_dout0;
                tmp_30_reg_331 <= grp_fu_2079_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                or_ln25_reg_356 <= or_ln25_fu_231_p2;
                tmp_33_reg_363 <= grp_fu_709_p_dout0;
                tmp_34_reg_368 <= grp_fu_2079_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_71 <= grp_fu_2056_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_32_reg_373 <= grp_fu_709_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_s_reg_336 <= grp_fu_709_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ialpha <= 
        Ia when (and_ln16_fu_171_p2(0) = '1') else 
        grp_fu_2076_p_dout0;

    Ialpha_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Ialpha_ap_vld <= ap_const_logic_1;
        else 
            Ialpha_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Ibeta <= 
        grp_fu_2076_p_dout0 when (and_ln25_fu_282_p2(0) = '1') else 
        reg_71;

    Ibeta_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            Ibeta_ap_vld <= ap_const_logic_1;
        else 
            Ibeta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln12_12_fu_134_p2 <= (tmp_30_reg_331 and or_ln16_reg_319);
    and_ln12_13_fu_237_p2 <= (tmp_33_reg_363 and or_ln25_reg_356);
    and_ln12_14_fu_245_p2 <= (tmp_34_reg_368 and or_ln25_reg_356);
    and_ln12_fu_126_p2 <= (tmp_29_reg_326 and or_ln16_reg_319);
    and_ln16_fu_171_p2 <= (tmp_s_reg_336 and or_ln16_reg_319);
    and_ln25_fu_282_p2 <= (tmp_32_reg_373 and or_ln25_reg_356);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln354_3_fu_200_p1 <= zext_ln368_5_fu_196_p1;
    bitcast_ln354_fu_89_p1 <= zext_ln368_fu_85_p1;
    data_V_7_fu_188_p1 <= reg_71;
    data_V_fu_78_p1 <= Ia;
    grp_fu_2056_p_ce <= ap_const_logic_1;
    grp_fu_2056_p_din0 <= grp_fu_48_p0;
    grp_fu_2056_p_din1 <= grp_fu_48_p1;
    grp_fu_2076_p_ce <= ap_const_logic_1;
    grp_fu_2076_p_din0 <= grp_fu_55_p0;
    grp_fu_2079_p_ce <= ap_const_logic_1;
    grp_fu_2079_p_din0 <= grp_fu_64_p0;
    grp_fu_2079_p_din1 <= ap_const_lv32_0;
    grp_fu_2079_p_opcode <= ap_const_lv5_4;

    grp_fu_48_p0_assign_proc : process(ap_CS_fsm_state1, Ib, Ib_temp_reg_346, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_48_p0 <= Ib_temp_reg_346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_48_p0 <= Ib;
        else 
            grp_fu_48_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_48_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_48_p1 <= ap_const_lv32_3F13CD36;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_48_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_48_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_55_p0_assign_proc : process(ap_CS_fsm_state3, sext_ln19_1_fu_166_p1, ap_CS_fsm_state13, sext_ln26_1_fu_277_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_55_p0 <= sext_ln26_1_fu_277_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_55_p0 <= sext_ln19_1_fu_166_p1;
        else 
            grp_fu_55_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_58_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_58_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_58_opcode <= ap_const_lv5_2;
        else 
            grp_fu_58_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_58_p0_assign_proc : process(ap_CS_fsm_state1, Ia, reg_71, bitcast_ln354_fu_89_p1, ap_CS_fsm_state2, bitcast_ln354_3_fu_200_p1, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_58_p0 <= bitcast_ln354_3_fu_200_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_58_p0 <= reg_71;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_58_p0 <= bitcast_ln354_fu_89_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_58_p0 <= Ia;
        else 
            grp_fu_58_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_58_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_58_p1 <= ap_const_lv32_46FFFE00;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_58_p1 <= ap_const_lv32_0;
        else 
            grp_fu_58_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_64_p0_assign_proc : process(ap_CS_fsm_state1, Ia, reg_71, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_64_p0 <= reg_71;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_64_p0 <= Ia;
        else 
            grp_fu_64_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_699_p_ce <= ap_const_logic_1;
    grp_fu_699_p_din0 <= reg_71;
    grp_fu_699_p_din1 <= Ia;
    grp_fu_699_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_709_p_ce <= ap_const_logic_1;
    grp_fu_709_p_din0 <= grp_fu_58_p0;
    grp_fu_709_p_din1 <= grp_fu_58_p1;
    grp_fu_709_p_opcode <= grp_fu_58_opcode;
    icmp_ln16_1_fu_114_p2 <= "1" when (trunc_ln16_fu_104_p1 = ap_const_lv23_0) else "0";
    icmp_ln16_fu_108_p2 <= "0" when (tmp_fu_94_p4 = ap_const_lv8_FF) else "1";
    icmp_ln25_1_fu_225_p2 <= "1" when (trunc_ln25_fu_215_p1 = ap_const_lv23_0) else "0";
    icmp_ln25_fu_219_p2 <= "0" when (tmp_31_fu_205_p4 = ap_const_lv8_FF) else "1";
    or_ln16_fu_120_p2 <= (icmp_ln16_fu_108_p2 or icmp_ln16_1_fu_114_p2);
    or_ln25_fu_231_p2 <= (icmp_ln25_fu_219_p2 or icmp_ln25_1_fu_225_p2);
    p_Result_7_fu_192_p1 <= data_V_7_fu_188_p1(31 - 1 downto 0);
    p_Result_s_fu_81_p1 <= data_V_fu_78_p1(31 - 1 downto 0);
        sext_ln19_1_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_fu_160_p2),32));

        sext_ln19_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_fu_142_p2),17));

        sext_ln26_1_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_271_p2),32));

        sext_ln26_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_5_fu_253_p2),17));

    shl_ln5_fu_263_p3 <= (sub_ln12_5_fu_253_p2 & ap_const_lv15_0);
    shl_ln_fu_152_p3 <= (sub_ln12_fu_142_p2 & ap_const_lv15_0);
    sub_ln12_5_fu_253_p2 <= std_logic_vector(unsigned(zext_ln12_13_fu_241_p1) - unsigned(zext_ln12_14_fu_249_p1));
    sub_ln12_fu_142_p2 <= std_logic_vector(unsigned(zext_ln12_fu_130_p1) - unsigned(zext_ln12_12_fu_138_p1));
    sub_ln19_fu_160_p2 <= std_logic_vector(unsigned(shl_ln_fu_152_p3) - unsigned(sext_ln19_fu_148_p1));
    sub_ln26_fu_271_p2 <= std_logic_vector(unsigned(shl_ln5_fu_263_p3) - unsigned(sext_ln26_fu_259_p1));
    tmp_31_fu_205_p4 <= data_V_7_fu_188_p1(30 downto 23);
    tmp_fu_94_p4 <= data_V_fu_78_p1(30 downto 23);
    trunc_ln16_fu_104_p1 <= data_V_fu_78_p1(23 - 1 downto 0);
    trunc_ln25_fu_215_p1 <= data_V_7_fu_188_p1(23 - 1 downto 0);
    zext_ln12_12_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_12_fu_134_p2),2));
    zext_ln12_13_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_13_fu_237_p2),2));
    zext_ln12_14_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_14_fu_245_p2),2));
    zext_ln12_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_fu_126_p2),2));
    zext_ln368_5_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_192_p1),32));
    zext_ln368_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_81_p1),32));
end behav;
