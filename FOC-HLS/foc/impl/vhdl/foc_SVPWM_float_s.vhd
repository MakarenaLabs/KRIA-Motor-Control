-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_SVPWM_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Va : IN STD_LOGIC_VECTOR (31 downto 0);
    Vb : IN STD_LOGIC_VECTOR (31 downto 0);
    Vc : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of foc_SVPWM_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln12_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln12_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1092 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_20_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_21_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln12_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln12_1_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_111_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_fu_121_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln12_4_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_3_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_128_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_1_fu_138_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln12_6_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_5_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_1_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_34_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln13_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln13_1_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_200_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln13_fu_210_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln13_1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_217_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln13_1_fu_227_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln13_3_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_2_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_1_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal data_V_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_306_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_310_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_121_fu_296_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_fu_348_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_352_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_320_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_fu_364_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_368_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_6_fu_374_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_fu_392_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_fu_402_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_30_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_14_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_424_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_fu_430_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_440_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_448_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_99_fu_458_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln192_fu_468_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln12_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_488_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln19_fu_500_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln19_fu_504_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln19_fu_510_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln18_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln19_2_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_20_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_fu_557_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_3_fu_561_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_123_fu_547_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_3_fu_575_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_3_fu_579_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_3_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_3_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_3_fu_599_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_3_fu_603_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_3_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_571_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_3_fu_615_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_7_fu_619_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_105_fu_631_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_8_fu_625_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_3_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_fu_643_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_3_fu_653_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_32_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_19_fu_661_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_23_fu_667_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_33_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_33_fu_681_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_24_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_699_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_109_fu_709_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln192_1_fu_719_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln12_1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_743_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_34_fu_739_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln24_fu_751_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln24_fu_755_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln8_fu_765_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln24_3_fu_773_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_21_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_fu_808_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_4_fu_812_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_125_fu_798_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_4_fu_826_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_4_fu_830_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_4_fu_844_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_4_fu_836_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_4_fu_850_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_4_fu_854_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_4_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_4_fu_822_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_4_fu_866_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_9_fu_870_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_115_fu_882_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_10_fu_876_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_4_fu_890_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_96_fu_894_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_4_fu_904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_34_fu_790_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_22_fu_912_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_24_fu_918_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_38_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_35_fu_932_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_29_fu_942_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_950_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_119_fu_960_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln192_2_fu_970_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln12_2_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_994_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_35_fu_990_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln29_fu_1002_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln29_fu_1006_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln9_fu_1016_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln29_fu_1012_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln28_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln29_1_fu_1024_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln18_fu_528_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_fu_779_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln28_fu_1030_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component foc_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1092,
        din1 => Va,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U2 : component foc_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1092,
        din1 => Vb,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U3 : component foc_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1092,
        din1 => Vc,
        ce => ap_const_logic_1,
        dout => grp_fu_92_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U4 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln13_reg_1087,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_96_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U5 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p0,
        din1 => grp_fu_101_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_101_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                dc_20_reg_1104 <= grp_fu_88_p2;
                dc_21_reg_1109 <= grp_fu_92_p2;
                dc_reg_1099 <= grp_fu_84_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_reg_1092 <= grp_fu_96_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln12_reg_1080 <= select_ln12_fu_190_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                select_ln13_reg_1087 <= select_ln13_fu_279_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln344_3_fu_579_p2 <= std_logic_vector(unsigned(zext_ln344_3_fu_575_p1) + unsigned(ap_const_lv9_181));
    add_ln344_4_fu_830_p2 <= std_logic_vector(unsigned(zext_ln344_4_fu_826_p1) + unsigned(ap_const_lv9_181));
    add_ln344_fu_328_p2 <= std_logic_vector(unsigned(zext_ln344_fu_324_p1) + unsigned(ap_const_lv9_181));
    and_ln12_34_fu_184_p2 <= (grp_fu_101_p2 and and_ln12_fu_178_p2);
    and_ln12_fu_178_p2 <= (or_ln12_fu_154_p2 and or_ln12_1_fu_172_p2);
    and_ln13_1_fu_273_p2 <= (grp_fu_101_p2 and and_ln13_fu_267_p2);
    and_ln13_fu_267_p2 <= (or_ln13_fu_243_p2 and or_ln13_1_fu_261_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln18_fu_528_p3;
    ap_return_1 <= select_ln23_fu_779_p3;
    ap_return_2 <= select_ln28_fu_1030_p3;
    bitcast_ln12_1_fu_125_p1 <= Vb;
    bitcast_ln12_fu_108_p1 <= Va;
    bitcast_ln13_1_fu_214_p1 <= Vc;
    bitcast_ln13_fu_197_p1 <= select_ln12_reg_1080;
    data_V_20_fu_536_p1 <= dc_20_reg_1104;
    data_V_21_fu_787_p1 <= dc_21_reg_1109;
    data_V_fu_285_p1 <= dc_reg_1099;

    grp_fu_101_p0_assign_proc : process(ap_CS_fsm_state1, Va, ap_CS_fsm_state2, select_ln12_fu_190_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_p0 <= select_ln12_fu_190_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_101_p0 <= Va;
        else 
            grp_fu_101_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_101_p1_assign_proc : process(ap_CS_fsm_state1, Vb, Vc, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_101_p1 <= Vc;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_101_p1 <= Vb;
        else 
            grp_fu_101_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_1_fu_733_p2 <= "1" when (signed(result_V_23_fu_667_p3) > signed(ap_const_lv16_0)) else "0";
    icmp_ln12_2_fu_984_p2 <= "1" when (signed(result_V_24_fu_918_p3) > signed(ap_const_lv16_0)) else "0";
    icmp_ln12_3_fu_142_p2 <= "0" when (tmp_s_fu_111_p4 = ap_const_lv8_FF) else "1";
    icmp_ln12_4_fu_148_p2 <= "1" when (trunc_ln12_fu_121_p1 = ap_const_lv23_0) else "0";
    icmp_ln12_5_fu_160_p2 <= "0" when (tmp_86_fu_128_p4 = ap_const_lv8_FF) else "1";
    icmp_ln12_6_fu_166_p2 <= "1" when (trunc_ln12_1_fu_138_p1 = ap_const_lv23_0) else "0";
    icmp_ln12_fu_482_p2 <= "1" when (signed(result_V_fu_416_p3) > signed(ap_const_lv16_0)) else "0";
    icmp_ln13_1_fu_237_p2 <= "1" when (trunc_ln13_fu_210_p1 = ap_const_lv23_0) else "0";
    icmp_ln13_2_fu_249_p2 <= "0" when (tmp_89_fu_217_p4 = ap_const_lv8_FF) else "1";
    icmp_ln13_3_fu_255_p2 <= "1" when (trunc_ln13_1_fu_227_p1 = ap_const_lv23_0) else "0";
    icmp_ln13_fu_231_p2 <= "0" when (tmp_88_fu_200_p4 = ap_const_lv8_FF) else "1";
    icmp_ln18_fu_476_p2 <= "1" when (select_ln192_fu_468_p3 = ap_const_lv2_1) else "0";
    icmp_ln23_fu_727_p2 <= "1" when (select_ln192_1_fu_719_p3 = ap_const_lv2_1) else "0";
    icmp_ln28_fu_978_p2 <= "1" when (select_ln192_2_fu_970_p3 = ap_const_lv2_1) else "0";
    isNeg_3_fu_585_p3 <= add_ln344_3_fu_579_p2(8 downto 8);
    isNeg_4_fu_836_p3 <= add_ln344_4_fu_830_p2(8 downto 8);
    isNeg_fu_334_p3 <= add_ln344_fu_328_p2(8 downto 8);
    mantissa_3_fu_561_p4 <= ((ap_const_lv1_1 & tmp_124_fu_557_p1) & ap_const_lv1_0);
    mantissa_4_fu_812_p4 <= ((ap_const_lv1_1 & tmp_126_fu_808_p1) & ap_const_lv1_0);
    mantissa_fu_310_p4 <= ((ap_const_lv1_1 & tmp_122_fu_306_p1) & ap_const_lv1_0);
    or_ln12_1_fu_172_p2 <= (icmp_ln12_6_fu_166_p2 or icmp_ln12_5_fu_160_p2);
    or_ln12_fu_154_p2 <= (icmp_ln12_4_fu_148_p2 or icmp_ln12_3_fu_142_p2);
    or_ln13_1_fu_261_p2 <= (icmp_ln13_3_fu_255_p2 or icmp_ln13_2_fu_249_p2);
    or_ln13_fu_243_p2 <= (icmp_ln13_fu_231_p2 or icmp_ln13_1_fu_237_p2);
    p_Result_24_fu_691_p3 <= result_V_23_fu_667_p3(15 downto 15);
    p_Result_29_fu_942_p3 <= result_V_24_fu_918_p3(15 downto 15);
    p_Result_30_fu_288_p3 <= data_V_fu_285_p1(31 downto 31);
    
    p_Result_31_fu_430_p4_proc : process(p_Val2_s_fu_424_p2)
    begin
        p_Result_31_fu_430_p4 <= p_Val2_s_fu_424_p2;
        p_Result_31_fu_430_p4(15) <= ap_const_lv1_0(0);
    end process;

    p_Result_32_fu_539_p3 <= data_V_20_fu_536_p1(31 downto 31);
    
    p_Result_33_fu_681_p4_proc : process(p_Val2_33_fu_675_p2)
    begin
        p_Result_33_fu_681_p4 <= p_Val2_33_fu_675_p2;
        p_Result_33_fu_681_p4(15) <= ap_const_lv1_0(0);
    end process;

    p_Result_34_fu_790_p3 <= data_V_21_fu_787_p1(31 downto 31);
    
    p_Result_35_fu_932_p4_proc : process(p_Val2_38_fu_926_p2)
    begin
        p_Result_35_fu_932_p4 <= p_Val2_38_fu_926_p2;
        p_Result_35_fu_932_p4(15) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_440_p3 <= result_V_fu_416_p3(15 downto 15);
    p_Val2_33_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(result_V_23_fu_667_p3));
    p_Val2_38_fu_926_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(result_V_24_fu_918_p3));
    p_Val2_s_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(result_V_fu_416_p3));
    r_V_10_fu_876_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_4_fu_822_p1),to_integer(unsigned('0' & zext_ln1340_4_fu_866_p1(31-1 downto 0)))));
    r_V_6_fu_374_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_320_p1),to_integer(unsigned('0' & zext_ln1340_fu_364_p1(31-1 downto 0)))));
    r_V_7_fu_619_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_571_p1),to_integer(unsigned('0' & zext_ln1340_3_fu_615_p1(31-1 downto 0)))));
    r_V_8_fu_625_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_571_p1),to_integer(unsigned('0' & zext_ln1340_3_fu_615_p1(31-1 downto 0)))));
    r_V_9_fu_870_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_4_fu_822_p1),to_integer(unsigned('0' & zext_ln1340_4_fu_866_p1(31-1 downto 0)))));
    r_V_fu_368_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_320_p1),to_integer(unsigned('0' & zext_ln1340_fu_364_p1(31-1 downto 0)))));
    result_V_14_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_402_p3));
    result_V_19_fu_661_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_3_fu_653_p3));
    result_V_22_fu_912_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_4_fu_904_p3));
    result_V_23_fu_667_p3 <= 
        result_V_19_fu_661_p2 when (p_Result_32_fu_539_p3(0) = '1') else 
        val_3_fu_653_p3;
    result_V_24_fu_918_p3 <= 
        result_V_22_fu_912_p2 when (p_Result_34_fu_790_p3(0) = '1') else 
        val_4_fu_904_p3;
    result_V_fu_416_p3 <= 
        result_V_14_fu_410_p2 when (p_Result_30_fu_288_p3(0) = '1') else 
        val_fu_402_p3;
    select_ln12_fu_190_p3 <= 
        Va when (and_ln12_34_fu_184_p2(0) = '1') else 
        Vb;
    select_ln13_fu_279_p3 <= 
        select_ln12_reg_1080 when (and_ln13_1_fu_273_p2(0) = '1') else 
        Vc;
    select_ln18_fu_528_p3 <= 
        sub_ln19_2_fu_522_p2 when (icmp_ln18_fu_476_p2(0) = '1') else 
        result_V_fu_416_p3;
    select_ln192_1_fu_719_p3 <= 
        tmp_108_fu_699_p4 when (p_Result_24_fu_691_p3(0) = '1') else 
        tmp_109_fu_709_p4;
    select_ln192_2_fu_970_p3 <= 
        tmp_118_fu_950_p4 when (p_Result_29_fu_942_p3(0) = '1') else 
        tmp_119_fu_960_p4;
    select_ln192_fu_468_p3 <= 
        tmp_98_fu_448_p4 when (p_Result_s_fu_440_p3(0) = '1') else 
        tmp_99_fu_458_p4;
    select_ln23_fu_779_p3 <= 
        sub_ln24_3_fu_773_p2 when (icmp_ln23_fu_727_p2(0) = '1') else 
        result_V_23_fu_667_p3;
    select_ln28_fu_1030_p3 <= 
        sub_ln29_1_fu_1024_p2 when (icmp_ln28_fu_978_p2(0) = '1') else 
        result_V_24_fu_918_p3;
        sext_ln1340_3_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_3_fu_603_p3),32));

        sext_ln1340_4_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_4_fu_854_p3),32));

        sext_ln1340_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_352_p3),32));

        sext_ln1364_3_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_3_fu_593_p2),9));

        sext_ln1364_4_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_4_fu_844_p2),9));

        sext_ln1364_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_fu_342_p2),9));

        sext_ln19_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln19_fu_504_p2),16));

        sext_ln24_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln24_fu_755_p2),16));

        sext_ln29_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln29_fu_1006_p2),16));

    shl_ln8_fu_765_p3 <= (sub_ln24_fu_755_p2 & ap_const_lv14_0);
    shl_ln9_fu_1016_p3 <= (sub_ln29_fu_1006_p2 & ap_const_lv14_0);
    shl_ln_fu_514_p3 <= (sub_ln19_fu_504_p2 & ap_const_lv14_0);
    sub_ln1364_3_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_123_fu_547_p4));
    sub_ln1364_4_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_125_fu_798_p4));
    sub_ln1364_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_121_fu_296_p4));
    sub_ln19_2_fu_522_p2 <= std_logic_vector(unsigned(shl_ln_fu_514_p3) - unsigned(sext_ln19_fu_510_p1));
    sub_ln19_fu_504_p2 <= std_logic_vector(unsigned(zext_ln12_fu_488_p1) - unsigned(zext_ln19_fu_500_p1));
    sub_ln24_3_fu_773_p2 <= std_logic_vector(unsigned(shl_ln8_fu_765_p3) - unsigned(sext_ln24_fu_761_p1));
    sub_ln24_fu_755_p2 <= std_logic_vector(unsigned(zext_ln12_34_fu_739_p1) - unsigned(zext_ln24_fu_751_p1));
    sub_ln29_1_fu_1024_p2 <= std_logic_vector(unsigned(shl_ln9_fu_1016_p3) - unsigned(sext_ln29_fu_1012_p1));
    sub_ln29_fu_1006_p2 <= std_logic_vector(unsigned(zext_ln12_35_fu_990_p1) - unsigned(zext_ln29_fu_1002_p1));
    tmp_100_fu_492_p3 <= result_V_fu_416_p3(15 downto 15);
    tmp_105_fu_631_p3 <= r_V_7_fu_619_p2(24 downto 24);
    tmp_108_fu_699_p4 <= p_Result_33_fu_681_p4(15 downto 14);
    tmp_109_fu_709_p4 <= result_V_23_fu_667_p3(15 downto 14);
    tmp_110_fu_743_p3 <= result_V_23_fu_667_p3(15 downto 15);
    tmp_115_fu_882_p3 <= r_V_9_fu_870_p2(24 downto 24);
    tmp_118_fu_950_p4 <= p_Result_35_fu_932_p4(15 downto 14);
    tmp_119_fu_960_p4 <= result_V_24_fu_918_p3(15 downto 14);
    tmp_120_fu_994_p3 <= result_V_24_fu_918_p3(15 downto 15);
    tmp_121_fu_296_p4 <= data_V_fu_285_p1(30 downto 23);
    tmp_122_fu_306_p1 <= data_V_fu_285_p1(23 - 1 downto 0);
    tmp_123_fu_547_p4 <= data_V_20_fu_536_p1(30 downto 23);
    tmp_124_fu_557_p1 <= data_V_20_fu_536_p1(23 - 1 downto 0);
    tmp_125_fu_798_p4 <= data_V_21_fu_787_p1(30 downto 23);
    tmp_126_fu_808_p1 <= data_V_21_fu_787_p1(23 - 1 downto 0);
    tmp_86_fu_128_p4 <= bitcast_ln12_1_fu_125_p1(30 downto 23);
    tmp_88_fu_200_p4 <= bitcast_ln13_fu_197_p1(30 downto 23);
    tmp_89_fu_217_p4 <= bitcast_ln13_1_fu_214_p1(30 downto 23);
    tmp_92_fu_392_p4 <= r_V_6_fu_374_p2(39 downto 24);
    tmp_94_fu_643_p4 <= r_V_8_fu_625_p2(39 downto 24);
    tmp_96_fu_894_p4 <= r_V_10_fu_876_p2(39 downto 24);
    tmp_98_fu_448_p4 <= p_Result_31_fu_430_p4(15 downto 14);
    tmp_99_fu_458_p4 <= result_V_fu_416_p3(15 downto 14);
    tmp_fu_380_p3 <= r_V_fu_368_p2(24 downto 24);
    tmp_s_fu_111_p4 <= bitcast_ln12_fu_108_p1(30 downto 23);
    trunc_ln12_1_fu_138_p1 <= bitcast_ln12_1_fu_125_p1(23 - 1 downto 0);
    trunc_ln12_fu_121_p1 <= bitcast_ln12_fu_108_p1(23 - 1 downto 0);
    trunc_ln13_1_fu_227_p1 <= bitcast_ln13_1_fu_214_p1(23 - 1 downto 0);
    trunc_ln13_fu_210_p1 <= bitcast_ln13_fu_197_p1(23 - 1 downto 0);
    ush_3_fu_603_p3 <= 
        sext_ln1364_3_fu_599_p1 when (isNeg_3_fu_585_p3(0) = '1') else 
        add_ln344_3_fu_579_p2;
    ush_4_fu_854_p3 <= 
        sext_ln1364_4_fu_850_p1 when (isNeg_4_fu_836_p3(0) = '1') else 
        add_ln344_4_fu_830_p2;
    ush_fu_352_p3 <= 
        sext_ln1364_fu_348_p1 when (isNeg_fu_334_p3(0) = '1') else 
        add_ln344_fu_328_p2;
    val_3_fu_653_p3 <= 
        zext_ln671_3_fu_639_p1 when (isNeg_3_fu_585_p3(0) = '1') else 
        tmp_94_fu_643_p4;
    val_4_fu_904_p3 <= 
        zext_ln671_4_fu_890_p1 when (isNeg_4_fu_836_p3(0) = '1') else 
        tmp_96_fu_894_p4;
    val_fu_402_p3 <= 
        zext_ln671_fu_388_p1 when (isNeg_fu_334_p3(0) = '1') else 
        tmp_92_fu_392_p4;
    zext_ln12_34_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln12_1_fu_733_p2),2));
    zext_ln12_35_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln12_2_fu_984_p2),2));
    zext_ln12_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln12_fu_482_p2),2));
    zext_ln1340_3_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_3_fu_611_p1),63));
    zext_ln1340_4_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_4_fu_862_p1),63));
    zext_ln1340_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_fu_360_p1),63));
    zext_ln15_3_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_561_p4),63));
    zext_ln15_4_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_4_fu_812_p4),63));
    zext_ln15_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_310_p4),63));
    zext_ln19_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_492_p3),2));
    zext_ln24_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_743_p3),2));
    zext_ln29_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_994_p3),2));
    zext_ln344_3_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_547_p4),9));
    zext_ln344_4_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_fu_798_p4),9));
    zext_ln344_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_296_p4),9));
    zext_ln671_3_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_631_p3),16));
    zext_ln671_4_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_882_p3),16));
    zext_ln671_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_380_p3),16));
end behav;
