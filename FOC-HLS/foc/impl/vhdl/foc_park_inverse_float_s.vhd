-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_park_inverse_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Vd : IN STD_LOGIC_VECTOR (31 downto 0);
    Vq : IN STD_LOGIC_VECTOR (31 downto 0);
    angle : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of foc_park_inverse_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_46FFFE00 : STD_LOGIC_VECTOR (31 downto 0) := "01000110111111111111111000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sine_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sine_i_ce0 : STD_LOGIC;
    signal sine_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cosine_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal cosine_i_ce0 : STD_LOGIC;
    signal cosine_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sine_i_load_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cosine_i_load_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_88_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_1_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln354_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal or_ln30_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln354_1_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln34_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_145_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln30_fu_168_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln30_1_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_1_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_193_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_1_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_216_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_242_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_1_fu_250_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_254_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_264_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln31_fu_260_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln31_fu_272_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln12_2_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_3_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_2_fu_287_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_3_fu_295_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_1_fu_299_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_309_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_fu_305_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln35_fu_317_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal and_ln30_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln34_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln34_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component foc_park_inverse_float_s_sine_i_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_park_inverse_float_s_cosine_i_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sine_i_U : component foc_park_inverse_float_s_sine_i_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sine_i_address0,
        ce0 => sine_i_ce0,
        q0 => sine_i_q0);

    cosine_i_U : component foc_park_inverse_float_s_cosine_i_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cosine_i_address0,
        ce0 => cosine_i_ce0,
        q0 => cosine_i_q0);

    fsub_32ns_32ns_32_4_full_dsp_1_U1 : component foc_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_396,
        din1 => mul5_reg_411,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    fadd_32ns_32ns_32_4_full_dsp_1_U2 : component foc_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul4_reg_406,
        din1 => mul3_reg_401,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U3 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cosine_i_load_reg_378,
        din1 => Vd,
        ce => ap_const_logic_1,
        dout => grp_fu_88_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U4 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sine_i_load_reg_372,
        din1 => Vd,
        ce => ap_const_logic_1,
        dout => grp_fu_93_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U5 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cosine_i_load_reg_378,
        din1 => Vq,
        ce => ap_const_logic_1,
        dout => grp_fu_98_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U6 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sine_i_load_reg_372,
        din1 => Vq,
        ce => ap_const_logic_1,
        dout => grp_fu_103_p2);

    sitofp_32s_32_4_no_dsp_1_U7 : component foc_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_108_p1);

    sitofp_32s_32_4_no_dsp_1_U8 : component foc_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_111_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_111_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U9 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_114_p0,
        din1 => grp_fu_114_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_114_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U10 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_119_p0,
        din1 => grp_fu_119_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_119_opcode,
        dout => grp_fu_119_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U11 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_1_reg_424,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_124_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U12 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_1_reg_424,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_129_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_0_preg <= select_ln30_fu_332_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_1_preg <= select_ln34_fu_343_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cosine_i_load_reg_378 <= cosine_i_q0;
                sine_i_load_reg_372 <= sine_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                dc_1_reg_424 <= grp_fu_84_p2;
                dc_reg_416 <= grp_fu_80_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul3_reg_401 <= grp_fu_93_p2;
                mul4_reg_406 <= grp_fu_98_p2;
                mul5_reg_411 <= grp_fu_103_p2;
                mul_reg_396 <= grp_fu_88_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                or_ln30_reg_437 <= or_ln30_fu_184_p2;
                or_ln34_reg_459 <= or_ln34_fu_232_p2;
                tmp_1_reg_466 <= grp_fu_124_p2;
                tmp_4_reg_471 <= grp_fu_129_p2;
                tmp_5_reg_444 <= grp_fu_114_p2;
                tmp_7_reg_449 <= grp_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_3_reg_476 <= grp_fu_114_p2;
                tmp_s_reg_486 <= grp_fu_119_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln12_1_fu_246_p2 <= (tmp_7_reg_449 and or_ln30_reg_437);
    and_ln12_2_fu_283_p2 <= (tmp_1_reg_466 and or_ln34_reg_459);
    and_ln12_3_fu_291_p2 <= (tmp_4_reg_471 and or_ln34_reg_459);
    and_ln12_fu_238_p2 <= (tmp_5_reg_444 and or_ln30_reg_437);
    and_ln30_fu_328_p2 <= (tmp_3_reg_476 and or_ln30_reg_437);
    and_ln34_fu_339_p2 <= (tmp_s_reg_486 and or_ln34_reg_459);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state15, select_ln30_fu_332_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_return_0 <= select_ln30_fu_332_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state15, select_ln34_fu_343_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_return_1 <= select_ln34_fu_343_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln354_1_fu_201_p1 <= zext_ln368_1_fu_197_p1;
    bitcast_ln354_fu_153_p1 <= zext_ln368_fu_149_p1;
    cosine_i_address0 <= zext_ln19_fu_136_p1(10 - 1 downto 0);

    cosine_i_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cosine_i_ce0 <= ap_const_logic_1;
        else 
            cosine_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_190_p1 <= dc_1_reg_424;
    data_V_fu_142_p1 <= dc_reg_416;
        grp_fu_108_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln31_fu_272_p2),32));

        grp_fu_111_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln35_fu_317_p2),32));


    grp_fu_114_p0_assign_proc : process(dc_reg_416, bitcast_ln354_fu_153_p1, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_114_p0 <= bitcast_ln354_fu_153_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_114_p0 <= dc_reg_416;
        else 
            grp_fu_114_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_114_p1 <= ap_const_lv32_46FFFE00;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_114_p1 <= ap_const_lv32_0;
        else 
            grp_fu_114_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_119_opcode_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_119_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_119_opcode <= ap_const_lv5_4;
        else 
            grp_fu_119_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_119_p0_assign_proc : process(dc_reg_416, ap_CS_fsm_state11, bitcast_ln354_1_fu_201_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_119_p0 <= bitcast_ln354_1_fu_201_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_119_p0 <= dc_reg_416;
        else 
            grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_119_p1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_119_p1 <= ap_const_lv32_46FFFE00;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_119_p1 <= ap_const_lv32_0;
        else 
            grp_fu_119_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln30_1_fu_178_p2 <= "1" when (trunc_ln30_fu_168_p1 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_172_p2 <= "0" when (tmp_fu_158_p4 = ap_const_lv8_FF) else "1";
    icmp_ln34_1_fu_226_p2 <= "1" when (trunc_ln34_fu_216_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_220_p2 <= "0" when (tmp_8_fu_206_p4 = ap_const_lv8_FF) else "1";
    or_ln30_fu_184_p2 <= (icmp_ln30_fu_172_p2 or icmp_ln30_1_fu_178_p2);
    or_ln34_fu_232_p2 <= (icmp_ln34_fu_220_p2 or icmp_ln34_1_fu_226_p2);
    p_Result_1_fu_193_p1 <= data_V_1_fu_190_p1(31 - 1 downto 0);
    p_Result_s_fu_145_p1 <= data_V_fu_142_p1(31 - 1 downto 0);
    select_ln30_fu_332_p3 <= 
        grp_fu_108_p1 when (and_ln30_fu_328_p2(0) = '1') else 
        dc_reg_416;
    select_ln34_fu_343_p3 <= 
        grp_fu_111_p1 when (and_ln34_fu_339_p2(0) = '1') else 
        dc_1_reg_424;
        sext_ln31_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_fu_254_p2),17));

        sext_ln35_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_1_fu_299_p2),17));

    shl_ln1_fu_309_p3 <= (sub_ln12_1_fu_299_p2 & ap_const_lv15_0);
    shl_ln_fu_264_p3 <= (sub_ln12_fu_254_p2 & ap_const_lv15_0);
    sine_i_address0 <= zext_ln19_fu_136_p1(10 - 1 downto 0);

    sine_i_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sine_i_ce0 <= ap_const_logic_1;
        else 
            sine_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln12_1_fu_299_p2 <= std_logic_vector(unsigned(zext_ln12_2_fu_287_p1) - unsigned(zext_ln12_3_fu_295_p1));
    sub_ln12_fu_254_p2 <= std_logic_vector(unsigned(zext_ln12_fu_242_p1) - unsigned(zext_ln12_1_fu_250_p1));
    sub_ln31_fu_272_p2 <= std_logic_vector(unsigned(shl_ln_fu_264_p3) - unsigned(sext_ln31_fu_260_p1));
    sub_ln35_fu_317_p2 <= std_logic_vector(unsigned(shl_ln1_fu_309_p3) - unsigned(sext_ln35_fu_305_p1));
    tmp_8_fu_206_p4 <= data_V_1_fu_190_p1(30 downto 23);
    tmp_fu_158_p4 <= data_V_fu_142_p1(30 downto 23);
    trunc_ln30_fu_168_p1 <= data_V_fu_142_p1(23 - 1 downto 0);
    trunc_ln34_fu_216_p1 <= data_V_1_fu_190_p1(23 - 1 downto 0);
    zext_ln12_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_1_fu_246_p2),2));
    zext_ln12_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_2_fu_283_p2),2));
    zext_ln12_3_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_3_fu_291_p2),2));
    zext_ln12_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_fu_238_p2),2));
    zext_ln19_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(angle),64));
    zext_ln368_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_193_p1),32));
    zext_ln368_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_145_p1),32));
end behav;
