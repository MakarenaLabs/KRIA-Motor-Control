-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_torque_foc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (79 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (9 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (9 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_TVALID : OUT STD_LOGIC;
    C_TREADY : IN STD_LOGIC;
    C_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    control_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    control_ce0 : OUT STD_LOGIC;
    control_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    logger_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    logger_ce0 : OUT STD_LOGIC;
    logger_we0 : OUT STD_LOGIC;
    logger_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_i : IN STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    velocity_accum_o_ap_vld : OUT STD_LOGIC;
    buffer_velocity_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_velocity_ce0 : OUT STD_LOGIC;
    buffer_velocity_we0 : OUT STD_LOGIC;
    buffer_velocity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_velocity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y1a_prev_o_ap_vld : OUT STD_LOGIC;
    Y1b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y1b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y1b_prev_o_ap_vld : OUT STD_LOGIC;
    Y2a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y2a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y2a_prev_o_ap_vld : OUT STD_LOGIC;
    Y2b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Y2b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y2b_prev_o_ap_vld : OUT STD_LOGIC;
    ierr_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ierr_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ierr_o_ap_vld : OUT STD_LOGIC;
    grp_PI_control_float_s_fu_498_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_din5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_din5_o : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_din5_o_ap_vld : IN STD_LOGIC;
    grp_PI_control_float_s_fu_498_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_PI_control_float_s_fu_498_p_start : OUT STD_LOGIC;
    grp_PI_control_float_s_fu_498_p_ready : IN STD_LOGIC;
    grp_PI_control_float_s_fu_498_p_done : IN STD_LOGIC;
    grp_PI_control_float_s_fu_498_p_idle : IN STD_LOGIC;
    grp_SVPWM_float_s_fu_506_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_SVPWM_float_s_fu_506_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_SVPWM_float_s_fu_506_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_SVPWM_float_s_fu_506_p_dout0_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_SVPWM_float_s_fu_506_p_dout0_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_SVPWM_float_s_fu_506_p_dout0_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_SVPWM_float_s_fu_506_p_start : OUT STD_LOGIC;
    grp_SVPWM_float_s_fu_506_p_ready : IN STD_LOGIC;
    grp_SVPWM_float_s_fu_506_p_done : IN STD_LOGIC;
    grp_SVPWM_float_s_fu_506_p_idle : IN STD_LOGIC;
    grp_clarke_direct_float_s_fu_512_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_direct_float_s_fu_512_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_direct_float_s_fu_512_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_direct_float_s_fu_512_p_dout0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_direct_float_s_fu_512_p_start : OUT STD_LOGIC;
    grp_clarke_direct_float_s_fu_512_p_ready : IN STD_LOGIC;
    grp_clarke_direct_float_s_fu_512_p_done : IN STD_LOGIC;
    grp_clarke_direct_float_s_fu_512_p_idle : IN STD_LOGIC;
    grp_clarke_inverse_float_s_fu_517_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_inverse_float_s_fu_517_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_inverse_float_s_fu_517_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_inverse_float_s_fu_517_p_dout0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_inverse_float_s_fu_517_p_dout0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_clarke_inverse_float_s_fu_517_p_start : OUT STD_LOGIC;
    grp_clarke_inverse_float_s_fu_517_p_ready : IN STD_LOGIC;
    grp_clarke_inverse_float_s_fu_517_p_done : IN STD_LOGIC;
    grp_clarke_inverse_float_s_fu_517_p_idle : IN STD_LOGIC;
    grp_fu_522_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_522_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_522_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_522_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_522_p_ce : OUT STD_LOGIC;
    grp_fu_526_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_ce : OUT STD_LOGIC;
    grp_fu_529_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_529_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_529_p_ce : OUT STD_LOGIC;
    grp_fu_532_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_532_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_532_p_ce : OUT STD_LOGIC;
    grp_fu_535_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_535_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_535_p_ce : OUT STD_LOGIC;
    grp_park_direct_float_s_fu_538_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_park_direct_float_s_fu_538_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_park_direct_float_s_fu_538_p_din3 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_park_direct_float_s_fu_538_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_park_direct_float_s_fu_538_p_dout0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_park_direct_float_s_fu_538_p_start : OUT STD_LOGIC;
    grp_park_direct_float_s_fu_538_p_ready : IN STD_LOGIC;
    grp_park_direct_float_s_fu_538_p_done : IN STD_LOGIC;
    grp_park_direct_float_s_fu_538_p_idle : IN STD_LOGIC;
    grp_park_inverse_float_s_fu_546_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_park_inverse_float_s_fu_546_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_park_inverse_float_s_fu_546_p_din3 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_park_inverse_float_s_fu_546_p_dout0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_park_inverse_float_s_fu_546_p_dout0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_park_inverse_float_s_fu_546_p_start : OUT STD_LOGIC;
    grp_park_inverse_float_s_fu_546_p_ready : IN STD_LOGIC;
    grp_park_inverse_float_s_fu_546_p_done : IN STD_LOGIC;
    grp_park_inverse_float_s_fu_546_p_idle : IN STD_LOGIC );
end;


architecture behav of foc_frontend_torque_foc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3F333333 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001100110011001100110011";
    constant ap_const_lv32_3E99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111110100110011001100110011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C3480000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011010010000000000000000000";
    constant ap_const_lv32_C5800000 : STD_LOGIC_VECTOR (31 downto 0) := "11000101100000000000000000000000";
    constant ap_const_lv32_C0A00000 : STD_LOGIC_VECTOR (31 downto 0) := "11000000101000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_3E8 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111101000";
    constant ap_const_lv16_3E7 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111100111";
    constant ap_const_lv16_FC18 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000011000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_TDATA_blk_n : STD_LOGIC;
    signal B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal C_TDATA_blk_n : STD_LOGIC;
    signal sext_ln292_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln300_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln300_1_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln300_2_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln372_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln372_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal vel_corr_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ia_corr_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib_corr_reg_1233 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln292_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal vel_corr_2_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Ia_corr_1_reg_1248 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ib_corr_1_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_11_fu_715_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_11_reg_1260 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal dc_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Theta_fu_900_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_reg_1270 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln271_fu_908_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln271_reg_1275 : STD_LOGIC_VECTOR (9 downto 0);
    signal Ialpha_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ibeta_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal result_V_10_fu_1056_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_10_reg_1298 : STD_LOGIC_VECTOR (15 downto 0);
    signal Id_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Iq_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln339_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln339_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln297_fu_1082_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln339_fu_1090_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln339_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vq_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal Vd_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal Valpha_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal Vbeta_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal Va_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal Vb_reg_1358 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vc_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_ap_start : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_ap_done : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_ap_idle : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_ap_ready : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_velocity_accum_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_velocity_accum_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_buffer_velocity_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_buffer_velocity_ce0 : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_buffer_velocity_we0 : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_buffer_velocity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_Y1a_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_Y1a_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_Y1b_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_Y1b_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_Y2a_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_Y2a_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_Y2b_prev_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_Y2b_prev_o_ap_vld : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_low_pass_filter_float_s_fu_409_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_clarke_direct_float_s_fu_432_ap_done : STD_LOGIC;
    signal grp_clarke_direct_float_s_fu_432_ap_ready : STD_LOGIC;
    signal grp_park_direct_float_s_fu_438_ap_done : STD_LOGIC;
    signal grp_park_direct_float_s_fu_438_ap_ready : STD_LOGIC;
    signal grp_PI_control_float_s_fu_449_ap_done : STD_LOGIC;
    signal grp_PI_control_float_s_fu_449_ap_ready : STD_LOGIC;
    signal grp_PI_control_float_s_fu_449_ref : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PI_control_float_s_fu_449_val_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PI_control_float_s_fu_449_KP : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PI_control_float_s_fu_449_KI : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PI_control_float_s_fu_449_ierr_o_ap_vld : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_464_ap_done : STD_LOGIC;
    signal grp_park_inverse_float_s_fu_464_ap_ready : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_475_ap_done : STD_LOGIC;
    signal grp_clarke_inverse_float_s_fu_475_ap_ready : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_481_ap_done : STD_LOGIC;
    signal grp_SVPWM_float_s_fu_481_ap_ready : STD_LOGIC;
    signal grp_low_pass_filter_float_s_fu_409_ap_start_reg : STD_LOGIC := '0';
    signal grp_clarke_direct_float_s_fu_432_ap_start_reg : STD_LOGIC := '0';
    signal grp_park_direct_float_s_fu_438_ap_start_reg : STD_LOGIC := '0';
    signal grp_PI_control_float_s_fu_449_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_park_inverse_float_s_fu_464_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_clarke_inverse_float_s_fu_475_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_SVPWM_float_s_fu_481_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state21 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal data_V_2_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln303_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln304_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_924_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln311_fu_1064_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln317_fu_1086_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln318_fu_1094_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln346_fu_1098_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln297_fu_1102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln345_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln352_fu_1119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln353_fu_1124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln359_fu_1140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln360_fu_1145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln361_fu_1149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Angle_fu_532_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal RPM_fu_522_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ia_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Ib_fu_512_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_605_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_2_fu_609_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_22_fu_595_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_2_fu_623_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_2_fu_627_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_2_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_2_fu_647_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_2_fu_651_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_2_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_619_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_2_fu_663_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_4_fu_667_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_17_fu_679_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_673_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_2_fu_687_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_691_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_2_fu_701_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_9_fu_709_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_748_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_752_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_18_fu_738_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_fu_766_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_fu_770_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_fu_784_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_fu_790_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_794_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_762_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_fu_806_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_810_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_816_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_fu_830_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_834_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_fu_844_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_852_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_V_fu_858_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_866_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln293_fu_874_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Theta_2_fu_880_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln294_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln294_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_946_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_1_fu_950_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_20_fu_936_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln344_1_fu_964_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln344_1_fu_968_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_1_fu_982_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_974_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_1_fu_988_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_1_fu_992_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_1_fu_1000_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_960_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1340_1_fu_1004_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_2_fu_1008_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_fu_1020_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1014_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln671_1_fu_1028_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_1032_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_1_fu_1042_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_928_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_5_fu_1050_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal pwmStreamObj_data_V_fu_1165_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_488_ce : STD_LOGIC;
    signal grp_fu_492_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_495_ce : STD_LOGIC;
    signal grp_fu_498_ce : STD_LOGIC;
    signal grp_fu_501_ce : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_low_pass_filter_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        velocity : IN STD_LOGIC_VECTOR (31 downto 0);
        Ia : IN STD_LOGIC_VECTOR (31 downto 0);
        Ib : IN STD_LOGIC_VECTOR (31 downto 0);
        filt_a : IN STD_LOGIC_VECTOR (31 downto 0);
        filt_b : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_accum_i : IN STD_LOGIC_VECTOR (31 downto 0);
        velocity_accum_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        velocity_accum_o_ap_vld : OUT STD_LOGIC;
        buffer_velocity_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_velocity_ce0 : OUT STD_LOGIC;
        buffer_velocity_we0 : OUT STD_LOGIC;
        buffer_velocity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_velocity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Y1a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y1a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y1a_prev_o_ap_vld : OUT STD_LOGIC;
        Y1b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y1b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y1b_prev_o_ap_vld : OUT STD_LOGIC;
        Y2a_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y2a_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y2a_prev_o_ap_vld : OUT STD_LOGIC;
        Y2b_prev_i : IN STD_LOGIC_VECTOR (31 downto 0);
        Y2b_prev_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y2b_prev_o_ap_vld : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_clarke_direct_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Ia : IN STD_LOGIC_VECTOR (31 downto 0);
        Ib : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_park_direct_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Ialpha : IN STD_LOGIC_VECTOR (31 downto 0);
        Ibeta : IN STD_LOGIC_VECTOR (31 downto 0);
        angle : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_PI_control_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ref : IN STD_LOGIC_VECTOR (31 downto 0);
        val_r : IN STD_LOGIC_VECTOR (31 downto 0);
        KP : IN STD_LOGIC_VECTOR (31 downto 0);
        KI : IN STD_LOGIC_VECTOR (31 downto 0);
        ierr_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ierr_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ierr_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_park_inverse_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Vd : IN STD_LOGIC_VECTOR (31 downto 0);
        Vq : IN STD_LOGIC_VECTOR (31 downto 0);
        angle : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_clarke_inverse_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Valpha : IN STD_LOGIC_VECTOR (31 downto 0);
        Vbeta : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_SVPWM_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Va : IN STD_LOGIC_VECTOR (31 downto 0);
        Vb : IN STD_LOGIC_VECTOR (31 downto 0);
        Vc : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component foc_frontend_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_frontend_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_low_pass_filter_float_s_fu_409 : component foc_frontend_low_pass_filter_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_low_pass_filter_float_s_fu_409_ap_start,
        ap_done => grp_low_pass_filter_float_s_fu_409_ap_done,
        ap_idle => grp_low_pass_filter_float_s_fu_409_ap_idle,
        ap_ready => grp_low_pass_filter_float_s_fu_409_ap_ready,
        velocity => vel_corr_reg_1223,
        Ia => Ia_corr_reg_1228,
        Ib => Ib_corr_reg_1233,
        filt_a => ap_const_lv32_3F333333,
        filt_b => ap_const_lv32_3E99999A,
        velocity_accum_i => velocity_accum_i,
        velocity_accum_o => grp_low_pass_filter_float_s_fu_409_velocity_accum_o,
        velocity_accum_o_ap_vld => grp_low_pass_filter_float_s_fu_409_velocity_accum_o_ap_vld,
        buffer_velocity_address0 => grp_low_pass_filter_float_s_fu_409_buffer_velocity_address0,
        buffer_velocity_ce0 => grp_low_pass_filter_float_s_fu_409_buffer_velocity_ce0,
        buffer_velocity_we0 => grp_low_pass_filter_float_s_fu_409_buffer_velocity_we0,
        buffer_velocity_d0 => grp_low_pass_filter_float_s_fu_409_buffer_velocity_d0,
        buffer_velocity_q0 => buffer_velocity_q0,
        Y1a_prev_i => Y1a_prev_i,
        Y1a_prev_o => grp_low_pass_filter_float_s_fu_409_Y1a_prev_o,
        Y1a_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_409_Y1a_prev_o_ap_vld,
        Y1b_prev_i => Y1b_prev_i,
        Y1b_prev_o => grp_low_pass_filter_float_s_fu_409_Y1b_prev_o,
        Y1b_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_409_Y1b_prev_o_ap_vld,
        Y2a_prev_i => Y2a_prev_i,
        Y2a_prev_o => grp_low_pass_filter_float_s_fu_409_Y2a_prev_o,
        Y2a_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_409_Y2a_prev_o_ap_vld,
        Y2b_prev_i => Y2b_prev_i,
        Y2b_prev_o => grp_low_pass_filter_float_s_fu_409_Y2b_prev_o,
        Y2b_prev_o_ap_vld => grp_low_pass_filter_float_s_fu_409_Y2b_prev_o_ap_vld,
        ap_return_0 => grp_low_pass_filter_float_s_fu_409_ap_return_0,
        ap_return_1 => grp_low_pass_filter_float_s_fu_409_ap_return_1,
        ap_return_2 => grp_low_pass_filter_float_s_fu_409_ap_return_2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_PI_control_float_s_fu_449_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PI_control_float_s_fu_449_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    grp_PI_control_float_s_fu_449_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PI_control_float_s_fu_449_ap_ready = ap_const_logic_1)) then 
                    grp_PI_control_float_s_fu_449_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SVPWM_float_s_fu_481_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SVPWM_float_s_fu_481_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_SVPWM_float_s_fu_481_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SVPWM_float_s_fu_481_ap_ready = ap_const_logic_1)) then 
                    grp_SVPWM_float_s_fu_481_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_clarke_direct_float_s_fu_432_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_clarke_direct_float_s_fu_432_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_clarke_direct_float_s_fu_432_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_clarke_direct_float_s_fu_432_ap_ready = ap_const_logic_1)) then 
                    grp_clarke_direct_float_s_fu_432_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_clarke_inverse_float_s_fu_475_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_clarke_inverse_float_s_fu_475_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_clarke_inverse_float_s_fu_475_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_clarke_inverse_float_s_fu_475_ap_ready = ap_const_logic_1)) then 
                    grp_clarke_inverse_float_s_fu_475_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_low_pass_filter_float_s_fu_409_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_low_pass_filter_float_s_fu_409_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_low_pass_filter_float_s_fu_409_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_low_pass_filter_float_s_fu_409_ap_ready = ap_const_logic_1)) then 
                    grp_low_pass_filter_float_s_fu_409_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_park_direct_float_s_fu_438_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_park_direct_float_s_fu_438_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_park_direct_float_s_fu_438_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_park_direct_float_s_fu_438_ap_ready = ap_const_logic_1)) then 
                    grp_park_direct_float_s_fu_438_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_park_inverse_float_s_fu_464_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_park_inverse_float_s_fu_464_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_park_inverse_float_s_fu_464_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_park_inverse_float_s_fu_464_ap_ready = ap_const_logic_1)) then 
                    grp_park_inverse_float_s_fu_464_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Ia_corr_1_reg_1248 <= grp_low_pass_filter_float_s_fu_409_ap_return_1;
                Ib_corr_1_reg_1254 <= grp_low_pass_filter_float_s_fu_409_ap_return_2;
                vel_corr_2_reg_1243 <= grp_low_pass_filter_float_s_fu_409_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Ia_corr_reg_1228 <= grp_fu_532_p_dout0;
                Ib_corr_reg_1233 <= grp_fu_535_p_dout0;
                conv_reg_1213 <= grp_fu_526_p_dout0;
                vel_corr_reg_1223 <= grp_fu_529_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Ialpha_reg_1281 <= grp_clarke_direct_float_s_fu_512_p_dout0_0;
                Ibeta_reg_1287 <= grp_clarke_direct_float_s_fu_512_p_dout0_1;
                Theta_reg_1270 <= Theta_fu_900_p3;
                trunc_ln271_reg_1275 <= trunc_ln271_fu_908_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Id_reg_1303 <= grp_park_direct_float_s_fu_538_p_dout0_0;
                Iq_reg_1309 <= grp_park_direct_float_s_fu_538_p_dout0_1;
                xor_ln339_reg_1315 <= xor_ln339_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                Va_reg_1353 <= grp_clarke_inverse_float_s_fu_517_p_dout0_0;
                Vb_reg_1358 <= grp_clarke_inverse_float_s_fu_517_p_dout0_1;
                Vc_reg_1364 <= grp_clarke_inverse_float_s_fu_517_p_dout0_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                Valpha_reg_1342 <= grp_park_inverse_float_s_fu_546_p_dout0_0;
                Vbeta_reg_1347 <= grp_park_inverse_float_s_fu_546_p_dout0_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                Vd_reg_1336 <= grp_PI_control_float_s_fu_498_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Vq_reg_1330 <= grp_PI_control_float_s_fu_498_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                bitcast_ln339_reg_1325 <= bitcast_ln339_fu_1090_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                dc_reg_1265 <= grp_fu_522_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                result_V_10_reg_1298 <= result_V_10_fu_1056_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                result_V_11_reg_1260 <= result_V_11_fu_715_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln372_reg_1208 <= trunc_ln372_fu_562_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, A_TVALID, B_TREADY, C_TREADY, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_low_pass_filter_float_s_fu_409_ap_done, grp_clarke_direct_float_s_fu_432_ap_done, grp_park_direct_float_s_fu_438_ap_done, grp_PI_control_float_s_fu_449_ap_done, grp_park_inverse_float_s_fu_464_ap_done, grp_clarke_inverse_float_s_fu_475_ap_done, grp_SVPWM_float_s_fu_481_ap_done, ap_block_state21_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_low_pass_filter_float_s_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_clarke_direct_float_s_fu_432_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_park_direct_float_s_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_park_inverse_float_s_fu_464_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_clarke_inverse_float_s_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if ((not(((grp_SVPWM_float_s_fu_481_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_TDATA_blk_n <= A_TVALID;
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID)
    begin
        if ((not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    Angle_fu_532_p4 <= A_TDATA(79 downto 64);
    B_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pwmStreamObj_data_V_fu_1165_p4),64));

    B_TDATA_blk_n_assign_proc : process(B_TREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            B_TDATA_blk_n <= B_TREADY;
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TKEEP <= ap_const_lv8_0;
    B_TLAST <= ap_const_lv1_0;
    B_TSTRB <= ap_const_lv8_0;

    B_TVALID_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state21, grp_SVPWM_float_s_fu_481_ap_done, ap_block_state21_io)
    begin
        if ((not(((grp_SVPWM_float_s_fu_481_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    C_TDATA <= ((result_V_10_reg_1298 & trunc_ln372_reg_1208) & result_V_11_reg_1260);

    C_TDATA_blk_n_assign_proc : process(C_TREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            C_TDATA_blk_n <= C_TREADY;
        else 
            C_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_TKEEP <= ap_const_lv8_0;
    C_TLAST <= ap_const_lv1_0;
    C_TSTRB <= ap_const_lv8_0;

    C_TVALID_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state21, grp_SVPWM_float_s_fu_481_ap_done, ap_block_state21_io)
    begin
        if ((not(((grp_SVPWM_float_s_fu_481_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            C_TVALID <= ap_const_logic_1;
        else 
            C_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    Ia_fu_508_p1 <= A_TDATA(16 - 1 downto 0);
    Ib_fu_512_p4 <= A_TDATA(31 downto 16);
    RPM_fu_522_p4 <= A_TDATA(63 downto 48);
    Theta_2_fu_880_p3 <= 
        add_ln293_fu_874_p2 when (tmp_3_fu_866_p3(0) = '1') else 
        result_V_fu_858_p3;
    Theta_fu_900_p3 <= 
        add_ln294_fu_894_p2 when (icmp_ln294_fu_888_p2(0) = '1') else 
        Theta_2_fu_880_p3;

    Y1a_prev_o_assign_proc : process(Y1a_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_409_Y1a_prev_o, grp_low_pass_filter_float_s_fu_409_Y1a_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_409_Y1a_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y1a_prev_o <= grp_low_pass_filter_float_s_fu_409_Y1a_prev_o;
        else 
            Y1a_prev_o <= Y1a_prev_i;
        end if; 
    end process;

    Y1a_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_409_Y1a_prev_o_ap_vld;

    Y1b_prev_o_assign_proc : process(Y1b_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_409_Y1b_prev_o, grp_low_pass_filter_float_s_fu_409_Y1b_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_409_Y1b_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y1b_prev_o <= grp_low_pass_filter_float_s_fu_409_Y1b_prev_o;
        else 
            Y1b_prev_o <= Y1b_prev_i;
        end if; 
    end process;

    Y1b_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_409_Y1b_prev_o_ap_vld;

    Y2a_prev_o_assign_proc : process(Y2a_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_409_Y2a_prev_o, grp_low_pass_filter_float_s_fu_409_Y2a_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_409_Y2a_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y2a_prev_o <= grp_low_pass_filter_float_s_fu_409_Y2a_prev_o;
        else 
            Y2a_prev_o <= Y2a_prev_i;
        end if; 
    end process;

    Y2a_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_409_Y2a_prev_o_ap_vld;

    Y2b_prev_o_assign_proc : process(Y2b_prev_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_409_Y2b_prev_o, grp_low_pass_filter_float_s_fu_409_Y2b_prev_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_409_Y2b_prev_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Y2b_prev_o <= grp_low_pass_filter_float_s_fu_409_Y2b_prev_o;
        else 
            Y2b_prev_o <= Y2b_prev_i;
        end if; 
    end process;

    Y2b_prev_o_ap_vld <= grp_low_pass_filter_float_s_fu_409_Y2b_prev_o_ap_vld;
    add_ln293_fu_874_p2 <= std_logic_vector(unsigned(result_V_fu_858_p3) + unsigned(ap_const_lv16_3E8));
    add_ln294_fu_894_p2 <= std_logic_vector(unsigned(Theta_2_fu_880_p3) + unsigned(ap_const_lv16_FC18));
    add_ln344_1_fu_968_p2 <= std_logic_vector(unsigned(zext_ln344_1_fu_964_p1) + unsigned(ap_const_lv9_181));
    add_ln344_2_fu_627_p2 <= std_logic_vector(unsigned(zext_ln344_2_fu_623_p1) + unsigned(ap_const_lv9_181));
    add_ln344_fu_770_p2 <= std_logic_vector(unsigned(zext_ln344_fu_766_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_park_direct_float_s_fu_438_ap_done)
    begin
        if ((grp_park_direct_float_s_fu_438_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_PI_control_float_s_fu_449_ap_done)
    begin
        if ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_PI_control_float_s_fu_449_ap_done)
    begin
        if ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(grp_park_inverse_float_s_fu_464_ap_done)
    begin
        if ((grp_park_inverse_float_s_fu_464_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(grp_clarke_inverse_float_s_fu_475_ap_done)
    begin
        if ((grp_clarke_inverse_float_s_fu_475_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, A_TVALID)
    begin
        if (((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(B_TREADY, C_TREADY, grp_SVPWM_float_s_fu_481_ap_done, ap_block_state21_io)
    begin
        if (((grp_SVPWM_float_s_fu_481_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_low_pass_filter_float_s_fu_409_ap_done)
    begin
        if ((grp_low_pass_filter_float_s_fu_409_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_clarke_direct_float_s_fu_432_ap_done)
    begin
        if ((grp_clarke_direct_float_s_fu_432_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, A_TVALID)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state21_assign_proc : process(B_TREADY, C_TREADY)
    begin
                ap_block_state21 <= ((ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY));
    end process;


    ap_block_state21_io_assign_proc : process(B_TREADY, C_TREADY)
    begin
                ap_block_state21_io <= ((ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln292_fu_566_p1 <= control_q0;
    bitcast_ln297_fu_1102_p1 <= grp_fu_526_p_dout0;
    bitcast_ln303_fu_723_p1 <= Ia_corr_1_reg_1248;
    bitcast_ln304_fu_912_p1 <= Ib_corr_1_reg_1254;
    bitcast_ln311_fu_1064_p1 <= Ibeta_reg_1287;
    bitcast_ln317_fu_1086_p1 <= Id_reg_1303;
    bitcast_ln318_fu_1094_p1 <= Iq_reg_1309;
    bitcast_ln339_fu_1090_p1 <= xor_ln339_reg_1315;
    bitcast_ln345_fu_1107_p1 <= Vd_reg_1336;
    bitcast_ln346_fu_1098_p1 <= Vq_reg_1330;
    bitcast_ln352_fu_1119_p1 <= grp_park_inverse_float_s_fu_546_p_dout0_0;
    bitcast_ln353_fu_1124_p1 <= Vbeta_reg_1347;
    bitcast_ln359_fu_1140_p1 <= grp_clarke_inverse_float_s_fu_517_p_dout0_0;
    bitcast_ln360_fu_1145_p1 <= Vb_reg_1358;
    bitcast_ln361_fu_1149_p1 <= Vc_reg_1364;
    buffer_velocity_address0 <= grp_low_pass_filter_float_s_fu_409_buffer_velocity_address0;
    buffer_velocity_ce0 <= grp_low_pass_filter_float_s_fu_409_buffer_velocity_ce0;
    buffer_velocity_d0 <= grp_low_pass_filter_float_s_fu_409_buffer_velocity_d0;
    buffer_velocity_we0 <= grp_low_pass_filter_float_s_fu_409_buffer_velocity_we0;

    control_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            control_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            control_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            control_address0 <= "XXX";
        end if; 
    end process;


    control_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            control_ce0 <= ap_const_logic_1;
        else 
            control_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_924_p1 <= Ialpha_reg_1281;
    data_V_2_fu_583_p1 <= vel_corr_2_reg_1243;
    data_V_fu_727_p1 <= dc_reg_1265;

    grp_PI_control_float_s_fu_449_KI_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_PI_control_float_s_fu_449_KI <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_PI_control_float_s_fu_449_KI <= ap_const_lv32_C0A00000;
        else 
            grp_PI_control_float_s_fu_449_KI <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_PI_control_float_s_fu_449_KP_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_PI_control_float_s_fu_449_KP <= ap_const_lv32_C5800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_PI_control_float_s_fu_449_KP <= ap_const_lv32_C3480000;
        else 
            grp_PI_control_float_s_fu_449_KP <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_PI_control_float_s_fu_449_ap_done <= grp_PI_control_float_s_fu_498_p_done;
    grp_PI_control_float_s_fu_449_ap_ready <= grp_PI_control_float_s_fu_498_p_ready;
    grp_PI_control_float_s_fu_449_ierr_o_ap_vld <= grp_PI_control_float_s_fu_498_p_din5_o_ap_vld;

    grp_PI_control_float_s_fu_449_ref_assign_proc : process(bitcast_ln339_reg_1325, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_PI_control_float_s_fu_449_ref <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_PI_control_float_s_fu_449_ref <= bitcast_ln339_reg_1325;
        else 
            grp_PI_control_float_s_fu_449_ref <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_PI_control_float_s_fu_449_val_r_assign_proc : process(Id_reg_1303, Iq_reg_1309, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_PI_control_float_s_fu_449_val_r <= Id_reg_1303;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_PI_control_float_s_fu_449_val_r <= Iq_reg_1309;
        else 
            grp_PI_control_float_s_fu_449_val_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_PI_control_float_s_fu_498_p_din1 <= grp_PI_control_float_s_fu_449_ref;
    grp_PI_control_float_s_fu_498_p_din2 <= grp_PI_control_float_s_fu_449_val_r;
    grp_PI_control_float_s_fu_498_p_din3 <= grp_PI_control_float_s_fu_449_KP;
    grp_PI_control_float_s_fu_498_p_din4 <= grp_PI_control_float_s_fu_449_KI;
    grp_PI_control_float_s_fu_498_p_din5 <= ierr_i;
    grp_PI_control_float_s_fu_498_p_start <= grp_PI_control_float_s_fu_449_ap_start_reg;
    grp_SVPWM_float_s_fu_481_ap_done <= grp_SVPWM_float_s_fu_506_p_done;
    grp_SVPWM_float_s_fu_481_ap_ready <= grp_SVPWM_float_s_fu_506_p_ready;
    grp_SVPWM_float_s_fu_506_p_din1 <= Va_reg_1353;
    grp_SVPWM_float_s_fu_506_p_din2 <= Vb_reg_1358;
    grp_SVPWM_float_s_fu_506_p_din3 <= Vc_reg_1364;
    grp_SVPWM_float_s_fu_506_p_start <= grp_SVPWM_float_s_fu_481_ap_start_reg;
    grp_clarke_direct_float_s_fu_432_ap_done <= grp_clarke_direct_float_s_fu_512_p_done;
    grp_clarke_direct_float_s_fu_432_ap_ready <= grp_clarke_direct_float_s_fu_512_p_ready;
    grp_clarke_direct_float_s_fu_512_p_din1 <= Ia_corr_1_reg_1248;
    grp_clarke_direct_float_s_fu_512_p_din2 <= Ib_corr_1_reg_1254;
    grp_clarke_direct_float_s_fu_512_p_start <= grp_clarke_direct_float_s_fu_432_ap_start_reg;
    grp_clarke_inverse_float_s_fu_475_ap_done <= grp_clarke_inverse_float_s_fu_517_p_done;
    grp_clarke_inverse_float_s_fu_475_ap_ready <= grp_clarke_inverse_float_s_fu_517_p_ready;
    grp_clarke_inverse_float_s_fu_517_p_din1 <= Valpha_reg_1342;
    grp_clarke_inverse_float_s_fu_517_p_din2 <= Vbeta_reg_1347;
    grp_clarke_inverse_float_s_fu_517_p_start <= grp_clarke_inverse_float_s_fu_475_ap_start_reg;

    grp_fu_488_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_low_pass_filter_float_s_fu_409_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((grp_low_pass_filter_float_s_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_fu_488_ce <= ap_const_logic_1;
        else 
            grp_fu_488_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_492_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, grp_PI_control_float_s_fu_449_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_492_ce <= ap_const_logic_1;
        else 
            grp_fu_492_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_492_p0_assign_proc : process(ap_CS_fsm_state1, sext_ln292_fu_542_p1, sext_ln297_fu_1082_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_492_p0 <= sext_ln297_fu_1082_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_492_p0 <= sext_ln292_fu_542_p1;
        else 
            grp_fu_492_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_495_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_495_ce <= ap_const_logic_1;
        else 
            grp_fu_495_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_498_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_498_ce <= ap_const_logic_1;
        else 
            grp_fu_498_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_501_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, A_TVALID, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_logic_0 = A_TVALID) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_501_ce <= ap_const_logic_1;
        else 
            grp_fu_501_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_522_p_ce <= grp_fu_488_ce;
    grp_fu_522_p_din0 <= conv_reg_1213;
    grp_fu_522_p_din1 <= bitcast_ln292_fu_566_p1;
    grp_fu_522_p_opcode <= ap_const_lv2_1;
    grp_fu_526_p_ce <= grp_fu_492_ce;
    grp_fu_526_p_din0 <= grp_fu_492_p0;
    grp_fu_529_p_ce <= grp_fu_495_ce;
    grp_fu_529_p_din0 <= sext_ln300_fu_547_p1;
    grp_fu_532_p_ce <= grp_fu_498_ce;
    grp_fu_532_p_din0 <= sext_ln300_1_fu_552_p1;
    grp_fu_535_p_ce <= grp_fu_501_ce;
    grp_fu_535_p_din0 <= sext_ln300_2_fu_557_p1;
    grp_low_pass_filter_float_s_fu_409_ap_start <= grp_low_pass_filter_float_s_fu_409_ap_start_reg;
    grp_park_direct_float_s_fu_438_ap_done <= grp_park_direct_float_s_fu_538_p_done;
    grp_park_direct_float_s_fu_438_ap_ready <= grp_park_direct_float_s_fu_538_p_ready;
    grp_park_direct_float_s_fu_538_p_din1 <= Ialpha_reg_1281;
    grp_park_direct_float_s_fu_538_p_din2 <= Ibeta_reg_1287;
    grp_park_direct_float_s_fu_538_p_din3 <= trunc_ln271_reg_1275;
    grp_park_direct_float_s_fu_538_p_start <= grp_park_direct_float_s_fu_438_ap_start_reg;
    grp_park_inverse_float_s_fu_464_ap_done <= grp_park_inverse_float_s_fu_546_p_done;
    grp_park_inverse_float_s_fu_464_ap_ready <= grp_park_inverse_float_s_fu_546_p_ready;
    grp_park_inverse_float_s_fu_546_p_din1 <= Vd_reg_1336;
    grp_park_inverse_float_s_fu_546_p_din2 <= Vq_reg_1330;
    grp_park_inverse_float_s_fu_546_p_din3 <= trunc_ln271_reg_1275;
    grp_park_inverse_float_s_fu_546_p_start <= grp_park_inverse_float_s_fu_464_ap_start_reg;
    icmp_ln294_fu_888_p2 <= "1" when (signed(Theta_2_fu_880_p3) > signed(ap_const_lv16_3E7)) else "0";

    ierr_o_assign_proc : process(ierr_i, ap_CS_fsm_state13, ap_CS_fsm_state15, grp_PI_control_float_s_fu_449_ierr_o_ap_vld, grp_PI_control_float_s_fu_498_p_din5_o)
    begin
        if ((((grp_PI_control_float_s_fu_449_ierr_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_PI_control_float_s_fu_449_ierr_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            ierr_o <= grp_PI_control_float_s_fu_498_p_din5_o;
        else 
            ierr_o <= ierr_i;
        end if; 
    end process;


    ierr_o_ap_vld_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, grp_PI_control_float_s_fu_498_p_din5_o_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ierr_o_ap_vld <= grp_PI_control_float_s_fu_498_p_din5_o_ap_vld;
        else 
            ierr_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_974_p3 <= add_ln344_1_fu_968_p2(8 downto 8);
    isNeg_2_fu_633_p3 <= add_ln344_2_fu_627_p2(8 downto 8);
    isNeg_fu_776_p3 <= add_ln344_fu_770_p2(8 downto 8);

    logger_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            logger_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            logger_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            logger_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            logger_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            logger_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            logger_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            logger_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            logger_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            logger_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            logger_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            logger_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            logger_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            logger_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            logger_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            logger_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            logger_address0 <= "XXXX";
        end if; 
    end process;


    logger_ce0_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_clarke_direct_float_s_fu_432_ap_done, grp_park_direct_float_s_fu_438_ap_done, grp_PI_control_float_s_fu_449_ap_done, grp_park_inverse_float_s_fu_464_ap_done, grp_clarke_inverse_float_s_fu_475_ap_done, grp_SVPWM_float_s_fu_481_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_block_state21_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((grp_clarke_inverse_float_s_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((grp_park_inverse_float_s_fu_464_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_park_direct_float_s_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_clarke_direct_float_s_fu_432_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((grp_SVPWM_float_s_fu_481_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            logger_ce0 <= ap_const_logic_1;
        else 
            logger_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    logger_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, data_V_2_fu_583_p1, bitcast_ln303_fu_723_p1, bitcast_ln304_fu_912_p1, data_V_1_fu_924_p1, bitcast_ln311_fu_1064_p1, bitcast_ln317_fu_1086_p1, bitcast_ln318_fu_1094_p1, bitcast_ln346_fu_1098_p1, bitcast_ln297_fu_1102_p1, bitcast_ln345_fu_1107_p1, bitcast_ln352_fu_1119_p1, bitcast_ln353_fu_1124_p1, bitcast_ln359_fu_1140_p1, bitcast_ln360_fu_1145_p1, bitcast_ln361_fu_1149_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            logger_d0 <= bitcast_ln361_fu_1149_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            logger_d0 <= bitcast_ln360_fu_1145_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            logger_d0 <= bitcast_ln359_fu_1140_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            logger_d0 <= bitcast_ln353_fu_1124_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            logger_d0 <= bitcast_ln352_fu_1119_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            logger_d0 <= bitcast_ln345_fu_1107_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            logger_d0 <= bitcast_ln297_fu_1102_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            logger_d0 <= bitcast_ln346_fu_1098_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            logger_d0 <= bitcast_ln318_fu_1094_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            logger_d0 <= bitcast_ln317_fu_1086_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            logger_d0 <= bitcast_ln311_fu_1064_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            logger_d0 <= data_V_1_fu_924_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            logger_d0 <= bitcast_ln304_fu_912_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            logger_d0 <= bitcast_ln303_fu_723_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            logger_d0 <= data_V_2_fu_583_p1;
        else 
            logger_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    logger_we0_assign_proc : process(B_TREADY, C_TREADY, ap_CS_fsm_state21, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, grp_clarke_direct_float_s_fu_432_ap_done, grp_park_direct_float_s_fu_438_ap_done, grp_PI_control_float_s_fu_449_ap_done, grp_park_inverse_float_s_fu_464_ap_done, grp_clarke_inverse_float_s_fu_475_ap_done, grp_SVPWM_float_s_fu_481_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_block_state21_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((grp_clarke_inverse_float_s_fu_475_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((grp_park_inverse_float_s_fu_464_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_PI_control_float_s_fu_449_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((grp_park_direct_float_s_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_clarke_direct_float_s_fu_432_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((grp_SVPWM_float_s_fu_481_ap_done = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io) or (ap_const_logic_0 = C_TREADY) or (ap_const_logic_0 = B_TREADY))) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            logger_we0 <= ap_const_logic_1;
        else 
            logger_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_1_fu_950_p4 <= ((ap_const_lv1_1 & tmp_21_fu_946_p1) & ap_const_lv1_0);
    mantissa_2_fu_609_p4 <= ((ap_const_lv1_1 & tmp_23_fu_605_p1) & ap_const_lv1_0);
    mantissa_fu_752_p4 <= ((ap_const_lv1_1 & tmp_19_fu_748_p1) & ap_const_lv1_0);
    p_Result_1_fu_928_p3 <= data_V_1_fu_924_p1(31 downto 31);
    p_Result_2_fu_587_p3 <= data_V_2_fu_583_p1(31 downto 31);
    p_Result_s_fu_730_p3 <= data_V_fu_727_p1(31 downto 31);
    pwmStreamObj_data_V_fu_1165_p4 <= ((grp_SVPWM_float_s_fu_506_p_dout0_2 & grp_SVPWM_float_s_fu_506_p_dout0_1) & grp_SVPWM_float_s_fu_506_p_dout0_0);
    r_V_1_fu_816_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_762_p1),to_integer(unsigned('0' & zext_ln1340_fu_806_p1(31-1 downto 0)))));
    r_V_2_fu_1008_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_960_p1),to_integer(unsigned('0' & zext_ln1340_1_fu_1004_p1(31-1 downto 0)))));
    r_V_3_fu_1014_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_960_p1),to_integer(unsigned('0' & zext_ln1340_1_fu_1004_p1(31-1 downto 0)))));
    r_V_4_fu_667_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_619_p1),to_integer(unsigned('0' & zext_ln1340_2_fu_663_p1(31-1 downto 0)))));
    r_V_5_fu_673_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_619_p1),to_integer(unsigned('0' & zext_ln1340_2_fu_663_p1(31-1 downto 0)))));
    r_V_fu_810_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_762_p1),to_integer(unsigned('0' & zext_ln1340_fu_806_p1(31-1 downto 0)))));
    result_V_10_fu_1056_p3 <= 
        result_V_5_fu_1050_p2 when (p_Result_1_fu_928_p3(0) = '1') else 
        val_1_fu_1042_p3;
    result_V_11_fu_715_p3 <= 
        result_V_9_fu_709_p2 when (p_Result_2_fu_587_p3(0) = '1') else 
        val_2_fu_701_p3;
    result_V_2_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_fu_844_p3));
    result_V_5_fu_1050_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_1_fu_1042_p3));
    result_V_9_fu_709_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(val_2_fu_701_p3));
    result_V_fu_858_p3 <= 
        result_V_2_fu_852_p2 when (p_Result_s_fu_730_p3(0) = '1') else 
        val_fu_844_p3;
        sext_ln1340_1_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_992_p3),32));

        sext_ln1340_2_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_2_fu_651_p3),32));

        sext_ln1340_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_794_p3),32));

        sext_ln1364_1_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_1_fu_982_p2),9));

        sext_ln1364_2_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_2_fu_641_p2),9));

        sext_ln1364_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_fu_784_p2),9));

        sext_ln292_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Angle_fu_532_p4),32));

        sext_ln297_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Theta_reg_1270),32));

        sext_ln300_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ia_fu_508_p1),32));

        sext_ln300_2_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ib_fu_512_p4),32));

        sext_ln300_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(RPM_fu_522_p4),32));

    sub_ln1364_1_fu_982_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_20_fu_936_p4));
    sub_ln1364_2_fu_641_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_22_fu_595_p4));
    sub_ln1364_fu_784_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_18_fu_738_p4));
    tmp_10_fu_1020_p3 <= r_V_2_fu_1008_p2(24 downto 24);
    tmp_17_fu_679_p3 <= r_V_4_fu_667_p2(24 downto 24);
    tmp_18_fu_738_p4 <= data_V_fu_727_p1(30 downto 23);
    tmp_19_fu_748_p1 <= data_V_fu_727_p1(23 - 1 downto 0);
    tmp_20_fu_936_p4 <= data_V_1_fu_924_p1(30 downto 23);
    tmp_21_fu_946_p1 <= data_V_1_fu_924_p1(23 - 1 downto 0);
    tmp_22_fu_595_p4 <= data_V_2_fu_583_p1(30 downto 23);
    tmp_23_fu_605_p1 <= data_V_2_fu_583_p1(23 - 1 downto 0);
    tmp_2_fu_834_p4 <= r_V_1_fu_816_p2(39 downto 24);
    tmp_3_fu_866_p3 <= result_V_fu_858_p3(15 downto 15);
    tmp_7_fu_1032_p4 <= r_V_3_fu_1014_p2(39 downto 24);
    tmp_fu_822_p3 <= r_V_fu_810_p2(24 downto 24);
    tmp_s_fu_691_p4 <= r_V_5_fu_673_p2(39 downto 24);
    trunc_ln271_fu_908_p1 <= Theta_fu_900_p3(10 - 1 downto 0);
    trunc_ln372_fu_562_p1 <= A_TDATA(32 - 1 downto 0);
    ush_1_fu_992_p3 <= 
        sext_ln1364_1_fu_988_p1 when (isNeg_1_fu_974_p3(0) = '1') else 
        add_ln344_1_fu_968_p2;
    ush_2_fu_651_p3 <= 
        sext_ln1364_2_fu_647_p1 when (isNeg_2_fu_633_p3(0) = '1') else 
        add_ln344_2_fu_627_p2;
    ush_fu_794_p3 <= 
        sext_ln1364_fu_790_p1 when (isNeg_fu_776_p3(0) = '1') else 
        add_ln344_fu_770_p2;
    val_1_fu_1042_p3 <= 
        zext_ln671_1_fu_1028_p1 when (isNeg_1_fu_974_p3(0) = '1') else 
        tmp_7_fu_1032_p4;
    val_2_fu_701_p3 <= 
        zext_ln671_2_fu_687_p1 when (isNeg_2_fu_633_p3(0) = '1') else 
        tmp_s_fu_691_p4;
    val_fu_844_p3 <= 
        zext_ln671_fu_830_p1 when (isNeg_fu_776_p3(0) = '1') else 
        tmp_2_fu_834_p4;

    velocity_accum_o_assign_proc : process(velocity_accum_i, ap_CS_fsm_state6, grp_low_pass_filter_float_s_fu_409_velocity_accum_o, grp_low_pass_filter_float_s_fu_409_velocity_accum_o_ap_vld)
    begin
        if (((grp_low_pass_filter_float_s_fu_409_velocity_accum_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            velocity_accum_o <= grp_low_pass_filter_float_s_fu_409_velocity_accum_o;
        else 
            velocity_accum_o <= velocity_accum_i;
        end if; 
    end process;

    velocity_accum_o_ap_vld <= grp_low_pass_filter_float_s_fu_409_velocity_accum_o_ap_vld;
    xor_ln339_fu_1076_p2 <= (control_q0 xor ap_const_lv32_80000000);
    zext_ln1340_1_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_1_fu_1000_p1),63));
    zext_ln1340_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_2_fu_659_p1),63));
    zext_ln1340_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_fu_802_p1),63));
    zext_ln15_1_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_950_p4),63));
    zext_ln15_2_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_609_p4),63));
    zext_ln15_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_752_p4),63));
    zext_ln344_1_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_936_p4),9));
    zext_ln344_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_595_p4),9));
    zext_ln344_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_738_p4),9));
    zext_ln671_1_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1020_p3),16));
    zext_ln671_2_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_679_p3),16));
    zext_ln671_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_822_p3),16));
end behav;
