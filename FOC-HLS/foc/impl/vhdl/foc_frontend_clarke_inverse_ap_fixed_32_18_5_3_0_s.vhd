-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_clarke_inverse_ap_fixed_32_18_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Valpha : IN STD_LOGIC_VECTOR (31 downto 0);
    Vbeta : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of foc_frontend_clarke_inverse_ap_fixed_32_18_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv46_6ED9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000110111011011001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1FFFC000 : STD_LOGIC_VECTOR (31 downto 0) := "00011111111111111100000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Vbeta_temp_V_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln1168_fu_62_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1168_fu_62_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln712_5_fu_81_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln712_fu_78_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln712_5_fu_81_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_85_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_fu_101_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_20_fu_107_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_s_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_127_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_fu_145_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1548_fu_159_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1548_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_165_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_7_fu_177_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_181_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln740_7_fu_195_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_187_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln740_fu_203_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln740_fu_207_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1547_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1547_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1547_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_fu_91_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_15_fu_241_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_231_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_3_fu_249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1548_3_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_8_fu_269_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_9_fu_281_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_3_fu_285_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln740_9_fu_299_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln740_8_fu_291_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln740_3_fu_307_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln740_3_fu_311_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1547_3_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1547_3_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_3_fu_113_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_17_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_335_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_4_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1548_4_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_10_fu_373_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_11_fu_385_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_4_fu_389_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln740_1_fu_403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln740_s_fu_395_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln740_4_fu_411_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln740_4_fu_415_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1547_4_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1547_4_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1547_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1547_3_fu_321_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1547_4_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_mul_32s_16ns_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;



begin
    mul_32s_16ns_46_1_1_U54 : component foc_frontend_mul_32s_16ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 46)
    port map (
        din0 => Vbeta,
        din1 => mul_ln1168_fu_62_p1,
        dout => mul_ln1168_fu_62_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_0_preg <= select_ln1547_fu_217_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_1_preg <= select_ln1547_3_fu_321_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_2_preg <= select_ln1547_4_fu_425_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Vbeta_temp_V_reg_451 <= mul_ln1168_fu_62_p2(45 downto 14);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, select_ln1547_fu_217_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_0 <= select_ln1547_fu_217_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, select_ln1547_3_fu_321_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_1 <= select_ln1547_3_fu_321_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state2, select_ln1547_4_fu_425_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_2 <= select_ln1547_4_fu_425_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    icmp_ln1547_3_fu_257_p2 <= "1" when (signed(select_ln180_3_fu_249_p3) > signed(ap_const_lv32_1FFFC000)) else "0";
    icmp_ln1547_4_fu_361_p2 <= "1" when (signed(select_ln180_4_fu_353_p3) > signed(ap_const_lv32_1FFFC000)) else "0";
    icmp_ln1547_fu_153_p2 <= "1" when (signed(select_ln180_fu_145_p3) > signed(ap_const_lv32_1FFFC000)) else "0";
    icmp_ln1548_3_fu_263_p2 <= "1" when (signed(x_V_fu_91_p4) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1548_4_fu_367_p2 <= "1" when (signed(x_V_3_fu_113_p4) > signed(ap_const_lv32_0)) else "0";
    icmp_ln1548_fu_159_p0 <= Valpha;
    icmp_ln1548_fu_159_p2 <= "1" when (signed(icmp_ln1548_fu_159_p0) > signed(ap_const_lv32_0)) else "0";
    mul_ln1168_fu_62_p1 <= ap_const_lv46_6ED9(16 - 1 downto 0);
    p_Result_15_fu_241_p3 <= ret_V_fu_85_p2(32 downto 32);
    p_Result_17_fu_345_p3 <= ret_V_20_fu_107_p2(32 downto 32);
    
    p_Result_18_fu_127_p4_proc : process(p_Val2_s_fu_123_p1)
    begin
        p_Result_18_fu_127_p4 <= p_Val2_s_fu_123_p1;
        p_Result_18_fu_127_p4(31) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_19_fu_231_p4_proc : process(p_Val2_12_fu_225_p2)
    begin
        p_Result_19_fu_231_p4 <= p_Val2_12_fu_225_p2;
        p_Result_19_fu_231_p4(31) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_20_fu_335_p4_proc : process(p_Val2_14_fu_329_p2)
    begin
        p_Result_20_fu_335_p4 <= p_Val2_14_fu_329_p2;
        p_Result_20_fu_335_p4(31) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_137_p1 <= Valpha;
    p_Result_s_fu_137_p3 <= p_Result_s_fu_137_p1(31 downto 31);
    p_Val2_12_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(x_V_fu_91_p4));
    p_Val2_14_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(x_V_3_fu_113_p4));
    p_Val2_s_fu_123_p1 <= r_fu_101_p2(32 - 1 downto 0);
    r_fu_101_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(sext_ln712_5_fu_81_p1));
    ret_V_20_fu_107_p2 <= std_logic_vector(unsigned(r_fu_101_p2) - unsigned(sext_ln712_fu_78_p1));
    ret_V_fu_85_p2 <= std_logic_vector(signed(sext_ln712_fu_78_p1) - signed(sext_ln712_5_fu_81_p1));
    select_ln1547_3_fu_321_p3 <= 
        sext_ln1547_3_fu_317_p1 when (icmp_ln1547_3_fu_257_p2(0) = '1') else 
        x_V_fu_91_p4;
    select_ln1547_4_fu_425_p3 <= 
        sext_ln1547_4_fu_421_p1 when (icmp_ln1547_4_fu_361_p2(0) = '1') else 
        x_V_3_fu_113_p4;
    select_ln1547_fu_217_p2 <= Valpha;
    select_ln1547_fu_217_p3 <= 
        sext_ln1547_fu_213_p1 when (icmp_ln1547_fu_153_p2(0) = '1') else 
        select_ln1547_fu_217_p2;
    select_ln180_3_fu_249_p3 <= 
        p_Result_19_fu_231_p4 when (p_Result_15_fu_241_p3(0) = '1') else 
        x_V_fu_91_p4;
    select_ln180_4_fu_353_p3 <= 
        p_Result_20_fu_335_p4 when (p_Result_17_fu_345_p3(0) = '1') else 
        x_V_3_fu_113_p4;
    select_ln180_fu_145_p2 <= Valpha;
    select_ln180_fu_145_p3 <= 
        p_Result_18_fu_127_p4 when (p_Result_s_fu_137_p3(0) = '1') else 
        select_ln180_fu_145_p2;
        sext_ln1547_3_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln740_3_fu_311_p2),32));

        sext_ln1547_4_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln740_4_fu_415_p2),32));

        sext_ln1547_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln740_fu_207_p2),32));

    sext_ln712_5_fu_81_p0 <= Valpha;
        sext_ln712_5_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln712_5_fu_81_p0),33));

        sext_ln712_fu_78_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Vbeta_temp_V_reg_451),33));

        sext_ln740_3_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln740_9_fu_299_p3),31));

        sext_ln740_4_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln740_1_fu_403_p3),31));

        sext_ln740_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln740_7_fu_195_p3),31));

    shl_ln740_1_fu_403_p3 <= (sub_ln12_4_fu_389_p2 & ap_const_lv14_0);
    shl_ln740_7_fu_195_p3 <= (sub_ln12_fu_181_p2 & ap_const_lv14_0);
    shl_ln740_8_fu_291_p3 <= (sub_ln12_3_fu_285_p2 & ap_const_lv29_0);
    shl_ln740_9_fu_299_p3 <= (sub_ln12_3_fu_285_p2 & ap_const_lv14_0);
    shl_ln740_s_fu_395_p3 <= (sub_ln12_4_fu_389_p2 & ap_const_lv29_0);
    shl_ln_fu_187_p3 <= (sub_ln12_fu_181_p2 & ap_const_lv29_0);
    sub_ln12_3_fu_285_p2 <= std_logic_vector(unsigned(zext_ln12_8_fu_269_p1) - unsigned(zext_ln12_9_fu_281_p1));
    sub_ln12_4_fu_389_p2 <= std_logic_vector(unsigned(zext_ln12_10_fu_373_p1) - unsigned(zext_ln12_11_fu_385_p1));
    sub_ln12_fu_181_p2 <= std_logic_vector(unsigned(zext_ln12_fu_165_p1) - unsigned(zext_ln12_7_fu_177_p1));
    sub_ln740_3_fu_311_p2 <= std_logic_vector(unsigned(shl_ln740_8_fu_291_p3) - unsigned(sext_ln740_3_fu_307_p1));
    sub_ln740_4_fu_415_p2 <= std_logic_vector(unsigned(shl_ln740_s_fu_395_p3) - unsigned(sext_ln740_4_fu_411_p1));
    sub_ln740_fu_207_p2 <= std_logic_vector(unsigned(shl_ln_fu_187_p3) - unsigned(sext_ln740_fu_203_p1));
    tmp_18_fu_273_p3 <= ret_V_fu_85_p2(32 downto 32);
    tmp_21_fu_377_p3 <= ret_V_20_fu_107_p2(32 downto 32);
    tmp_fu_169_p1 <= Valpha;
    tmp_fu_169_p3 <= tmp_fu_169_p1(31 downto 31);
    x_V_3_fu_113_p4 <= ret_V_20_fu_107_p2(32 downto 1);
    x_V_fu_91_p4 <= ret_V_fu_85_p2(32 downto 1);
    zext_ln12_10_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1548_4_fu_367_p2),2));
    zext_ln12_11_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_377_p3),2));
    zext_ln12_7_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_169_p3),2));
    zext_ln12_8_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1548_3_fu_263_p2),2));
    zext_ln12_9_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_273_p3),2));
    zext_ln12_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1548_fu_159_p2),2));
end behav;
