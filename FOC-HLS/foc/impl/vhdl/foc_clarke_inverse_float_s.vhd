-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_clarke_inverse_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Valpha : IN STD_LOGIC_VECTOR (31 downto 0);
    Vbeta : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of foc_clarke_inverse_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3FDDB22D : STD_LOGIC_VECTOR (31 downto 0) := "00111111110111011011001000101101";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_46FFFE00 : STD_LOGIC_VECTOR (31 downto 0) := "01000110111111111111111000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_53_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bitcast_ln354_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln18_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_71_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_1_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_44_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_49_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub6_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_60_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_5_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln354_3_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal or_ln28_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln354_4_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln32_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln29_1_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_49_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_53_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_53_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_65_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_71_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_82_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_107_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_120_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln18_fu_130_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln18_1_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_7_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_167_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_7_fu_175_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_179_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_189_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln21_fu_185_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln21_fu_197_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln18_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_5_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_223_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_3_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_236_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_246_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_6_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_271_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln368_4_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_294_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_2_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_8_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_9_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_8_fu_320_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_9_fu_328_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_3_fu_332_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln3_fu_342_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln29_fu_338_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln29_fu_350_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln12_10_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln12_11_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_10_fu_365_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_11_fu_373_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_4_fu_377_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln4_fu_387_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln33_fu_383_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln33_fu_395_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal and_ln28_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_68_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_71_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_76_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_82_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_fsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_sitofp_32s_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foc_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_4_full_dsp_1_U23 : component foc_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_95,
        din1 => Valpha,
        ce => ap_const_logic_1,
        dout => grp_fu_44_p2);

    fsub_32ns_32ns_32_4_full_dsp_1_U24 : component foc_fsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_49_p0,
        din1 => reg_95,
        ce => ap_const_logic_1,
        dout => grp_fu_49_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U25 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_53_p0,
        din1 => grp_fu_53_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_53_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U26 : component foc_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub6_reg_501,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_60_p2);

    sitofp_32s_32_4_no_dsp_1_U27 : component foc_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_65_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_65_p1);

    sitofp_32s_32_4_no_dsp_1_U28 : component foc_sitofp_32s_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_68_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_68_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U29 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_71_p0,
        din1 => grp_fu_71_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_71_opcode,
        dout => grp_fu_71_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U30 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_76_p0,
        din1 => grp_fu_76_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_76_opcode,
        dout => grp_fu_76_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U31 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_82_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => grp_fu_82_opcode,
        dout => grp_fu_82_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U32 : component foc_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_5_reg_511,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_89_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_0_preg <= select_ln18_reg_506;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_1_preg <= select_ln28_fu_410_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_return_2_preg <= select_ln32_fu_422_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                dc_5_reg_511 <= grp_fu_60_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_ln18_reg_464 <= or_ln18_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                or_ln28_reg_524 <= or_ln28_fu_262_p2;
                or_ln32_reg_546 <= or_ln32_fu_310_p2;
                tmp_23_reg_531 <= grp_fu_71_p2;
                tmp_24_reg_536 <= grp_fu_76_p2;
                tmp_27_reg_553 <= grp_fu_82_p2;
                tmp_28_reg_558 <= grp_fu_89_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_95 <= grp_fu_53_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                select_ln18_reg_506 <= select_ln18_fu_212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sub6_reg_501 <= grp_fu_49_p2;
                sub_reg_496 <= grp_fu_44_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_19_reg_481 <= grp_fu_76_p2;
                tmp_20_reg_486 <= grp_fu_82_p2;
                tmp_s_reg_476 <= grp_fu_71_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_22_reg_563 <= grp_fu_71_p2;
                tmp_26_reg_573 <= grp_fu_76_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln12_10_fu_361_p2 <= (tmp_27_reg_553 and or_ln32_reg_546);
    and_ln12_11_fu_369_p2 <= (tmp_28_reg_558 and or_ln32_reg_546);
    and_ln12_7_fu_171_p2 <= (tmp_20_reg_486 and or_ln18_reg_464);
    and_ln12_8_fu_316_p2 <= (tmp_23_reg_531 and or_ln28_reg_524);
    and_ln12_9_fu_324_p2 <= (tmp_24_reg_536 and or_ln28_reg_524);
    and_ln12_fu_163_p2 <= (tmp_19_reg_481 and or_ln18_reg_464);
    and_ln18_fu_208_p2 <= (tmp_s_reg_476 and or_ln18_reg_464);
    and_ln28_fu_406_p2 <= (tmp_22_reg_563 and or_ln28_reg_524);
    and_ln32_fu_418_p2 <= (tmp_26_reg_573 and or_ln32_reg_546);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(select_ln18_reg_506, ap_CS_fsm_state16, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_0 <= select_ln18_reg_506;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state16, select_ln28_fu_410_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_1 <= select_ln28_fu_410_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state16, select_ln32_fu_422_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_return_2 <= select_ln32_fu_422_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    bitcast_ln354_3_fu_231_p1 <= zext_ln368_3_fu_227_p1;
    bitcast_ln354_4_fu_279_p1 <= zext_ln368_4_fu_275_p1;
    bitcast_ln354_fu_115_p1 <= zext_ln368_fu_111_p1;
    data_V_5_fu_219_p1 <= reg_95;
    data_V_6_fu_268_p1 <= dc_5_reg_511;
    data_V_fu_103_p1 <= Valpha;
    grp_fu_49_p0 <= xor_ln26_fu_152_p2;

    grp_fu_53_p0_assign_proc : process(ap_CS_fsm_state1, Vbeta, sub_reg_496, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_53_p0 <= sub_reg_496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_53_p0 <= Vbeta;
        else 
            grp_fu_53_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_53_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_53_p1 <= ap_const_lv32_3F000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_53_p1 <= ap_const_lv32_3FDDB22D;
        else 
            grp_fu_53_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_65_p0_assign_proc : process(sext_ln21_1_fu_203_p1, ap_CS_fsm_state6, ap_CS_fsm_state13, sext_ln29_1_fu_356_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_65_p0 <= sext_ln29_1_fu_356_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_65_p0 <= sext_ln21_1_fu_203_p1;
        else 
            grp_fu_65_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

        grp_fu_68_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln33_fu_395_p2),32));


    grp_fu_71_opcode_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_71_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_71_opcode <= ap_const_lv5_4;
        else 
            grp_fu_71_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_71_p0_assign_proc : process(reg_95, ap_CS_fsm_state4, bitcast_ln354_fu_115_p1, bitcast_ln354_3_fu_231_p1, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_71_p0 <= bitcast_ln354_3_fu_231_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_71_p0 <= reg_95;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_71_p0 <= bitcast_ln354_fu_115_p1;
        else 
            grp_fu_71_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_71_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_71_p1 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_71_p1 <= ap_const_lv32_46FFFE00;
        else 
            grp_fu_71_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_76_opcode_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_76_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_76_opcode <= ap_const_lv5_2;
        else 
            grp_fu_76_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_76_p0_assign_proc : process(Valpha, reg_95, ap_CS_fsm_state4, ap_CS_fsm_state12, bitcast_ln354_4_fu_279_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_76_p0 <= bitcast_ln354_4_fu_279_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_76_p0 <= reg_95;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_76_p0 <= Valpha;
        else 
            grp_fu_76_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_76_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_76_p1 <= ap_const_lv32_46FFFE00;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_76_p1 <= ap_const_lv32_0;
        else 
            grp_fu_76_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_82_opcode_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_82_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_82_opcode <= ap_const_lv5_4;
        else 
            grp_fu_82_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_82_p0_assign_proc : process(Valpha, ap_CS_fsm_state4, dc_5_reg_511, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_82_p0 <= dc_5_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_82_p0 <= Valpha;
        else 
            grp_fu_82_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln18_1_fu_140_p2 <= "1" when (trunc_ln18_fu_130_p1 = ap_const_lv23_0) else "0";
    icmp_ln18_fu_134_p2 <= "0" when (tmp_fu_120_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_1_fu_256_p2 <= "1" when (trunc_ln28_fu_246_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_250_p2 <= "0" when (tmp_21_fu_236_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_2_fu_304_p2 <= "1" when (trunc_ln32_fu_294_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_298_p2 <= "0" when (tmp_25_fu_284_p4 = ap_const_lv8_FF) else "1";
    or_ln18_fu_146_p2 <= (icmp_ln18_fu_134_p2 or icmp_ln18_1_fu_140_p2);
    or_ln28_fu_262_p2 <= (icmp_ln28_fu_250_p2 or icmp_ln28_1_fu_256_p2);
    or_ln32_fu_310_p2 <= (icmp_ln32_fu_298_p2 or icmp_ln32_2_fu_304_p2);
    p_Result_5_fu_223_p1 <= data_V_5_fu_219_p1(31 - 1 downto 0);
    p_Result_6_fu_271_p1 <= data_V_6_fu_268_p1(31 - 1 downto 0);
    p_Result_s_fu_107_p1 <= data_V_fu_103_p1(31 - 1 downto 0);
    select_ln18_fu_212_p3 <= 
        Valpha when (and_ln18_fu_208_p2(0) = '1') else 
        grp_fu_65_p1;
    select_ln28_fu_410_p3 <= 
        grp_fu_65_p1 when (and_ln28_fu_406_p2(0) = '1') else 
        reg_95;
    select_ln32_fu_422_p3 <= 
        grp_fu_68_p1 when (and_ln32_fu_418_p2(0) = '1') else 
        dc_5_reg_511;
        sext_ln21_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln21_fu_197_p2),32));

        sext_ln21_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_fu_179_p2),17));

        sext_ln29_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln29_fu_350_p2),32));

        sext_ln29_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_3_fu_332_p2),17));

        sext_ln33_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln12_4_fu_377_p2),17));

    shl_ln3_fu_342_p3 <= (sub_ln12_3_fu_332_p2 & ap_const_lv15_0);
    shl_ln4_fu_387_p3 <= (sub_ln12_4_fu_377_p2 & ap_const_lv15_0);
    shl_ln_fu_189_p3 <= (sub_ln12_fu_179_p2 & ap_const_lv15_0);
    sub_ln12_3_fu_332_p2 <= std_logic_vector(unsigned(zext_ln12_8_fu_320_p1) - unsigned(zext_ln12_9_fu_328_p1));
    sub_ln12_4_fu_377_p2 <= std_logic_vector(unsigned(zext_ln12_10_fu_365_p1) - unsigned(zext_ln12_11_fu_373_p1));
    sub_ln12_fu_179_p2 <= std_logic_vector(unsigned(zext_ln12_fu_167_p1) - unsigned(zext_ln12_7_fu_175_p1));
    sub_ln21_fu_197_p2 <= std_logic_vector(unsigned(shl_ln_fu_189_p3) - unsigned(sext_ln21_fu_185_p1));
    sub_ln29_fu_350_p2 <= std_logic_vector(unsigned(shl_ln3_fu_342_p3) - unsigned(sext_ln29_fu_338_p1));
    sub_ln33_fu_395_p2 <= std_logic_vector(unsigned(shl_ln4_fu_387_p3) - unsigned(sext_ln33_fu_383_p1));
    tmp_21_fu_236_p4 <= data_V_5_fu_219_p1(30 downto 23);
    tmp_25_fu_284_p4 <= data_V_6_fu_268_p1(30 downto 23);
    tmp_fu_120_p4 <= data_V_fu_103_p1(30 downto 23);
    trunc_ln18_fu_130_p1 <= data_V_fu_103_p1(23 - 1 downto 0);
    trunc_ln28_fu_246_p1 <= data_V_5_fu_219_p1(23 - 1 downto 0);
    trunc_ln32_fu_294_p1 <= data_V_6_fu_268_p1(23 - 1 downto 0);
    xor_ln26_fu_152_p2 <= (data_V_fu_103_p1 xor ap_const_lv32_80000000);
    zext_ln12_10_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_10_fu_361_p2),2));
    zext_ln12_11_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_11_fu_369_p2),2));
    zext_ln12_7_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_7_fu_171_p2),2));
    zext_ln12_8_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_8_fu_316_p2),2));
    zext_ln12_9_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_9_fu_324_p2),2));
    zext_ln12_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln12_fu_163_p2),2));
    zext_ln368_3_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_223_p1),32));
    zext_ln368_4_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_6_fu_271_p1),32));
    zext_ln368_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_107_p1),32));
end behav;
