-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foc_frontend_PI_control_ap_fixed_32_18_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ref : IN STD_LOGIC_VECTOR (31 downto 0);
    val_r : IN STD_LOGIC_VECTOR (31 downto 0);
    KP : IN STD_LOGIC_VECTOR (27 downto 0);
    KI : IN STD_LOGIC_VECTOR (18 downto 0);
    ierr_V_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ierr_V_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ierr_V_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of foc_frontend_PI_control_ap_fixed_32_18_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1FFFC000 : STD_LOGIC_VECTOR (31 downto 0) := "00011111111111111100000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln1245_fu_142_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln1245_reg_305 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_4_reg_315 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln712_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_V_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_16_fu_126_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln1245_fu_132_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_fu_112_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal ret_V_fu_136_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln1201_fu_164_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln1201_3_fu_169_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal sub_ln1201_2_fu_179_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal select_ln1201_fu_185_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal x_V_fu_191_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_207_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1548_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_245_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln12_14_fu_257_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln12_fu_261_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln740_s_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_267_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln740_fu_283_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln740_fu_287_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln1547_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1547_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component foc_frontend_mul_28s_32s_59_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component foc_frontend_mul_19s_32s_51_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;



begin
    mul_28s_32s_59_1_1_U38 : component foc_frontend_mul_28s_32s_59_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 59)
    port map (
        din0 => KP,
        din1 => err_V_fu_82_p2,
        dout => r_V_fu_112_p2);

    mul_19s_32s_51_1_1_U39 : component foc_frontend_mul_19s_32s_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 32,
        dout_WIDTH => 51)
    port map (
        din0 => KI,
        din1 => add_ln712_fu_92_p2,
        dout => r_V_16_fu_126_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_reg_310 <= ret_V_fu_136_p2(58 downto 58);
                trunc_ln1201_4_reg_315 <= ret_V_fu_136_p2(53 downto 8);
                trunc_ln1245_reg_305 <= trunc_ln1245_fu_142_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln712_fu_92_p2 <= std_logic_vector(unsigned(ierr_V_i) + unsigned(err_V_fu_82_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sext_ln1547_fu_293_p1 when (icmp_ln1547_fu_233_p2(0) = '1') else 
        x_V_fu_191_p4;
    err_V_fu_82_p2 <= std_logic_vector(unsigned(ref) - unsigned(val_r));
    icmp_ln1547_fu_233_p2 <= "1" when (signed(select_ln180_fu_225_p3) > signed(ap_const_lv32_1FFFC000)) else "0";
    icmp_ln1548_fu_239_p2 <= "1" when (signed(x_V_fu_191_p4) > signed(ap_const_lv32_0)) else "0";

    ierr_V_o_assign_proc : process(ap_CS_fsm_state1, ierr_V_i, add_ln712_fu_92_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ierr_V_o <= add_ln712_fu_92_p2;
        else 
            ierr_V_o <= ierr_V_i;
        end if; 
    end process;


    ierr_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ierr_V_o_ap_vld <= ap_const_logic_1;
        else 
            ierr_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_27_fu_207_p4_proc : process(p_Val2_s_fu_201_p2)
    begin
        p_Result_27_fu_207_p4 <= p_Val2_s_fu_201_p2;
        p_Result_27_fu_207_p4(31) <= ap_const_lv1_0(0);
    end process;

    p_Result_s_fu_217_p3 <= select_ln1201_fu_185_p3(45 downto 45);
    p_Val2_s_fu_201_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(x_V_fu_191_p4));
    ret_V_fu_136_p2 <= std_logic_vector(signed(sext_ln1245_fu_132_p1) + signed(r_V_fu_112_p2));
    select_ln1201_fu_185_p3 <= 
        sub_ln1201_2_fu_179_p2 when (tmp_reg_310(0) = '1') else 
        trunc_ln1201_4_reg_315;
    select_ln180_fu_225_p3 <= 
        p_Result_27_fu_207_p4 when (p_Result_s_fu_217_p3(0) = '1') else 
        x_V_fu_191_p4;
        sext_ln1245_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_16_fu_126_p2),59));

        sext_ln1547_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln740_fu_287_p2),32));

        sext_ln740_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln740_s_fu_275_p3),31));

    shl_ln740_s_fu_275_p3 <= (sub_ln12_fu_261_p2 & ap_const_lv14_0);
    shl_ln_fu_267_p3 <= (sub_ln12_fu_261_p2 & ap_const_lv29_0);
    sub_ln1201_2_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv46_0) - unsigned(trunc_ln1201_3_fu_169_p4));
    sub_ln1201_fu_164_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(trunc_ln1245_reg_305));
    sub_ln12_fu_261_p2 <= std_logic_vector(unsigned(zext_ln12_fu_245_p1) - unsigned(zext_ln12_14_fu_257_p1));
    sub_ln740_fu_287_p2 <= std_logic_vector(unsigned(shl_ln_fu_267_p3) - unsigned(sext_ln740_fu_283_p1));
    tmp_30_fu_249_p3 <= select_ln1201_fu_185_p3(45 downto 45);
    trunc_ln1201_3_fu_169_p4 <= sub_ln1201_fu_164_p2(53 downto 8);
    trunc_ln1245_fu_142_p1 <= ret_V_fu_136_p2(54 - 1 downto 0);
    x_V_fu_191_p4 <= select_ln1201_fu_185_p3(45 downto 14);
    zext_ln12_14_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_249_p3),2));
    zext_ln12_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1548_fu_239_p2),2));
end behav;
